<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Matery主题文章</title>
      <link href="/2022/05/24/HexoMateryPost/"/>
      <url>/2022/05/24/HexoMateryPost/</url>
      
        <content type="html"><![CDATA[<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p><a href="https://hexo.io/zh-cn/docs/writing">Hexo Writing</a></p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>可以执行该命令来创建一篇新文章或者新的页面。在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的<code>default_layout</code> 参数来指定默认布局。</p><h2 id="Matrey"><a href="#Matrey" class="headerlink" title="Matrey"></a>Matrey</h2><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-19">闪烁之狐｜Hexo博客主题之hexo-theme-matery的介绍</a></p><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac-M1 Docker</title>
      <link href="/2021/05/10/MacInstallDocker/"/>
      <url>/2021/05/10/MacInstallDocker/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.docker.com/">Docker</a> 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>以下简介源自<a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a></p></blockquote><h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p><strong>Docker</strong> 最初是 <code>dotCloud</code> 公司创始人 <a href="https://github.com/shykes">Solomon Hykes</a> 在法国期间发起的一个公司内部项目，它是基于 <code>dotCloud</code> 公司多年云服务技术的一次革新，并于 <a href="https://en.wikipedia.org/wiki/Docker_">2013 年 3 月以 Apache 2.0 授权协议开源</a>，主要项目代码在 <a href="https://github.com/moby/moby">GitHub</a> 上进行维护。<code>Docker</code> 项目后来还加入了 Linux 基金会，并成立推动 <a href="https://opencontainers.org/">开放容器联盟（OCI）</a>。</p><p><strong>Docker</strong> 自开源后受到广泛的关注和讨论，至今其 <a href="https://github.com/moby/moby">GitHub 项目</a> 已经超过 5 万 7 千个星标和一万多个 <code>fork</code>。甚至由于 <code>Docker</code> 项目的火爆，在 <code>2013</code> 年底，<a href="https://www.docker.com/blog/dotcloud-is-becoming-docker-inc/">dotCloud 公司决定改名为 Docker</a>。<code>Docker</code> 最初是在 <code>Ubuntu 12.04</code> 上开发实现的；<code>Red Hat</code> 则从 <code>RHEL 6.5</code> 开始对 <code>Docker</code> 进行支持；<code>Google</code> 也在其 <code>PaaS</code> 产品中广泛应用 <code>Docker</code>。</p><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <a href="https://golang.google.cn/">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/">LXC</a>，从 <code>0.7</code> 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 <code>1.11</code> 版本开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/containerd">containerd</a>。</p><h3 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h3><p>作为一种新兴的虚拟化方式，<code>Docker</code> 跟传统的虚拟化方式相比具有众多的优势。</p><h5 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h5><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><h5 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h5><p>传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</p><h5 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h5><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 <em>「这段代码在我机器上没问题啊」</em> 这类问题。</p><h5 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h5><p>对开发和运维（<a href="https://zh.wikipedia.org/wiki/DevOps">DevOps</a>）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p><p>使用 <code>Docker</code> 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 <a href="">Dockerfile</a> 来进行镜像构建，并结合 <a href="https://en.wikipedia.org/wiki/Continuous_integration">持续集成(Continuous Integration)</a> 系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 <a href="https://en.wikipedia.org/wiki/Continuous_delivery">持续部署(Continuous Delivery&#x2F;Deployment)</a> 系统进行自动部署。</p><p>而且使用 <a href=""><code>Dockerfile</code></a> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p><h5 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h5><p>由于 <code>Docker</code> 确保了执行环境的一致性，使得应用的迁移更加容易。<code>Docker</code> 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><h5 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h5><p><code>Docker</code> 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的 <a href="https://hub.docker.com/search/?type=image&image_filter=official">官方镜像</a>，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><h5 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h5><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为 <code>MB</code></td><td>一般为 <code>GB</code></td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.docker.com/">Docker官网<code>https://www.docker.com/</code></a></p><p><a href="https://www.docker.com/blog/download-and-try-the-tech-preview-of-docker-desktop-for-m1/">M1下载<code>https://www.docker.com/blog/download-and-try-the-tech-preview-of-docker-desktop-for-m1/</code></a></p><p><a href="https://doesitarm.com/app/docker/">doesitarm<code>https://doesitarm.com/app/docker/</code></a>网站显示docker已经原生支持M1芯片</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/2021051064216.png"></p><p>查看版本信息</p><pre class=" language-bash"><code class="language-bash">docker --version</code></pre><pre class=" language-bash"><code class="language-bash">docker --info</code></pre><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。设置如下，<code>Perferences</code> -&gt;<code>Docker Engine</code>，修改完成之后，点击<code>Apply &amp; Restart</code>。</p><p><a href="https://www.163yun.com/help/documents/56918246390157312">网易云加速器 <code>https://hub-mirror.c.163.com</code></a></p><p><a href="https://cloud.baidu.com/doc/CCE/s/Yjxppt74z#%E4%BD%BF%E7%94%A8dockerhub%E5%8A%A0%E9%80%9F%E5%99%A8">百度云加速器 <code>https://mirror.baidubce.com</code></a></p><pre class=" language-bash"><code class="language-bash"><span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://hub-mirror.c.163.com"</span>,    <span class="token string">"https://mirror.baidubce.com"</span>  <span class="token punctuation">]</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/2021051063533.png"></p><p>检查镜像配置的<code>Registry Mirrors</code></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/2021051064050.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA导入配置</title>
      <link href="/2021/04/02/ImportProjectToIDEA/"/>
      <url>/2021/04/02/ImportProjectToIDEA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>解决如何讲一个外部的项目导入idea并且配置调通</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要用到之前写过的一个SSM项目，早前托管在github上面，小半年没有动过了，写项目的代码电脑已被重做系统，加之又入手了M1的mac。以本文记述拉下来导入IDEA并配置调通运行。</p><p><code>环境</code></p><ul><li>M1 MAC</li><li>MySQL 5.7</li><li>JDK1.8</li><li>Intellij IDEA</li></ul><p>⚠️ 这是一个非maven的项目，之前是用eclipse开发完成</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h4 id="project-structure"><a href="#project-structure" class="headerlink" title="project structure"></a>project structure</h4><p>首先还是拉下来到本地，用idea打开（idea一开始选择<code>open project</code>而非<code>new project</code>），完成进入到<code>project structure</code>,如下设置本机环境。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ProjectSetting-project.png"></p><h5 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h5><p>进入下面的<code>Modules</code>，依次配置<code>Path</code>，<code>Dependences</code>,其中 Paths 定位到 <code>web-inf/classes </code>,<code>Dependencies</code> 加入JDK和项目 <code>web-inf/lib</code>也就是在使用eclipse编译器时倒入的jar包。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ProjectSetting-Modules-projectWeb.png"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ProjectSetting-Modules-Paths.png"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ProjectSetting-Modules-Dependences.png"></p><h5 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h5><p>点击<code> +</code> 号，选择 <code>java</code> ，然后还是选择项目的 <code>web-inf/lib</code></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ProjectSetting-Libraries.png"></p><h5 id="Facets"><a href="#Facets" class="headerlink" title="Facets"></a>Facets</h5><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ProjectSetting-facets.png"></p><h5 id="Artifacts"><a href="#Artifacts" class="headerlink" title="Artifacts"></a>Artifacts</h5><p><code>Add</code>选择的<code>Web  Application ：Exploded</code>，并且是<code>From Mouldes</code></p><p>这有一步很重要，在添加完以后，一定要选中你的项目，然后鼠标左键<code>Put into Output Root</code>一下</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ProjectSetting-Artifacts.png"></p><h4 id="关于Tomcate"><a href="#关于Tomcate" class="headerlink" title="关于Tomcate"></a>关于Tomcate</h4><p>关于<code>tomcat</code>下载这些不做赘述，这里配置好<code>tomcat</code>并且在<code>deployment</code>中添加项目的war包即可,访问路径一定要加上项目包名。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Tomcat0.png"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Tomcat1.png"></p><h4 id="关于乱码"><a href="#关于乱码" class="headerlink" title="关于乱码"></a>关于乱码</h4><p>导入的中文乱码是因为原来的项目编码格式与本地IDEA编码格式不一致导致的,一般开发环境的编码为”GBK”，”UTF-8”,导致乱码的很大原因都是这两种编码格式转换发出的乱码问题，点击<code>IDEA</code>右下角的编码快捷按钮，点击切换编码为<code>GBK</code>，弹出的提示框点击<code>reload</code>，便恢复中文注释，这时候我们可以把项目的编码格式转换为<code>utf-8</code> ，这次点击的是<code>Convert </code>进行编码格式的转换。</p><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>数据库文件直接运行到出的sql文件即可，注意8.0以上设置需<code>timezone</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出师表</title>
      <link href="/2021/03/22/ChuShiBiao/"/>
      <url>/2021/03/22/ChuShiBiao/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        君 先帝 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        君 陛下 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        君 文景 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        君 桓灵 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        国 曹魏 <span class="token operator">=</span> <span class="token keyword">new</span> 国<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        国 东吴 <span class="token operator">=</span> <span class="token keyword">new</span> 国<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        国 益州 <span class="token operator">=</span> <span class="token keyword">new</span> 国<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        国 先汉 <span class="token operator">=</span> <span class="token keyword">new</span> 国<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        国 后汉 <span class="token operator">=</span> <span class="token keyword">new</span> 国<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        侍中 侍中 <span class="token operator">=</span> <span class="token keyword">new</span> 侍中<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        侍郎 侍郎 <span class="token operator">=</span> <span class="token keyword">new</span> 侍郎<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        尚书 尚书 <span class="token operator">=</span> <span class="token keyword">new</span> 尚书<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        长史 长史 <span class="token operator">=</span> <span class="token keyword">new</span> 长史<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        参军 参军 <span class="token operator">=</span> <span class="token keyword">new</span> 参军<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        中都督 中都督 <span class="token operator">=</span> <span class="token keyword">new</span> 中都督<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        丞相 丞相 <span class="token operator">=</span> <span class="token keyword">new</span> 丞相<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        先帝<span class="token punctuation">.</span>创业<span class="token punctuation">(</span><span class="token number">0.49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        益州<span class="token punctuation">.</span>国运 <span class="token operator">=</span> 气候<span class="token punctuation">.</span>疲敝<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此诚危急存亡之秋也！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>侍中<span class="token punctuation">.</span>郭攸之<span class="token punctuation">.</span>追先帝之殊遇<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 侍中<span class="token punctuation">.</span>郭攸之<span class="token punctuation">.</span>报之于陛下<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            侍中<span class="token punctuation">.</span>郭攸之<span class="token punctuation">.</span>不懈于内<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>侍中<span class="token punctuation">.</span>费祎<span class="token punctuation">.</span>追先帝之殊遇<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 侍中<span class="token punctuation">.</span>费祎<span class="token punctuation">.</span>报之于陛下<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            侍中<span class="token punctuation">.</span>费祎<span class="token punctuation">.</span>不懈于内<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>侍郎<span class="token punctuation">.</span>董允<span class="token punctuation">.</span>追先帝之殊遇<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 侍郎<span class="token punctuation">.</span>董允<span class="token punctuation">.</span>报之于陛下<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            侍郎<span class="token punctuation">.</span>董允<span class="token punctuation">.</span>不懈于内<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>中都督<span class="token punctuation">.</span>向宠<span class="token punctuation">.</span>追先帝之殊遇<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 中都督<span class="token punctuation">.</span>向宠<span class="token punctuation">.</span>报之于陛下<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            中都督<span class="token punctuation">.</span>向宠<span class="token punctuation">.</span>忘身于外<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>陛下<span class="token punctuation">.</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            陛下<span class="token punctuation">.</span>开张圣听<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            陛下<span class="token punctuation">.</span>恢弘志士之气<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            陛下<span class="token punctuation">.</span>妄自菲薄<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            陛下<span class="token punctuation">.</span>引喻失义<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        陛下<span class="token punctuation">.</span>治国<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> 宫中 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> 府中 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> 陟臧 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> 罚否 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>宫中 <span class="token operator">==</span> 府中<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>陟臧 <span class="token operator">==</span> 罚否<span class="token punctuation">)</span><span class="token punctuation">;</span>        侍卫之臣 作奸犯科者 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        作奸犯科者<span class="token punctuation">.</span>为臣 <span class="token operator">=</span> 臣德<span class="token punctuation">.</span>奸<span class="token punctuation">;</span>        侍卫之臣 为忠善者 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        为忠善者<span class="token punctuation">.</span>为臣 <span class="token operator">=</span> 臣德<span class="token punctuation">.</span>贤<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>陛下<span class="token punctuation">.</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            益州<span class="token punctuation">.</span>付诸有司论其刑赏<span class="token punctuation">(</span>作奸犯科者<span class="token punctuation">)</span><span class="token punctuation">;</span>            益州<span class="token punctuation">.</span>付诸有司论其刑赏<span class="token punctuation">(</span>为忠善者<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            陛下<span class="token punctuation">.</span>偏私<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>侍中<span class="token punctuation">.</span>郭攸之<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤 <span class="token operator">&amp;&amp;</span> 侍中<span class="token punctuation">.</span>费祎<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤 <span class="token operator">&amp;&amp;</span> 侍郎<span class="token punctuation">.</span>董允<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此皆良实，志虑忠纯，是以先帝简拔以遗陛下。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        事 宫中之事 <span class="token operator">=</span> <span class="token keyword">new</span> 事<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>陛下<span class="token punctuation">.</span>咨之<span class="token punctuation">(</span>宫中之事<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 侍中<span class="token punctuation">.</span>郭攸之<span class="token punctuation">.</span>谋事<span class="token punctuation">(</span>宫中之事<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 侍中<span class="token punctuation">.</span>费祎<span class="token punctuation">.</span>谋事<span class="token punctuation">(</span>宫中之事<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 侍郎<span class="token punctuation">.</span>董允<span class="token punctuation">.</span>谋事<span class="token punctuation">(</span>宫中之事<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            陛下<span class="token punctuation">.</span>施行<span class="token punctuation">(</span>宫中之事<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"裨补阙漏，有所广益!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>中都督<span class="token punctuation">.</span>向宠<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性行淑均，晓畅军事。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先帝称之曰："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            先帝<span class="token punctuation">.</span>曰<span class="token punctuation">(</span><span class="token string">"能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是以众议举宠为督。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        事 营中之事 <span class="token operator">=</span> <span class="token keyword">new</span> 事<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>陛下<span class="token punctuation">.</span>咨之<span class="token punctuation">(</span>营中之事<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            陛下<span class="token punctuation">.</span>施行<span class="token punctuation">(</span>营中之事<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"行阵和睦，优劣得所!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        文景<span class="token punctuation">.</span>亲贤臣远小人<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        先汉<span class="token punctuation">.</span>国运 <span class="token operator">=</span> 气候<span class="token punctuation">.</span>兴隆<span class="token punctuation">;</span>        桓灵<span class="token punctuation">.</span>亲小人远贤臣<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        后汉<span class="token punctuation">.</span>国运 <span class="token operator">=</span> 气候<span class="token punctuation">.</span>倾颓<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            先帝<span class="token punctuation">.</span>每与臣论此事<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>先帝<span class="token punctuation">.</span>在<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>侍中<span class="token punctuation">.</span>郭攸之<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤 <span class="token operator">&amp;&amp;</span> 侍中<span class="token punctuation">.</span>费祎<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤 <span class="token operator">&amp;&amp;</span> 侍郎<span class="token punctuation">.</span>董允<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        丞相<span class="token punctuation">.</span>诸葛亮<span class="token punctuation">.</span>回首往事<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        丞相<span class="token punctuation">.</span>诸葛亮<span class="token punctuation">.</span>表忠心<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        丞相<span class="token punctuation">.</span>诸葛亮<span class="token punctuation">.</span>请战<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        丞相<span class="token punctuation">.</span>诸葛亮<span class="token punctuation">.</span>道别<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">enum</span> 王道 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>明<span class="token punctuation">,</span> 昏<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 君 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 在<span class="token punctuation">;</span>    王道 为君<span class="token punctuation">;</span>    君<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        在 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        为君 <span class="token operator">=</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 创业<span class="token punctuation">(</span><span class="token keyword">double</span> percentage<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>percentage <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            在 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"崩殂！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"兴复汉室，还于旧都！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 开张圣听<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"光先帝遗德！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 恢弘志士之气<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 妄自菲薄<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 引喻失义<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"塞忠谏之路！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 亲贤臣远小人<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        为君 <span class="token operator">=</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 亲小人远贤臣<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        为君 <span class="token operator">=</span> 王道<span class="token punctuation">.</span>昏<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 治国<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 偏私<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内外异法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 咨之<span class="token punctuation">(</span>事 事<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 施行<span class="token punctuation">(</span>事 事<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 曰<span class="token punctuation">(</span>String 言<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>言<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 每与臣论此事<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"叹息痛恨于桓灵。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">enum</span> 臣德 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>贤<span class="token punctuation">,</span> 奸<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 侍卫之臣 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    君 刘备 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    君 刘禅 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    臣德 为臣<span class="token punctuation">;</span>    侍卫之臣<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    侍卫之臣<span class="token punctuation">(</span>臣德 为臣<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>为臣 <span class="token operator">=</span> 为臣<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 不懈于内<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不懈于内!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 追先帝之殊遇<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>刘备<span class="token punctuation">.</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 报之于陛下<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>刘禅<span class="token punctuation">.</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 谋事<span class="token punctuation">(</span>事 事<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>刘禅<span class="token punctuation">.</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 回首往事<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 表忠心<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐托付不效，以伤先帝之明，故五月渡泸，深入不毛。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 请战<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 道别<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今当远离，临表涕泣，不知所云。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">enum</span> 气候 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>兴盛<span class="token punctuation">,</span> 疲敝<span class="token punctuation">,</span> 兴隆<span class="token punctuation">,</span> 倾颓<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 国 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    气候 国运<span class="token punctuation">;</span>    国<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        国运 <span class="token operator">=</span> 气候<span class="token punctuation">.</span>兴盛<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 付诸有司论其刑赏<span class="token punctuation">(</span>侍卫之臣 臣<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>臣<span class="token punctuation">.</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赏！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"刑！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 忠志之士 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    君 刘备 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    君 刘禅 <span class="token operator">=</span> <span class="token keyword">new</span> 君<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    臣德 为臣<span class="token punctuation">;</span>    忠志之士<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    忠志之士<span class="token punctuation">(</span>臣德 为臣<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>为臣 <span class="token operator">=</span> 为臣<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> 忘身于外<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"忘身于外!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 追先帝之殊遇<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>刘备<span class="token punctuation">.</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 报之于陛下<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>刘禅<span class="token punctuation">.</span>为君 <span class="token operator">==</span> 王道<span class="token punctuation">.</span>明<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> 谋事<span class="token punctuation">(</span>事 事<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>为臣 <span class="token operator">==</span> 臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 事 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 侍中 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    侍卫之臣 郭攸之 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span>    侍卫之臣 费祎 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 侍郎 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    侍卫之臣 董允 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 尚书 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    侍卫之臣 陈震 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 长史 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    侍卫之臣 张裔 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 参军 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    侍卫之臣 蒋琬 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 中都督 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    忠志之士 向宠 <span class="token operator">=</span> <span class="token keyword">new</span> 忠志之士<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> 丞相 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    侍卫之臣 诸葛亮 <span class="token operator">=</span> <span class="token keyword">new</span> 侍卫之臣<span class="token punctuation">(</span>臣德<span class="token punctuation">.</span>贤<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><blockquote><p>正文</p></blockquote><p>​       先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</p><p>　　宫中府中，俱为一体；陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</p><p>　　侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必能裨补阙漏，有所广益。</p><p>　　将军向宠，性行淑均，晓畅军事，试用于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</p><p>　　亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</p><p>　　臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</p><p>　　先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐托付不效，以伤先帝之明；故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</p><p>　　愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏。臣不胜受恩感激。今当远离，临表涕零，不知所言。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hermann Ebbinghaus</title>
      <link href="/2021/03/22/Ebbinghaus/"/>
      <url>/2021/03/22/Ebbinghaus/</url>
      
        <content type="html"><![CDATA[<p><strong>遗忘曲线</strong>（Forgetting curve）是用于表述记忆中的中长期记忆的遗忘率的一种曲线。这一曲线最早由心理学家<a href="https://zh.wikipedia.org/wiki/%E8%B5%AB%E5%B0%94%E6%9B%BC%C2%B7%E8%89%BE%E5%AE%BE%E6%B5%A9%E6%96%AF">赫尔曼·艾宾浩斯</a>通过自己1880年到1885年的实验提出。在这一实验中，艾宾浩斯使用了一些毫无意义的字母组合。通过记忆这些字母组合，并在一系列时间间隔后检查遗忘率，得到了这一曲线。因此，这一曲线又叫<strong>艾宾浩斯遗忘曲线</strong>。</p><hr><p>艾宾浩斯记忆法对于任何学习材料的记忆都是行之有效的，可以极大地提高记忆效率，收到事半功倍的记忆效果。</p><p>记忆并不是最后目的，它只是一种手段，记忆的目的是储备认识问题和解决问题的能力。怎样知道信息记住了多少，能力储备得怎样呢？要想巩固所学知识，必须及时复习；欲知记忆效果，应该经常进行自我测验，自测也是一种很好的复习方法，都是对艾宾浩斯记忆法的具体应用。</p><h2 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h2><p>艾宾浩斯遗忘曲线——记忆过程记忆的保持在时间上是不同的，有短期记忆和长期记忆两种。（大陆叫短时记忆&#x2F;长时记忆）平时的记忆的过程是：输入的信息在经过人的注意过程的学习后，便成为了人的短期的记忆，再经过进一步强化后成为长期记忆。长期记忆的保持时间有长有短，如果不经过及时的复习，这些记住过的东西就会遗忘，而经过了及时的复习，长期记忆就会继续保持下去。那么，对于我们来讲，怎样才叫做遗忘呢，所谓遗忘就是我们对于曾经记忆过的东西不能再认起来，也不能回忆起来，或者是错误的再认和错误的回忆，这些都是遗忘。艾宾浩斯在做这个实验的时候是拿自己作为测试对象的，他得出了一些关于记忆的结论。他选用了一些根本没有意义的音节，也就是那些不能拼出单词来的众多字母的组合，比如“asww”、“cfhhj”、“ijikmb”、“rfyjbc”等等。他经过对自己的测试，得到了一些数据。</p><p>艾宾浩斯遗忘曲线——记住的知识数量然后，艾宾浩斯又根据了这些点描绘出了一条曲线，这就是非常有名的揭示遗忘规律的曲线：艾宾浩斯遗忘曲线，图中竖轴表示学习中记住的知识数量，横轴表示时间(天数)，曲线表示记忆量变化的规律。这条曲线告诉人们在学习中的遗忘是有规律的，遗忘的进程不是均衡的，不是固定的一天丢掉几个都是十分相似的，但是现实中每个人的遗忘速度是十分不相同的，其中的原因是每个人对于信息的理解程度不同。然而，其他的科学家发现<strong>年龄</strong>并不会影响遗忘的<em>速度</em>。虽然随着年龄的增长，人们的记忆能力会总体下降，也就是说老年人能够记住的信息会相对减少，然而一旦信息已经被记住之后，老年人对于信息的遗忘速度并不比年轻人快。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>20分钟后，42%被遗忘掉，58%被记住。</p><p>1小时后，56%被遗忘掉，44%被记住。</p><p>1天后，74%被遗忘掉，26%被记住。</p><p>1周后，77%被遗忘掉，23%被记住。</p><p>1个月后，79%被遗忘掉，21%被记住。</p><h2 id="具体运用"><a href="#具体运用" class="headerlink" title="具体运用"></a>具体运用</h2><h5 id="复习点的确定（根据艾宾浩斯记忆曲线制定）："><a href="#复习点的确定（根据艾宾浩斯记忆曲线制定）：" class="headerlink" title="复习点的确定（根据艾宾浩斯记忆曲线制定）："></a>复习点的确定（根据艾宾浩斯记忆曲线制定）：</h5><p>1． 第一个记忆周期：5分钟</p><p>2． 第二个记忆周期：30分钟</p><p>3． 第三个记忆周期：12小时</p><p>4． 第四个记忆周期：1天</p><p>5． 第五个记忆周期：2天</p><p>6． 第六个记忆周期：4天</p><p>7． 第七个记忆周期：7天</p><p>8． 第八个记忆周期：15天</p><h4 id="背诵方法："><a href="#背诵方法：" class="headerlink" title="背诵方法："></a>背诵方法：</h4><p>1． 初记单词时需要记忆的内容：</p><p>a）单词外观，b） 单词的中文释义，c） 单词的读音</p><p>2． 每个list的具体背诵过程（每个list按12页，每页10个单词计）：</p><p>a) 背完一页（大约5分钟），立即返回该页第一个单词开始复习（大约几十秒）</p><p>b) 按上面方法背完1～6页（大约在30分钟），回到第1页开始复习（两三分钟）</p><p>c) 按上面同样方法背完7～12页，一个list结束</p><p>d) 相当于每个list被分为12个小的单元，每个小的单元自成一个复习系统；每6个小单元组成一个大单元，2个大单元各自成为一个复习系统。背一个list总共需要一小时左右的时间。</p><h4 id="复习过程："><a href="#复习过程：" class="headerlink" title="复习过程："></a>复习过程：</h4><p>a) 复习方法：遮住中文释义，尽力回忆该单词的意思，几遍下来都记不住的单词可以做记号重点记忆。</p><p>b) 复习一个list所需的时间为20分钟以内</p><p>c) 当天的list最好在中午之前背完，大约12小时之后（最好睡觉前）复习当天所背的list</p><p>d) 在其后的1，2，4，7，15天后分别复习当日所背的list</p><p>e）复习的原则</p><p>时间间隔：30秒 1分钟 5分钟 30分钟 1小时 8小时 1天 2天 6天 31天</p><p>重学节省诵读时间百分数：58.2 44.2 35.8 33.7 27.8 25.4 21.1</p><h4 id="复习点的确定"><a href="#复习点的确定" class="headerlink" title="复习点的确定"></a>复习点的确定</h4><p>人的记忆周期分为短期记忆和长期记忆两种。</p><p>第一个记忆周期是 5分钟</p><p>第二个记忆周期是30分钟</p><p>第三个记忆周期是12小时</p><p>这三个记忆周期属于短期记忆的范畴。</p><p>下面是几个比较重要的周期。</p><p>第四个记忆周期是 1天</p><p>第五个记忆周期是 2天</p><p>第六个记忆周期是 4天</p><p>第七个记忆周期是 7天</p><p>第八个记忆周期是15天</p><p>以上的8个周期应用于背词法，作为一个大的背词的循环的8个复习点，可以最大程度的提高背单词的效率</p><p>背单词就找个小本子窄窄的那种，每页中间对折左边英文右边中文，每天背100个，分5组每组20个，每一个看过留下读音和拼写的印象，基本上5～8分钟一组，全部5组大概看30分钟，最好不要超过40分钟，然后再从第一组再看，每天一百个新的，看过的按记忆周期在第2、4、7、15天重新复习，基本每天进行的300～400个单词，新旧加起来，</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Ebbinghaus.png"></p>]]></content>
      
      
      <categories>
          
          <category> 认知升级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
            <tag> 记忆曲线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux yum</title>
      <link href="/2021/03/13/LinuxYumCommand/"/>
      <url>/2021/03/13/LinuxYumCommand/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-yum-命令"><a href="#Linux-yum-命令" class="headerlink" title="Linux yum 命令"></a>Linux yum 命令</h2><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。</p><p>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p><p>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><h3 id="yum-语法"><a href="#yum-语法" class="headerlink" title="yum 语法"></a>yum 语法</h3><p>格式</p><pre class=" language-bash"><code class="language-bash">yum <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token punctuation">[</span>package <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><ul><li><strong>options：</strong>可选，选项包括-h（帮助），-y（当安装过程提示选择全部为 “yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package：</strong>安装的包名。</li></ul><hr><h3 id="yum常用命令"><a href="#yum常用命令" class="headerlink" title="yum常用命令"></a>yum常用命令</h3><ul><li>列出所有可更新的软件清单命令：<strong>yum check-update</strong></li><li>更新所有软件命令：<strong>yum update</strong></li><li>仅安装指定的软件命令：<strong>yum install <package_name></strong></li><li>仅更新指定的软件命令：<strong>yum update <package_name></strong></li><li>列出所有可安裝的软件清单命令：<strong>yum list</strong></li><li>删除软件包命令：<strong>yum remove <package_name></strong></li><li>查找软件包命令：<strong>yum search <keyword></strong></li><li>清除缓存命令:<ul><li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li><li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li><li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li><li><strong>yum clean, yum clean all (&#x3D; yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux apt</title>
      <link href="/2021/03/13/LinuxAptCommand/"/>
      <url>/2021/03/13/LinuxAptCommand/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-apt-命令"><a href="#Linux-apt-命令" class="headerlink" title="Linux apt 命令"></a>Linux apt 命令</h2><p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。</p><p>apt 命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><p>apt 命令执行需要超级管理员权限(root)。</p><h3 id="apt-语法"><a href="#apt-语法" class="headerlink" title="apt 语法"></a>apt 语法</h3><pre class=" language-bash"><code class="language-bash">  apt <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token punctuation">[</span>package <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><ul><li><strong>options：</strong>可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package</strong>：安装的包名。</li></ul><hr><h3 id="apt-常用命令"><a href="#apt-常用命令" class="headerlink" title="apt 常用命令"></a>apt 常用命令</h3><ul><li><p>列出所有可更新的软件清单命令：<strong>sudo apt update</strong></p></li><li><p>升级软件包：<strong>sudo apt upgrade</strong></p><p>列出可更新的软件包及版本信息：<strong>apt list –upgradeable</strong></p><p>升级软件包，升级前先删除需要更新软件包：<strong>sudo apt full-upgrade</strong></p></li><li><p>安装指定的软件命令：<strong>sudo apt install <package_name></strong></p><p>安装多个软件包：<strong>sudo apt install <package_1> <package_2> <package_3></strong></p></li><li><p>更新指定的软件命令：<strong>sudo apt update <package_name></strong></p></li><li><p>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：<strong>sudo apt show <package_name></strong></p></li><li><p>删除软件包命令：<strong>sudo apt remove <package_name></strong></p></li><li><p>清理不再使用的依赖和库文件: <strong>sudo apt autoremove</strong></p></li><li><p>移除软件包及配置文件: <strong>sudo apt purge <package_name></strong></p></li><li><p>查找软件包命令： <strong>sudo apt search <keyword></strong></p></li><li><p>列出所有已安装的包：<strong>apt list –installe</strong>d</p></li><li><p>列出所有已安装的包的版本信息：<strong>apt list –all-versions</strong></p></li></ul><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p><code>jdk</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token function">sudo</span> apt <span class="token function">install</span> openjdk-11-jdkjava - -version </code></pre><p><code>node</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span>node - -version<span class="token comment" spellcheck="true">##升级</span><span class="token function">sudo</span> <span class="token function">npm</span> cache clean -f<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g n<span class="token function">sudo</span> n stablenode - -version</code></pre><p><code>psql</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> postgresql postgresql-contribpsql - -version</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令启动SpringBoot项目</title>
      <link href="/2021/02/27/SpringBootRunJar/"/>
      <url>/2021/02/27/SpringBootRunJar/</url>
      
        <content type="html"><![CDATA[<h2 id="java-jar"><a href="#java-jar" class="headerlink" title="java -jar"></a>java -jar</h2><p>使用maven进行打包，springboot项目会打包成一个可以直接运行的<code>JAR</code>文件，使用命令<code>java -jar</code>可以直接运行。但是项目并不是在后台运行，当我们退出命令界面时，项目也就自动停止运行了。</p><pre class=" language-bash"><code class="language-bash">java -jar xxx.jar</code></pre><h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p>使用nohup命令可以解决上述问题，让SpringBoot项目不挂断地在Linux后台运行。<br>语法：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">nohup</span> Command <span class="token punctuation">[</span> Arg … <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token operator">&amp;</span> <span class="token punctuation">]</span></code></pre><p>示例：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#linux守护进程启动jar包的命令</span><span class="token function">nohup</span> java -jar xxx.jar <span class="token operator">&amp;</span><span class="token function">nohup</span> java -jar 你的jar包名 <span class="token operator">&amp;</span></code></pre><p>执行上述命令，nohup会把执行结果中的日志默认输出到当前文件夹下面的<code>nohup.out</code>文件中。<br>也可以手动指定日志输出到哪个文件中。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">nohup</span> java -jar xxx.jar <span class="token operator">></span> nohup.log  2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span> </code></pre><p>如果不想输出日志，也可以使用如下命令。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">nohup</span> java -jar xxx.jar <span class="token operator">></span>/dev/null <span class="token operator">&amp;</span></code></pre><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">kill</span> -9 <span class="token variable"><span class="token variable">$(</span><span class="token function">lsof</span> -i tcp:8080 -t<span class="token variable">)</span></span></code></pre><p>8080 代表你启动的springboot程序端口，替换成你想要关闭的程序的端口</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署上线 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提问的智慧</title>
      <link href="/2021/02/27/HowToAskQuestions/"/>
      <url>/2021/02/27/HowToAskQuestions/</url>
      
        <content type="html"><![CDATA[<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><blockquote><p>声明</p></blockquote><p><strong>How To Ask Questions The Smart Way</strong></p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p><p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr&#x2F;faqs&#x2F;smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p><p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin</a> 所翻译版本的最新翻译；</p><p>转载来源：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md</a></p><blockquote><p>正文</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题。</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p><h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准且语法正确的语句"><a href="#用清晰、正确、精准且语法正确的语句" class="headerlink" title="用清晰、正确、精准且语法正确的语句"></a>用清晰、正确、精准且语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email&#x2F;PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信&#x2F;私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong>蠢问题</strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <a href="http://lmgtfy.com/">Google 是你的朋友</a>！）</p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li><strong>你需要的信息非常容易获得</strong>；</li><li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p><p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p><p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p><p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p><p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序&#x2F;设定&#x2F;SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com/">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序&#x2F;设定&#x2F;SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong>聪明问题</strong>：</p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
      
      
      <categories>
          
          <category> 认知升级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
            <tag> 认知升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS8MySQL</title>
      <link href="/2021/02/25/CentOS8MySQL/"/>
      <url>/2021/02/25/CentOS8MySQL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>服务器安装mysql8.0</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装MySQL及其所有依赖</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> @mysql</code></pre><p>启动MySQL服务，并设置自启</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> --now mysqld</code></pre><p>检查MySQL服务器是否正在运行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status mysqld</code></pre><p>运行mysql_secure_installation脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>配置VALIDATE PASSWORD component（验证密码组件）： 输入y ，回车进入该配置</li></ul><pre class=" language-bash"><code class="language-bash">VALIDATE PASSWORD COMPONENT can be used to <span class="token function">test</span> passwordsand improve security. It checks the strength of passwordand allows the <span class="token function">users</span> to <span class="token keyword">set</span> only those passwords <span class="token function">which</span> aresecure enough. Would you like to setup VALIDATE PASSWORD component?Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No: y</code></pre><ul><li>选择密码验证策略等级， 这里选择0 （low），回车</li></ul><pre class=" language-bash"><code class="language-bash">There are three levels of password validation policy:LOW    Length <span class="token operator">>=</span> 8MEDIUM Length <span class="token operator">>=</span> 8, numeric, mixed case, and special charactersSTRONG Length <span class="token operator">>=</span> 8, numeric, mixed case, special characters and dictionary                  <span class="token function">file</span>Please enter 0 <span class="token operator">=</span> LOW, 1 <span class="token operator">=</span> MEDIUM and 2 <span class="token operator">=</span> STRONG: 0</code></pre><ul><li><p>输入新密码两次(mysql -u root -p 回车时输的密码)</p></li><li><p>确认是否继续使用提供的密码？输入y ，回车</p></li><li><p>移除匿名用户？ 输入y，回车</p></li></ul><pre class=" language-bash"><code class="language-bash">Estimated strength of the password: 50 Do you wish to <span class="token keyword">continue</span> with the password provided?<span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> yBy default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created <span class="token keyword">for</span> them. This is intended only <span class="token keyword">for</span>testing, and to <span class="token function">make</span> the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> ySuccess.</code></pre><ul><li>不允许root远程登陆？ 需要远程登陆，所以输入n ，回车</li></ul><pre class=" language-bash"><code class="language-bash">Normally, root should only be allowed to connect from<span class="token string">'localhost'</span><span class="token keyword">.</span> This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> n</code></pre><ul><li>移除test数据库？ 输入y ，回车</li><li>重新载入权限表？ 输入y ，回车</li></ul><pre class=" language-bash"><code class="language-bash">Remove <span class="token function">test</span> database and access to it? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> y - Dropping <span class="token function">test</span> database<span class="token punctuation">..</span>.Success. - Removing privileges on <span class="token function">test</span> database<span class="token punctuation">..</span>.Success.</code></pre><ul><li>配置结束</li></ul><pre class=" language-bash"><code class="language-bash">Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> ySuccess.All done<span class="token operator">!</span> </code></pre><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><pre class=" language-bash"><code class="language-bash">mysql -u root -p</code></pre><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><pre class=" language-mysql"><code class="language-mysql">exit;</code></pre><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>移除mariadb程序文件</p><pre class=" language-bash"><code class="language-bash">yum remove -y  mariadb*</code></pre><p>查询mysql相关文件并删</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span>  /  -name  <span class="token string">"mysql*"</span> <span class="token operator">|</span><span class="token function">xargs</span>  <span class="token function">rm</span>  -rf <span class="token function">find</span>  /  -name  <span class="token string">"mariadb*"</span> <span class="token operator">|</span><span class="token function">xargs</span>  <span class="token function">rm</span>  -rf </code></pre><h2 id="附：终端信息"><a href="#附：终端信息" class="headerlink" title="附：终端信息"></a>附：终端信息</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZbp1gp1t778o6paja9tabZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo dnf install @mysql</span>上次元数据过期检查：0:58:50 前，执行于 2021年02月25日 星期四 21时38分48秒。依赖关系解决。<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 软件包                              架构            版本                                             仓库                大小<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>安装组/模块包: mysql-server                        x86_64          8.0.21-1.module_el8.2.0+493+63b41e36             appstream           22 M安装依赖关系: mariadb-connector-c-config          noarch          3.1.11-2.el8_3                                   appstream           15 k mecab                               x86_64          0.996-1.module_el8.2.0+493+63b41e36.9            appstream          393 k mysql                               x86_64          8.0.21-1.module_el8.2.0+493+63b41e36             appstream           12 M mysql-common                        x86_64          8.0.21-1.module_el8.2.0+493+63b41e36             appstream          148 k mysql-errmsg                        x86_64          8.0.21-1.module_el8.2.0+493+63b41e36             appstream          581 k protobuf-lite                       x86_64          3.5.0-13.el8                                     appstream          149 k安装模块配置档案: mysql/server                                                                                                                 启用模块流: mysql                                               8.0                                                                      事务概要<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>安装  7 软件包总下载：35 M安装大小：182 M确定吗？<span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>： y下载软件包：<span class="token punctuation">(</span>1/7<span class="token punctuation">)</span>: mariadb-connector-c-config-3.1.11-2.el8_3.noarch.rpm                                    116 kB/s <span class="token operator">|</span>  15 kB     00:00    <span class="token punctuation">(</span>2/7<span class="token punctuation">)</span>: mecab-0.996-1.module_el8.2.0+493+63b41e36.9.x86_64.rpm                                  1.7 MB/s <span class="token operator">|</span> 393 kB     00:00    <span class="token punctuation">(</span>3/7<span class="token punctuation">)</span>: mysql-common-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64.rpm                            1.4 MB/s <span class="token operator">|</span> 148 kB     00:00    <span class="token punctuation">(</span>4/7<span class="token punctuation">)</span>: mysql-errmsg-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64.rpm                            1.2 MB/s <span class="token operator">|</span> 581 kB     00:00    <span class="token punctuation">(</span>5/7<span class="token punctuation">)</span>: protobuf-lite-3.5.0-13.el8.x86_64.rpm                                                   4.0 MB/s <span class="token operator">|</span> 149 kB     00:00    <span class="token punctuation">(</span>6/7<span class="token punctuation">)</span>: mysql-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64.rpm                                   5.8 MB/s <span class="token operator">|</span>  12 MB     00:02    <span class="token punctuation">(</span>7/7<span class="token punctuation">)</span>: mysql-server-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64.rpm                             11 MB/s <span class="token operator">|</span>  22 MB     00:02    -------------------------------------------------------------------------------------------------------------------------------总计                                                                                            12 MB/s <span class="token operator">|</span>  35 MB     00:03     运行事务检查事务检查成功。运行事务测试事务测试成功。运行事务  准备中  <span class="token keyword">:</span>                                                                                                                1/1   安装    <span class="token keyword">:</span> mariadb-connector-c-config-3.1.11-2.el8_3.noarch                                                               1/7   安装    <span class="token keyword">:</span> mysql-common-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       2/7   安装    <span class="token keyword">:</span> mysql-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                              3/7   安装    <span class="token keyword">:</span> mysql-errmsg-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       4/7   安装    <span class="token keyword">:</span> protobuf-lite-3.5.0-13.el8.x86_64                                                                              5/7   安装    <span class="token keyword">:</span> mecab-0.996-1.module_el8.2.0+493+63b41e36.9.x86_64                                                             6/7   运行脚本: mecab-0.996-1.module_el8.2.0+493+63b41e36.9.x86_64                                                             6/7   运行脚本: mysql-server-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       7/7   安装    <span class="token keyword">:</span> mysql-server-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       7/7   运行脚本: mysql-server-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       7/7 ValueError: /var/log/mysql<span class="token punctuation">(</span>/.*<span class="token punctuation">)</span>? 的文件上下文已定义  验证    <span class="token keyword">:</span> mariadb-connector-c-config-3.1.11-2.el8_3.noarch                                                               1/7   验证    <span class="token keyword">:</span> mecab-0.996-1.module_el8.2.0+493+63b41e36.9.x86_64                                                             2/7   验证    <span class="token keyword">:</span> mysql-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                              3/7   验证    <span class="token keyword">:</span> mysql-common-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       4/7   验证    <span class="token keyword">:</span> mysql-errmsg-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       5/7   验证    <span class="token keyword">:</span> mysql-server-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64                                                       6/7   验证    <span class="token keyword">:</span> protobuf-lite-3.5.0-13.el8.x86_64                                                                              7/7 已安装:  mariadb-connector-c-config-3.1.11-2.el8_3.noarch               mecab-0.996-1.module_el8.2.0+493+63b41e36.9.x86_64              mysql-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64              mysql-common-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64        mysql-errmsg-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64       mysql-server-8.0.21-1.module_el8.2.0+493+63b41e36.x86_64        protobuf-lite-3.5.0-13.el8.x86_64                             完毕！<span class="token punctuation">[</span>root@iZbp1gp1t778o6paja9tabZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl status mysql</span>● mysql.service   Loaded: not-found <span class="token punctuation">(</span>Reason: Unit mysql.service not found.<span class="token punctuation">)</span>   Active: failed <span class="token punctuation">(</span>Result: exit-code<span class="token punctuation">)</span> since Thu 2021-02-25 22:32:38 CST<span class="token punctuation">;</span> 5min ago2月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting MySQL Community Server<span class="token punctuation">..</span>.2月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: mysql.service: Control process exited, code<span class="token operator">=</span>exited status<span class="token operator">=</span>2032月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: mysql.service: Failed with result <span class="token string">'exit-code'</span><span class="token keyword">.</span>2月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Failed to start MySQL Community Server.<span class="token punctuation">[</span>root@iZbp1gp1t778o6paja9tabZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl enable --now mysqld</span>Created symlink /etc/systemd/system/multi-user.target.wants/mysqld.service → /usr/lib/systemd/system/mysqld.service.<span class="token punctuation">[</span>root@iZbp1gp1t778o6paja9tabZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo systemctl status mysql</span>● mysql.service   Loaded: not-found <span class="token punctuation">(</span>Reason: Unit mysql.service not found.<span class="token punctuation">)</span>   Active: failed <span class="token punctuation">(</span>Result: exit-code<span class="token punctuation">)</span> since Thu 2021-02-25 22:32:38 CST<span class="token punctuation">;</span> 6min ago2月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting MySQL Community Server<span class="token punctuation">..</span>.2月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: mysql.service: Control process exited, code<span class="token operator">=</span>exited status<span class="token operator">=</span>2032月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: mysql.service: Failed with result <span class="token string">'exit-code'</span><span class="token keyword">.</span>2月 25 22:32:38 iZbp1gp1t778o6paja9tabZ systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Failed to start MySQL Community Server.<span class="token punctuation">[</span>root@iZbp1gp1t778o6paja9tabZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -v</span>Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MySQL connection <span class="token function">id</span> is 8Server version: 8.0.21 Source distributionCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2020, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Reading history-file /root/.mysql_historyType <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> <span class="token keyword">exit</span><span class="token punctuation">;</span>Writing history-file /root/.mysql_historyBye<span class="token punctuation">[</span>root@iZbp1gp1t778o6paja9tabZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sudo mysql_secure_installation</span>Securing the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD COMPONENT can be used to <span class="token function">test</span> passwordsand improve security. It checks the strength of passwordand allows the <span class="token function">users</span> to <span class="token keyword">set</span> only those passwords <span class="token function">which</span> aresecure enough. Would you like to setup VALIDATE PASSWORD component?Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No: yThere are three levels of password validation policy:LOW    Length <span class="token operator">>=</span> 8MEDIUM Length <span class="token operator">>=</span> 8, numeric, mixed case, and special charactersSTRONG Length <span class="token operator">>=</span> 8, numeric, mixed case, special characters and dictionary                  <span class="token function">file</span>Please enter 0 <span class="token operator">=</span> LOW, 1 <span class="token operator">=</span> MEDIUM and 2 <span class="token operator">=</span> STRONG: 0Please <span class="token keyword">set</span> the password <span class="token keyword">for</span> root here.New password: Re-enter new password: Estimated strength of the password: 50 Do you wish to <span class="token keyword">continue</span> with the password provided?<span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> yBy default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created <span class="token keyword">for</span> them. This is intended only <span class="token keyword">for</span>testing, and to <span class="token function">make</span> the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> ySuccess.Normally, root should only be allowed to connect from<span class="token string">'localhost'</span><span class="token keyword">.</span> This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> n <span class="token punctuation">..</span>. skipping.By default, MySQL comes with a database named <span class="token string">'test'</span> thatanyone can access. This is also intended only <span class="token keyword">for</span> testing,and should be removed before moving into a productionenvironment.Remove <span class="token function">test</span> database and access to it? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> y - Dropping <span class="token function">test</span> database<span class="token punctuation">..</span>.Success. - Removing privileges on <span class="token function">test</span> database<span class="token punctuation">..</span>.Success.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? <span class="token punctuation">(</span>Press y<span class="token operator">|</span>Y <span class="token keyword">for</span> Yes, any other key <span class="token keyword">for</span> No<span class="token punctuation">)</span> <span class="token keyword">:</span> ySuccess.All done<span class="token operator">!</span> <span class="token punctuation">[</span>root@iZbp1gp1t778o6paja9tabZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mysql -u root -p</span>Enter password: Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or \g.Your MySQL connection <span class="token function">id</span> is 11Server version: 8.0.21 Source distributionCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000, 2020, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat连接阿里云ECS</title>
      <link href="/2021/02/25/NavicatConnectAliyunECS/"/>
      <url>/2021/02/25/NavicatConnectAliyunECS/</url>
      
        <content type="html"><![CDATA[<h2 id="进入ECS"><a href="#进入ECS" class="headerlink" title="进入ECS"></a>进入ECS</h2><p>使用终端</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> 用户名@ip<span class="token comment" spellcheck="true">#ssh root@xxx.xx.xxx.xx</span></code></pre><h2 id="进入mysql"><a href="#进入mysql" class="headerlink" title="进入mysql"></a>进入mysql</h2><pre class=" language-bash"><code class="language-bash">mysql -u root -p <span class="token comment" spellcheck="true">#回车 输入密码</span></code></pre><h4 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h4><blockquote><p>8.0之前</p></blockquote><pre class=" language-mysql"><code class="language-mysql">grant all privileges on . to '用户名'@'%' identified by '密码' with grant option;#grant all privileges on . to 'root'@'%' identified by '123456t' with grant option;#或者grant all privileges on . to 'root'@’主机ip‘ with grant option;</code></pre><p>若是报错，使用下步方式</p><pre class=" language-mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;</code></pre><blockquote><p>8.0之后</p></blockquote><p>从MySQL 8开始,不再可以(隐式)使用GRANT命令创建用户.改用<a href="https://dev.mysql.com/doc/refman/8.0/en/create-user.html">CREATE USER</a>,然后使用<a href="https://dev.mysql.com/doc/refman/8.0/en/grant.html">GRANT</a>声明：</p><pre class=" language-mysql"><code class="language-mysql">mysql> CREATE USER 'root'@'%' IDENTIFIED BY 'root';mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;</code></pre><p>两行均显示ok则代表成功。</p><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p>使用navicat工具新建连接，分别设置(注意区分常规和SSH)并测试连通。</p><p><img src="/C6B86E91EC42CA1B1BE745707089484E.png" alt="常规"></p><p><img src="/33AF1E8261949AD6CDCB6EE8BFB358B7.png" alt="SSH"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacSSH连接</title>
      <link href="/2021/02/25/MacSSH/"/>
      <url>/2021/02/25/MacSSH/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当使用终端连接服务器时出现以下错误： WARNING REMOTE HOST IDENTIFICATION HAS CHANGED错误新信息</p><pre class=" language-bash"><code class="language-bash">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span>Someone could be eavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span>It is also possible that a host key has just been changed.The fingerprint <span class="token keyword">for</span> the ECDSA key sent by the remote host isSHA256:YkDcPSwY9QtAGcsFxPUqSxdtzpsalyJcD4oKrgNW/MY.Please contact your system administrator.Add correct host key <span class="token keyword">in</span> /Users/zhouhailin/.ssh/known_hosts to get rid of this message.Offending ECDSA key <span class="token keyword">in</span> /Users/zhouhailin/.ssh/known_hosts:10ECDSA host key <span class="token keyword">for</span> 118.31.164.51 has changed and you have requested strict checking.Host key verification failed.</code></pre><p>原因：远程服务器变更导致主机的验证失效。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>法一：删除<code>.ssh</code>文件夹下的<code>known_hosts</code>文件并重新生成。(也可手动打开文件夹删除)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf  /root/.ssh/known_hosts</code></pre><p>法二：把有问题的主机KEY刪掉</p><pre class=" language-bash"><code class="language-bash">vim /root/.ssh/known_hosts</code></pre><h2 id="截图参考"><a href="#截图参考" class="headerlink" title="截图参考"></a>截图参考</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/2021-02-2533617.png" alt="进入失败"></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/2021-02-2533837.png" alt="进入成功"></p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>若是删除了<code>known_hosts</code>文件，则在后面git的push中会出现如下</p><pre class=" language-bash"><code class="language-bash">The authenticity of host <span class="token string">'github.com (xx.xxx.xxx.xx)'</span> can't be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to <span class="token keyword">continue</span> connecting <span class="token punctuation">(</span>yes/no/<span class="token punctuation">[</span>fingerprint<span class="token punctuation">]</span><span class="token punctuation">)</span>?  </code></pre><p>少了一个<code>known_hosts</code>文件，本来密钥文件应该是三个，现在是两个，便报了这样的错误，此时直接yes回车即可，同时生成了缺少了的<code>known_hosts</code>文件。gitee，coding同理。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacIDEA快捷键</title>
      <link href="/2021/02/19/MacIdeaQuickKey/"/>
      <url>/2021/02/19/MacIdeaQuickKey/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac电脑IDEA常用快捷键"><a href="#Mac电脑IDEA常用快捷键" class="headerlink" title="Mac电脑IDEA常用快捷键"></a>Mac电脑IDEA常用快捷键</h2><p>command+A 全选</p><p>command+C 复制</p><p>command+X  剪切</p><p>command+V 粘贴</p><p>command+Z 撤销 </p><p>command+shift+Z 重做</p><p> command+option+L 代码格式化 </p><p>command+N   generate功能，生成setter&#x2F;getter&#x2F;toString，实现借口等等 </p><p>command+option+M  将选中代码提取成单独方法 </p><p>command+option+left&#x2F;right   光标上一个&#x2F;下一个位置 </p><p>command+shift+backspace  最近一次编辑的位置 </p><p>command+shift  生成单测 </p><p>command+F  搜索 </p><p>command+shift+F 全局搜索 </p><p>command+R  替换 </p><p>command+shift+R 全局替换 </p><p>command+O 查找类 </p><p>command+shift+O 查找文件 </p><p>command+K git提交到缓存 </p><p>command+shift+K git代码push到远程 </p><p>shift连续两次  搜索任何东西</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端查看/杀死进程</title>
      <link href="/2021/02/19/MacCheckAndProcess/"/>
      <url>/2021/02/19/MacCheckAndProcess/</url>
      
        <content type="html"><![CDATA[<h2 id="查看PID"><a href="#查看PID" class="headerlink" title="查看PID"></a>查看PID</h2><p>在不知程序端口号的情况下</p><pre class=" language-bash"><code class="language-bash">【ps -axu 本机名<span class="token operator">|</span><span class="token function">grep</span> 程序名】【ps -axu ShuChan<span class="token operator">|</span><span class="token function">grep</span> mysql】</code></pre><p>在知道程序端口的情况下</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将PortNum替换为要查询的端口号（注意端口号前面不要空格）</span><span class="token function">sudo</span> <span class="token function">lsof</span> -i:PortNum<span class="token comment" spellcheck="true"># 举个例子</span><span class="token function">sudo</span> <span class="token function">lsof</span> -i:3306<span class="token comment" spellcheck="true"># 当然也可以不用管理员权限</span></code></pre><h2 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h2><p>前提是需要知道进程的PID号</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将PID替换为相应的进程号</span><span class="token function">sudo</span> <span class="token function">kill</span> PID号<span class="token comment" spellcheck="true"># 举个例子</span><span class="token function">sudo</span> <span class="token function">kill</span> 8080</code></pre><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/2021-02-1942642.png" alt="杀死8080端口进程"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot核心</title>
      <link href="/2021/02/19/SpringBootNotice/"/>
      <url>/2021/02/19/SpringBootNotice/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spring-Boot"><a href="#一、Spring-Boot" class="headerlink" title="一、Spring Boot"></a>一、Spring Boot</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p><p>微服务：架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa">详细参照微服务文档</a></p><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p>环境约束</p><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p><p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p><p>统一环境；</p><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180129151045.png" alt="idea设置"></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180129151112.png"></p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他的父项目是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../../spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他来真正管理Spring Boot应用里面的所有依赖版本；</code></pre><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>spring-boot-starter</strong>-&#x3D;&#x3D;web&#x3D;&#x3D;：</p><p>spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Spring应用启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>@<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableAutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>​      @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​@<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>&#x3D;&#x3D;将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；&#x3D;&#x3D;</p><p>​@<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​给容器中导入组件？</p><p>​<strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180129224104.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p>​SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p><p>&#x3D;&#x3D;Spring Boot在启动的时候从类路径下的META-INF&#x2F;spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；&#x3D;&#x3D;以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><p>​YAML  A Markup Language：是一个标记语言</p><p>​YAML   isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p>​以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>​YAML：配置例子</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre><p>​XML：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8081<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello</code></pre><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​k: v：字面直接来写；</p><p>​字符串默认不用加上单引号或者双引号；</p><p>​“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​对象还是k: v的方式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span>        <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;lastName: zhangsan,age: 18&amp;#125;</span></code></pre><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> cat <span class="token punctuation">-</span> dog <span class="token punctuation">-</span> pig</code></pre><p>行内写法</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> hello    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2017/12/12    <span class="token key atrule">maps</span><span class="token punctuation">:</span> &amp;<span class="token comment" spellcheck="true">#123;k1: v1,k2: 12&amp;#125;</span>    <span class="token key atrule">lists</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> lisi      <span class="token punctuation">-</span> zhaoliu    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">12</span></code></pre><p>javaBean：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； * */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180130161620.png" alt="idea配置乱码"></p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * &lt;bean class="Person">     *      &lt;property name="lastName" value="字面量/$&amp;#123;key&amp;#125;从环境变量、配置文件中获取值/#&amp;#123;SpEL&amp;#125;">&lt;/property>     * &lt;bean/>     */</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>    <span class="token annotation punctuation">@Email</span>    <span class="token comment" spellcheck="true">//@Value("$&amp;#123;person.last-name&amp;#125;")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#&amp;#123;11*2&amp;#125;")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span></code></pre><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； *  @ConfigurationProperties(prefix = "person")默认从全局配置文件中获取值； * */</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"classpath:person.properties"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * &lt;bean class="Person">     *      &lt;property name="lastName" value="字面量/$&amp;#123;key&amp;#125;从环境变量、配置文件中获取值/#&amp;#123;SpEL&amp;#125;">&lt;/property>     * &lt;bean/>     */</span>   <span class="token comment" spellcheck="true">//lastName必须是邮箱格式</span>   <span class="token comment" spellcheck="true">// @Email</span>    <span class="token comment" spellcheck="true">//@Value("$&amp;#123;person.last-name&amp;#125;")</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("#&amp;#123;11*2&amp;#125;")</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//@Value("true")</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span></code></pre><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"classpath:beans.xml"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>导入Spring的配置文件让其生效</code></pre><p>不来编写Spring的配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.springboot.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类**@Configuration**——&gt;Spring配置文件</p><p>2、使用**@Bean**给容器中添加组件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件 * * 在配置文件中用&lt;bean>&lt;bean/>标签添加组件 * */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置类@Bean给容器中添加组件了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><pre class=" language-java"><code class="language-java">$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>、$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>、$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>、$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>random<span class="token punctuation">.</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">张三$&amp;#123;random.uuid&amp;#125;</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">$&amp;#123;random.int&amp;#125;</span><span class="token attr-name">person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2017/12/15</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">person.maps.k1</span><span class="token punctuation">=</span><span class="token attr-value">v1</span><span class="token attr-name">person.maps.k2</span><span class="token punctuation">=</span><span class="token attr-value">14</span><span class="token attr-name">person.lists</span><span class="token punctuation">=</span><span class="token attr-value">a,b,c</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">$&amp;#123;person.hello:hello&amp;#125;_dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">15</span></code></pre><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties&#x2F;yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><pre class=" language-yml"><code class="language-yml">server:  port: 8081spring:  profiles:    active: prod---server:  port: 8083spring:  profiles: dev---server:  port: 8084spring:  profiles: prod  #指定属于哪个环境</code></pre><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​1、在配置文件中指定  spring.profiles.active&#x3D;dev</p><p>​2、命令行：</p><p>​java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active&#x3D;dev；</p><p>​可以直接在测试的时候，配置传入命令行参数</p><p>​3、虚拟机参数；</p><p>​-Dspring.profiles.active&#x3D;dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:.&#x2F;config&#x2F;</p><p>–file:.&#x2F;</p><p>–classpath:&#x2F;config&#x2F;</p><p>–classpath:&#x2F;</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>&#x3D;&#x3D;我们还可以通过spring.config.location来改变默认的配置文件位置&#x3D;&#x3D;</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location&#x3D;G:&#x2F;application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>&#x3D;&#x3D;SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置&#x3D;&#x3D;</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port&#x3D;8087  –server.context-path&#x3D;&#x2F;abc</p><p>多个配置用空格分开； –配置项&#x3D;值</p><p>2.来自java:comp&#x2F;env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>&#x3D;&#x3D;<strong>由jar包外向jar包内进行寻找；</strong>&#x3D;&#x3D;</p><p>&#x3D;&#x3D;<strong>优先加载带profile</strong>&#x3D;&#x3D;</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>&#x3D;&#x3D;<strong>再来加载不带profile</strong>&#x3D;&#x3D;</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 &#x3D;&#x3D;@EnableAutoConfiguration&#x3D;&#x3D;</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p></li><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<String> configurations &#x3D; getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</p><ul><li><pre class=" language-java"><code class="language-java">SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>扫描所有jar包类路径下  META<span class="token operator">-</span>INF<span class="token operator">/</span>spring<span class="token punctuation">.</span>factories把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span>类（类名）对应的值，然后把他们添加在容器中</code></pre></li></ul></li></ul><p><strong>&#x3D;&#x3D;将 类路径下  META-INF&#x2F;spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；&#x3D;&#x3D;</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Auto Configure</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></code></pre><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>   <span class="token comment" spellcheck="true">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HttpEncodingProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token comment" spellcheck="true">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span><span class="token comment" spellcheck="true">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingAutoConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//他已经和SpringBoot的配置文件映射了</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> HttpEncodingProperties properties<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>      <span class="token keyword">public</span> <span class="token function">HttpEncodingAutoConfiguration</span><span class="token punctuation">(</span>HttpEncodingProperties properties<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Bean</span>   <span class="token comment" spellcheck="true">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CharacterEncodingFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断容器没有这个组件？</span>    <span class="token keyword">public</span> CharacterEncodingFilter <span class="token function">characterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CharacterEncodingFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderedCharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filter<span class="token punctuation">.</span><span class="token function">setForceResponseEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">shouldForce</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>RESPONSE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filter<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.http.encoding"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//从配置文件中获取指定的值和bean的属性进行绑定</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpEncodingProperties</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>精髓：</strong></p><p>​<strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p><p>​<strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​<strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​<strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p>**&#x3D;&#x3D;我们可以通过启用  debug&#x3D;true属性；来让控制台打印自动配置报告&#x3D;&#x3D;**，这样我们就可以很方便的知道哪些自动配置类生效；</p><pre class=" language-java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>AUTO<span class="token operator">-</span>CONFIGURATION REPORT<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>Positive matches<span class="token operator">:</span>（自动配置类启用的）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   DispatcherServletAutoConfiguration matched<span class="token operator">:</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> found required <span class="token keyword">class</span> <span class="token string">'org.springframework.web.servlet.DispatcherServlet'</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@ConditionalOnMissingClass</span> did not find unwanted <span class="token keyword">class</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>      <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> found <span class="token function">StandardServletEnvironment</span> <span class="token punctuation">(</span>OnWebApplicationCondition<span class="token punctuation">)</span>            Negative matches<span class="token operator">:</span>（没有启动，没有匹配成功的自动配置类）<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   ActiveMQAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'javax.jms.ConnectionFactory'</span><span class="token punctuation">,</span> <span class="token string">'org.apache.activemq.ActiveMQConnectionFactory'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>   AopAutoConfiguration<span class="token operator">:</span>      Did not match<span class="token operator">:</span>         <span class="token operator">-</span> <span class="token annotation punctuation">@ConditionalOnClass</span> did not find required classes <span class="token string">'org.aspectj.lang.annotation.Aspect'</span><span class="token punctuation">,</span> <span class="token string">'org.aspectj.lang.reflect.Advice'</span> <span class="token punctuation">(</span>OnClassCondition<span class="token punctuation">)</span>        </code></pre><h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p><p>​1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p><p>​2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p><p>​3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p><p>​4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p><p>​5、JDBC—数据库驱动；</p><p>​写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p>​给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p>​<strong>&#x3D;&#x3D;SpringBoot选用 SLF4j和logback；&#x3D;&#x3D;</strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org/">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>图示；</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/concrete-bindings.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/legacy.png"></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>&#x3D;&#x3D;1、将系统中其他日志框架先排除出去；&#x3D;&#x3D;</p><p>&#x3D;&#x3D;2、用中间包来替换原有的日志框架；&#x3D;&#x3D;</p><p>&#x3D;&#x3D;3、我们导入slf4j其他的实现&#x3D;&#x3D;</p><h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot使用它来做日志功能；</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>底层依赖关系</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180131220946.png"></p><p>总结：</p><p>​1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​3）、中间替换包？</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LogFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J <span class="token operator">=</span> <span class="token string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> LogFactory logFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SLF4JLogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180131221411.png"></p><p>​4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​Spring框架用的是commons-logging；</p><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>&#x3D;&#x3D;SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；&#x3D;&#x3D;</strong></p><h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//记录器</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println();</span>        <span class="token comment" spellcheck="true">//日志的级别；</span>        <span class="token comment" spellcheck="true">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span>        <span class="token comment" spellcheck="true">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"这是trace日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"这是debug日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是info日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"这是warn日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"这是error日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.com.atguigu</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token comment" spellcheck="true">#logging.path=</span><span class="token comment" spellcheck="true"># 不指定路径在当前项目下生成springboot.log日志</span><span class="token comment" spellcheck="true"># 可以指定完整的路径；</span><span class="token comment" spellcheck="true">#logging.file=G:/springboot.log</span><span class="token comment" spellcheck="true"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><span class="token attr-name">logging.path</span><span class="token punctuation">=</span><span class="token attr-value">/spring/log</span><span class="token comment" spellcheck="true">#  在控制台输出的日志的格式</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">%d&amp;#123;yyyy-MM-dd&amp;#125; [%thread] %-5level %logger&amp;#123;50&amp;#125; - %msg%n</span><span class="token comment" spellcheck="true"># 指定文件中日志输出的格式</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value">%d&amp;#123;yyyy-MM-dd&amp;#125; === [%thread] === %-5level === %logger&amp;#123;50&amp;#125; ==== %msg%n</span></code></pre><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>&#x2F;var&#x2F;log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>staging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- configuration to be enabled when the "staging" profile is active --></span>      可以指定某段配置只在某个环境下生效<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span></code></pre><p>如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stdout<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        日志输出格式：            %d表示日期时间，            %thread表示线程名，            %-5level：级别从左显示5个字符宽度            %logger&amp;#123;50&amp;#125; 表示logger名字最长50个字符，否则按照句点分割。             %msg：日志消息，            %n是换行符        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d<span class="token entity" title="&#123;">&amp;#123;</span>yyyy-MM-dd HH:mm:ss.SSS<span class="token entity" title="&#125;">&amp;#125;</span> ----> [%thread] ---> %-5level %logger<span class="token entity" title="&#123;">&amp;#123;</span>50<span class="token entity" title="&#125;">&amp;#125;</span> - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d<span class="token entity" title="&#123;">&amp;#123;</span>yyyy-MM-dd HH:mm:ss.SSS<span class="token entity" title="&#125;">&amp;#125;</span> ==== [%thread] ==== %-5level %logger<span class="token entity" title="&#123;">&amp;#123;</span>50<span class="token entity" title="&#125;">&amp;#125;</span> - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>切换为log4j2</p><pre class=" language-xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><hr><h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><pre><code>xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容；</code></pre><h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.resources"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token keyword">implements</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可以设置和静态资源有关的参数，缓存时间等</span></code></pre><pre class=" language-java"><code class="language-java">    WebMvcAuotConfiguration：        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            Integer cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCachePeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">/</span><span class="token operator">/</span>静态资源文件夹映射            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>                                        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span>配置欢迎页映射        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> WelcomePageHandlerMapping <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span>                ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">/</span><span class="token operator">/</span>配置喜欢的图标        <span class="token annotation punctuation">@Configuration</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.mvc.favicon.enabled"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FaviconConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceProperties resourceProperties<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">FaviconConfiguration</span><span class="token punctuation">(</span>ResourceProperties resourceProperties<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> SimpleUrlHandlerMapping <span class="token function">faviconHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                SimpleUrlHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleUrlHandlerMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token operator">/</span><span class="token operator">/</span>所有  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span>favicon<span class="token punctuation">.</span>ico                 mapping<span class="token punctuation">.</span><span class="token function">setUrlMap</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"**/favicon.ico"</span><span class="token punctuation">,</span>                        <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Bean</span>            <span class="token keyword">public</span> ResourceHttpRequestHandler <span class="token function">faviconRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ResourceHttpRequestHandler requestHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceHttpRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                requestHandler                        <span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getFaviconLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> requestHandler<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>&#x3D;&#x3D;1）、所有 &#x2F;webjars&#x2F;** ，都去 classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F; 找资源；&#x3D;&#x3D;</p><p>​webjars：以jar包的方式引入静态资源；</p><p><a href="http://www.webjars.org/">http://www.webjars.org/</a></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180203181751.png"></p><p>localhost:8080&#x2F;webjars&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.js</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jquery-webjar--></span>在访问的时候只需要写webjars下面资源的名称即可        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>&#x3D;&#x3D;2）、”&#x2F;**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射&#x3D;&#x3D;</p><pre><code>&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径</code></pre><p>localhost:8080&#x2F;abc &#x3D;&#x3D;&#x3D;  去静态资源文件夹里面找abc</p><p>&#x3D;&#x3D;3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”&#x2F;**”映射；&#x3D;&#x3D;</p><p>​localhost:8080&#x2F;   找index页面</p><p>&#x3D;&#x3D;4）、所有的 **&#x2F;favicon.ico  都是在静态资源文件下找；&#x3D;&#x3D;</p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/template-engine.png"></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              2.1.6        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>切换thymeleaf版本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf.version</span><span class="token punctuation">></span></span>3.0.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --></span>        <span class="token comment" spellcheck="true">&lt;!-- thymeleaf2   layout1--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thymeleaf-layout-dialect.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.thymeleaf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafProperties</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_ENCODING <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MimeType DEFAULT_CONTENT_TYPE <span class="token operator">=</span> MimeType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//</span></code></pre><p>只要我们把HTML页面放在classpath:&#x2F;templates&#x2F;，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>2、使用thymeleaf语法；</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>成功！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--th:text 将div里面的文本内容设置为 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;hello&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是显示欢迎信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​th：任意html属性；来替换原生属性的值</p><p><img src="/SpringBootNotice/2018-02-04_123955.png"></p><p>2）、表达式？</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">Simple</span> <span class="token attr-value">expressions:（表达式语法）</span><span class="token attr-name">    Variable</span> <span class="token attr-value">Expressions: $&amp;#123;...&amp;#125;：获取变量值；OGNL；</span>            1）、获取对象的属性、调用方法            2）、使用内置的基本对象：<span class="token comment" spellcheck="true">                #ctx : the context object.</span><span class="token comment" spellcheck="true">                #vars: the context variables.</span><span class="token comment" spellcheck="true">                #locale : the context locale.</span><span class="token comment" spellcheck="true">                #request : (only in Web Contexts) the HttpServletRequest object.</span><span class="token comment" spellcheck="true">                #response : (only in Web Contexts) the HttpServletResponse object.</span><span class="token comment" spellcheck="true">                #session : (only in Web Contexts) the HttpSession object.</span><span class="token comment" spellcheck="true">                #servletContext : (only in Web Contexts) the ServletContext object.</span>                                $&amp;#123;session.foo&amp;#125;            3）、内置的一些工具对象：<span class="token comment" spellcheck="true">#execInfo : information about the template being processed.</span><span class="token comment" spellcheck="true">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&amp;#123;…&amp;#125; syntax.</span><span class="token comment" spellcheck="true">#uris : methods for escaping parts of URLs/URIs</span><span class="token comment" spellcheck="true">#conversions : methods for executing the configured conversion service (if any).</span><span class="token comment" spellcheck="true">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><span class="token comment" spellcheck="true">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><span class="token comment" spellcheck="true">#numbers : methods for formatting numeric objects.</span><span class="token comment" spellcheck="true">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><span class="token comment" spellcheck="true">#objects : methods for objects in general.</span><span class="token comment" spellcheck="true">#bools : methods for boolean evaluation.</span><span class="token comment" spellcheck="true">#arrays : methods for arrays.</span><span class="token comment" spellcheck="true">#lists : methods for lists.</span><span class="token comment" spellcheck="true">#sets : methods for sets.</span><span class="token comment" spellcheck="true">#maps : methods for maps.</span><span class="token comment" spellcheck="true">#aggregates : methods for creating aggregates on arrays or collections.</span><span class="token comment" spellcheck="true">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span><span class="token attr-name">    Selection</span> <span class="token attr-value">Variable Expressions: *&amp;#123;...&amp;#125;：选择表达式：和$&amp;#123;&amp;#125;在功能上是一样；</span><span class="token attr-name">        补充：配合</span> <span class="token attr-value">th:object="$&amp;#123;session.user&amp;#125;：</span><span class="token attr-name">   &lt;div</span> <span class="token attr-value">th:object="$&amp;#123;session.user&amp;#125;"></span><span class="token attr-name">    &lt;p>Name</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*&amp;#123;firstName&amp;#125;">Sebastian&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Surname</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*&amp;#123;lastName&amp;#125;">Pepper&lt;/span>.&lt;/p></span><span class="token attr-name">    &lt;p>Nationality</span><span class="token punctuation">:</span> <span class="token attr-value">&lt;span th:text="*&amp;#123;nationality&amp;#125;">Saturn&lt;/span>.&lt;/p></span>    &lt;/div>    <span class="token attr-name">    Message</span> <span class="token attr-value">Expressions: #&amp;#123;...&amp;#125;：获取国际化内容</span><span class="token attr-name">    Link</span> <span class="token attr-value">URL Expressions: @&amp;#123;...&amp;#125;：定义URL；</span><span class="token attr-name">            @&amp;#123;/order/process(execId</span><span class="token punctuation">=</span><span class="token attr-value">$&amp;#123;execId&amp;#125;,execType='FAST')&amp;#125;</span><span class="token attr-name">    Fragment</span> <span class="token attr-value">Expressions: ~&amp;#123;...&amp;#125;：片段引用表达式</span><span class="token attr-name">            &lt;div</span> <span class="token attr-value">th:insert="~&amp;#123;commons :: main&amp;#125;">...&lt;/div></span>            Literals（字面量）<span class="token attr-name">      Text</span> <span class="token attr-value">literals: 'one text' , 'Another one!' ,…</span><span class="token attr-name">      Number</span> <span class="token attr-value">literals: 0 , 34 , 3.0 , 12.3 ,…</span><span class="token attr-name">      Boolean</span> <span class="token attr-value">literals: true , false</span><span class="token attr-name">      Null</span> <span class="token attr-value">literal: null</span><span class="token attr-name">      Literal</span> <span class="token attr-value">tokens: one , sometext , main ,…</span><span class="token attr-name">Text</span> <span class="token attr-value">operations:（文本操作）</span><span class="token attr-name">    String</span> <span class="token attr-value">concatenation: +</span><span class="token attr-name">    Literal</span> <span class="token attr-value">substitutions: |The name is $&amp;#123;name&amp;#125;|</span><span class="token attr-name">Arithmetic</span> <span class="token attr-value">operations:（数学运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: + , - , * , / , %</span><span class="token attr-name">    Minus</span> <span class="token attr-value">sign (unary operator): -</span><span class="token attr-name">Boolean</span> <span class="token attr-value">operations:（布尔运算）</span><span class="token attr-name">    Binary</span> <span class="token attr-value">operators: and , or</span><span class="token attr-name">    Boolean</span> <span class="token attr-value">negation (unary operator): ! , not</span><span class="token attr-name">Comparisons</span> <span class="token attr-value">and equality:（比较运算）</span><span class="token attr-name">    Comparators</span><span class="token punctuation">:</span> <span class="token attr-value">> , &lt; , >= , &lt;= ( gt , lt , ge , le )</span><span class="token attr-name">    Equality</span> <span class="token attr-value">operators: == , != ( eq , ne )</span><span class="token attr-name">Conditional</span> <span class="token attr-value">operators:条件运算（三元运算符）</span><span class="token attr-name">    If-then</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then)</span><span class="token attr-name">    If-then-else</span><span class="token punctuation">:</span> <span class="token attr-value">(if) ? (then) : (else)</span><span class="token attr-name">    Default</span><span class="token punctuation">:</span> <span class="token attr-value">(value) ?: (defaultvalue)</span><span class="token attr-name">Special</span> <span class="token attr-value">tokens:</span><span class="token attr-name">    No-Operation</span><span class="token punctuation">:</span> <span class="token attr-value">_ </span></code></pre><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>&#x3D;&#x3D;（WebMvcAutoConfiguration）&#x3D;&#x3D;</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>&#x3D;&#x3D;如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；&#x3D;&#x3D;</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17&#x3D;&#x3D;&#x3D;Date；</li></ul></li></ul><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"date-format"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在文件中配置日期格式化的规则</span>        <span class="token keyword">public</span> Formatter<span class="token operator">&lt;</span>Date<span class="token operator">></span> <span class="token function">dateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期格式化组件</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​&#x3D;&#x3D;自己添加的格式化器转换器，我们只需要放在容器中即可&#x3D;&#x3D;</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>&#x3D;&#x3D;自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）&#x3D;&#x3D;</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>&#x3D;&#x3D;我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）&#x3D;&#x3D;</p><pre><code>初始化WebDataBinder；请求数据=====JavaBean；</code></pre></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p><strong>&#x3D;&#x3D;编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc&#x3D;&#x3D;</strong>;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>原理：</p><p>​1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnableWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> WebMvcConfigurerComposite configurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//从容器中获取所有的WebMvcConfigurer</span>      <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setConfigurers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>WebMvcConfigurer<span class="token operator">></span> configurers<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">.</span><span class="token function">addWebMvcConfigurers</span><span class="token punctuation">(</span>configurers<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span>                <span class="token annotation punctuation">@Override</span>             <span class="token comment" spellcheck="true">// public void addViewControllers(ViewControllerRegistry registry) &amp;#123;</span>              <span class="token comment" spellcheck="true">//    for (WebMvcConfigurer delegate : this.delegates) &amp;#123;</span>               <span class="token comment" spellcheck="true">//       delegate.addViewControllers(registry);</span>               <span class="token comment" spellcheck="true">//   &amp;#125;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​4）、我们的配置类也会被调用；</p><p>​效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>DelegatingWebMvcConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableWebMvc</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>2）、</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>3）、</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        WebMvcConfigurerAdapter<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//容器中没有这个组件的时候，这个自动配置类才生效</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>WebMvcConfigurationSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        ValidationAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="token comment" spellcheck="true">//@EnableWebMvc   不要接管SpringMVC</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// super.addViewControllers(registry);</span>        <span class="token comment" spellcheck="true">//浏览器发送 /atguigu 请求来到 success</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180211130721.png"></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.messages"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceAutoConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn't contain a package qualifier (such as     * "org.mypackage"), it will be resolved from the classpath root.     */</span>    <span class="token keyword">private</span> String basename <span class="token operator">=</span> <span class="token string">"messages"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//我们的配置文件可以直接放在类路径下叫messages.properties；</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置国际化资源文件的基础名（去掉语言国家代码的）</span>            messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>                    StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoding<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fallbackToSystemLocale<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setCacheSeconds</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cacheSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>alwaysUseMessageFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>3）、去页面获取国际化的值；</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20180211134506.png"></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/css/signin.css<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/asserts/css/signin.css&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/asserts/img/bootstrap-solid.svg&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>asserts/img/bootstrap-solid.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;login.tip&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;login.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;login.username&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;login.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;login.password&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> [[#<span class="token entity" title="&#123;">&amp;#123;</span>login.remember<span class="token entity" title="&#125;">&amp;#125;</span>]]        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#&amp;#123;login.btn&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：</p><p>​国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mvc"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"locale"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties                    <span class="token punctuation">.</span><span class="token function">getLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> WebMvcProperties<span class="token punctuation">.</span>LocaleResolver<span class="token punctuation">.</span>FIXED<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FixedLocaleResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            AcceptHeaderLocaleResolver localeResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcceptHeaderLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            localeResolver<span class="token punctuation">.</span><span class="token function">setDefaultLocale</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> localeResolver<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>默认的就是根据请求头带来的区域信息获取Locale进行国际化</code></pre><p>4）、点击链接切换国际化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 可以在连接上携带区域信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String l <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Locale locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            locale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> locale<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><pre><code># 禁用缓存spring.thymeleaf.cache=false </code></pre><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;msg&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;not #strings.isEmpty(msg)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 登陆检查， */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//目标方法执行之前</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object user <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//未登陆，返回登陆页面</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"没有权限请先登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//已登陆，放行请求</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>注册拦截器</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment" spellcheck="true">//将组件注册在容器</span>    <span class="token keyword">public</span> WebMvcConfigurerAdapter <span class="token function">webMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        WebMvcConfigurerAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/main.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"dashboard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注册拦截器</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//super.addInterceptors(registry);</span>                <span class="token comment" spellcheck="true">//静态资源；  *.css , *.js</span>                <span class="token comment" spellcheck="true">//SpringBoot已经做好了静态资源映射</span>                registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginHandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  &#x2F;资源名称&#x2F;资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id&#x3D;xxx&amp;xxx&#x3D;xx</td><td>emp&#x2F;{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id&#x3D;1</td><td>emp&#x2F;{id}—DELETE</td></tr></tbody></table><p>2）、实验的请求架构;</p><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp&#x2F;1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp&#x2F;1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp&#x2F;1</td><td>DELETE</td></tr></tbody></table><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><pre class=" language-html"><code class="language-html">1、抽取公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>2、引入公共片段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~&amp;#123;footer :: copy&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>~<span class="token entity" title="&#123;">&amp;#123;</span>templatename::selector<span class="token entity" title="&#125;">&amp;#125;</span>：模板名::选择器~<span class="token entity" title="&#123;">&amp;#123;</span>templatename::fragmentname<span class="token entity" title="&#125;">&amp;#125;</span>:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>：行内写法可以加上：[[~<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>]];[(~<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>)]；</code></pre><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>引入方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>include</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer :: copy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>效果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>引入片段的时候传入参数： </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-2 d-none d-md-block bg-light sidebar<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar-sticky<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav flex-column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-link active<span class="token punctuation">"</span></span>                   <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;activeUri<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">'</span>main.html<span class="token punctuation">'</span>?<span class="token punctuation">'</span>nav-link active<span class="token punctuation">'</span>:<span class="token punctuation">'</span>nav-link<span class="token punctuation">'</span>&amp;#125;<span class="token punctuation">"</span></span>                   <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/main.html&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 24 24<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentColor<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linecap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-linejoin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>round<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feather feather-home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polyline</span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9 22 9 12 15 12 15 22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>polyline</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>                    Dashboard <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(current)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--引入侧边栏;传入参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commons/bar::#sidebar(activeUri<span class="token punctuation">=</span><span class="token punctuation">'</span>emps<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>LastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan@atguigu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>department<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Birth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017&#x2F;12&#x2F;12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—Date； 类型转换，格式化;</p><p>默认日期是按照&#x2F;的方式；</p><h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p><p>&#96;&#96;&#96;html</p><!--需要区分是员工修改还是添加；--><form th:action="@{/emp}" method="post">    <!--发送put请求修改员工数据-->    <!--1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）2、页面创建一个post表单3、创建一个input项，name="_method";值就是我们指定的请求方式-->    <input type="hidden" name="_method" value="put" th:if="${emp!=null}"/>    <input type="hidden" name="id" th:if="${emp!=null}" th:value="${emp.id}">    <div class="form-group">        <label>LastName</label>        <input name="lastName" type="text" class="form-control" placeholder="zhangsan" th:value="${emp!=null}?${emp.lastName}">    </div>    <div class="form-group">        <label>Email</label>        <input name="email" type="email" class="form-control" placeholder="zhangsan@atguigu.com" th:value="${emp!=null}?${emp.email}">    </div>    <div class="form-group">        <label>Gender</label><br/>        <div class="form-check form-check-inline">            <input class="form-check-input" type="radio" name="gender" value="1" th:checked="${emp!=null}?${emp.gender==1}">            <label class="form-check-label">男</label>        </div>        <div class="form-check form-check-inline">            <input class="form-check-input" type="radio" name="gender" value="0" th:checked="${emp!=null}?${emp.gender==0}">            <label class="form-check-label">女</label>        </div>    </div>    <div class="form-group">        <label>department</label>        <!--提交的是部门的id-->        <select class="form-control" name="department.id">            <option th:selected="${emp!=null}?${dept.id == emp.department.id}" th:value="${dept.id}" th:each="dept:${depts}" th:text="${dept.departmentName}">1</option>        </select>    </div>    <div class="form-group">        <label>Birth</label>        <input name="birth" type="text" class="form-control" placeholder="zhangsan" th:value="${emp!=null}?$]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在在开源社区提问</title>
      <link href="/2021/02/17/HowToAskQuestionsInOS/"/>
      <url>/2021/02/17/HowToAskQuestionsInOS/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用软件产品，或多或少都会遇到问题。对于商业产品，我们可以咨询客服寻求帮助。对于公司自己研发的产品，我们可以直接请教专家同事。但对于开源软件，在遇到问题时，如何才能及时有效地寻求帮助呢？</p></blockquote><p><a href="https://github.com/seajs/seajs/issues/545">文章源自seajs&#x2F;issues&#x2F;545</a></p><p>本文以开源类库 <a href="http://seajs.org/">SeaJS</a> 为例，说说我心目中的最佳实践。</p><h2 id="提问前"><a href="#提问前" class="headerlink" title="提问前"></a>提问前</h2><p>遇到问题时，心里都很着急。在决定向开源社区提交问题前，最好先做做以下功课：</p><h3 id="尝试从官方文档中找到答案"><a href="#尝试从官方文档中找到答案" class="headerlink" title="尝试从官方文档中找到答案"></a>尝试从官方文档中找到答案</h3><p>确保自己阅读过至少一次官方文档。这样在遇到问题时，如果能回忆起只言片语，就可以再去读一遍相关文档，问题往往也就解决了。</p><h3 id="Google-是你的朋友"><a href="#Google-是你的朋友" class="headerlink" title="Google 是你的朋友"></a>Google 是你的朋友</h3><p>对于成熟的开源项目，你遇到的问题，很可能别人也遇到过。这时通过 Google、StackOverflow 等网站的搜索服务，可以帮你快速定位并解决问题。永远记住，地球上的你并不孤单，包括你遇到的问题。</p><h3 id="挖掘-Bug-宝藏"><a href="#挖掘-Bug-宝藏" class="headerlink" title="挖掘 Bug 宝藏"></a>挖掘 Bug 宝藏</h3><p>开源软件一般都会有自己的 Bug 管理方案，比如 WebKit、V8、jQuery、SeaJS 等等。从它们的官网上找到 Bug 管理地址，然后通过搜索看看有无你遇到的问题。对于活跃社区来说，这一招经常很管用。比如 jQuery 的 <a href="http://bugs.jquery.org/">Bug Tracker</a>，通过右上角的 Search Tickets 可以找到非常多有用的信息。一个运作良好的 Bug 库，经常是一座巨大的宝藏。SeaJS 是直接通过 <a href="https://github.com/seajs/seajs/issues">GitHub Issues</a> 来管理，你可以在 Issues 中找到很多信息。</p><h3 id="求助身边的朋友"><a href="#求助身边的朋友" class="headerlink" title="求助身边的朋友"></a>求助身边的朋友</h3><p>如果你使用的开源软件，在朋友圈或同事圈里也有人使用，那么抬起你的脚、或拿起你的电话，真挚诚恳的探讨不会遭遇拒绝，而会增进友谊。不要犹豫，你的内心渴望面对面交流，你的朋友也是。</p><p>如果以上 4 步都无法解决你遇到的问题，也别犹豫，立马向开源社区提交问题就好。</p><h2 id="提问时"><a href="#提问时" class="headerlink" title="提问时"></a>提问时</h2><p>提问有很多种，比如你认识作者，直接面对面请教就行。下面探讨的是如何通过互联网的方式来问问题。</p><h3 id="平和对等的心态"><a href="#平和对等的心态" class="headerlink" title="平和对等的心态"></a>平和对等的心态</h3><p>很多开源软件都是免费的，作者往往是业余时间出于兴趣在维护，没有义务回答社区问题。提问时，不要把自己摆在顾客的位置，比如</p><blockquote><p>项目马上要上线了，请务必帮忙解决<br>这是我的邮箱，请及时联系我</p></blockquote><p>另外，也不要把自己摆在乞食者的位置，比如</p><blockquote><p>冰天雪地跪求解答<br>救命啊，我的网站挂了</p></blockquote><p>在开源社区，一切皆是朋友。无论对方是 Linux 内核的作者，还是某个 jQuery 插件的作者，你和作者都是对等的。你的提问是在帮助开源软件完善。平和对等的心态，可以让你的问题赢得更多人的阅读和思考。</p><h3 id="通过正确的途径提交"><a href="#通过正确的途径提交" class="headerlink" title="通过正确的途径提交"></a>通过正确的途径提交</h3><p>如果遇到问题的开源软件有专门的 Bug 管理系统，请最好到这些指定系统中提交。比如，对于前端开发工程师来说，下面这些 Tracker 系统很重要。</p><ul><li><a href="http://bugs.jquery.com/report">jQuery Tickets</a></li><li><a href="https://bugs.webkit.org/">WebKit Bugzilla</a></li><li><a href="https://bugzilla.mozilla.org/">Mozilla Bugzilla</a></li></ul><p>还有各个开源类库的 Issues 库，比如 SeaJS 的是：<a href="https://github.com/seajs/seajs/issues">seajs&#x2F;issues</a></p><p>最不好的途径是</p><ul><li>QQ 、阿里旺旺、微信等群组。这些群组主要是用来工作或休闲的。对开源项目来说，在这些地方提问，作者一般不会关注，效率非常低。</li><li>微博、Facebook 等社交网络。不少人在微博上通过 at 或私信询问 SeaJS 问题，这些我经常看不到。看到了，也不情愿回复。微博是扯淡、交流情感的地方，一般是写代码写累了，才去逛逛，很少会有在社交网络上回答技术问题的心情。</li></ul><p>通过正确的途径提交问题，一般可以让你的问题得到及时准确的回复。</p><h3 id="使用明确、有意义的标题"><a href="#使用明确、有意义的标题" class="headerlink" title="使用明确、有意义的标题"></a>使用明确、有意义的标题</h3><p>抱着平和对等的心态，找到合适的途径后，就得静下心来将遇到的问题写成文字。书写文字不是一件简单的事情，我们可以从遵循一些简单的规则开始。</p><p>首先是标题要简洁清晰，要言之有物。比如</p><blockquote><p>我遇到了一个 Ajax 问题<br>SeaJS 在我的浏览器上运行不了</p></blockquote><p>上面的标题很糟糕，光看标题作者无法知道发生了什么事。当开源社区的问题很多时，上面这类标题，经常会让作者直接忽视或将优先级降到很低。更妥当的标题是</p><blockquote><p>Ajax 请求未返回正确的 responseXML<br>SeaJS 2.0 在 IE6 上运行时抛错</p></blockquote><p>明确、有意义的标题，可以帮助作者确定问题具体是什么类型、预估需要多少时间解决、是否现在马上解决等。一个好的标题，也有利于社区知识的沉淀和后期搜索。标题有如一个人的颜面衣着，虽然不是关键，但在嘈杂的信息社区中，这很重要。</p><h3 id="遵循良好的模板"><a href="#遵循良好的模板" class="headerlink" title="遵循良好的模板"></a>遵循良好的模板</h3><p>如果社区提供了问题模板，一定要仔细看下。比如 Google Code 社区，当你创建一个问题时，会自动提供以下模板：</p><hr><p>What steps will reproduce the problem?<br>该问题的重现步骤是什么？</p><p>1.<br>2.<br>3. </p><p>What is the expected output? What do you see instead?<br>你期待的结果是什么？实际看到的又是什么？</p><p>What version of the product are you using? On what operating system?<br>你正在使用产品的哪个版本？在什么操作系统上？</p><p>Please provide any additional information below.<br>如果有的话，请在下面提供更多信息。</p><hr><p>遵循这个模板去描述问题，经常能省很多事。作者一般也非常欢迎通过模板提交的问题。如果社区没有提供模板，也可以自己遵循以上模板来提交。</p><p>下面针对问题内容，具体说说一些需要注意的点。</p><h3 id="语法正确、格式清晰"><a href="#语法正确、格式清晰" class="headerlink" title="语法正确、格式清晰"></a>语法正确、格式清晰</h3><p>虽然我们不是作家，但正确的语法、清晰的格式，可以让读者赏心悦目，也就更有心情帮你一起思考解决问题。</p><p>对于很多需要代码来描述的问题，要尤其注意格式，比如</p><pre class=" language-javascript"><code class="language-javascript">seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可读性不如</p><pre class=" language-javascript"><code class="language-javascript">seajs<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>GitHub 的 Markdown 语法可以很好地支持代码排版、语法高亮等，建议书写代码时，一定要先阅读下说明：<a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a>。这能让你的内容看起来很专业，社区也就更有意愿会去帮助你，否则糟糕的排版，经常带来的是发帖之后的石沉大海。</p><h3 id="描述事实、而不是猜测"><a href="#描述事实、而不是猜测" class="headerlink" title="描述事实、而不是猜测"></a>描述事实、而不是猜测</h3><p>事实是指，依次进行了哪些操作、产生了怎样的结果。比如</p><blockquote><p>我在 Windows XP 下用 IE6 打开 <a href="http://seajs.org/">seajs.org</a> 后，点击“5 分钟上手 SeaJS”，这时浏览器弹出脚本错误提示，例子显示不正确。</p></blockquote><p>上面是一段比较好的事实描述（更好的是把错误提示也截图上来），而不要像下面这样猜测：</p><blockquote><p>SeaJS 在 IE6 下运行不正常，我怀疑是源码第 213 行有问题。</p></blockquote><p>上面的描述，会让作者一头雾水、甚至很恼火。尽量避免猜测性描述，除非你能先描述事实，在事实描述清楚之后，再给出合理的猜测是欢迎的。</p><p>对于前端项目来说，如果能提供可重现错误的在线可访问代码，那是最好不过的。一旦你这么用心去做了，作者往往也会很用心地立马帮你解决。</p><h3 id="描述目标、而不是过程"><a href="#描述目标、而不是过程" class="headerlink" title="描述目标、而不是过程"></a>描述目标、而不是过程</h3><p>经常会有这种情况，提问者在脑袋里有个更高层次的目标，他们在自以为能达到目标的特定道路上卡住了，然后跑来问该怎么走。比如</p><blockquote><p>SeaJS 的 parseMap 方法在遇到 map 的多个配置项同时匹配同一个路径时，应该允许用户指定是全部生效还是仅第一个匹配的配置项生效。</p></blockquote><p>上面这个问题的背后，提问者实际上想解决的是如何通过 SeaJS 来做版本管理。提问者选择了通过 map 的方式来实现，但这过程中遇到了问题，因此跑过来继续怎么走。然而，如果只是描述过程，往往会把作者也绕进去。</p><p>实际情况却是，提问者选择的路本身就是一条崎岖之路，对于要解决的问题，实际上有更好的方式。这种情况下，描述清楚目标，讲清楚要干什么非常重要。</p><p>在描述自己是怎么做之前，一定要先描述要做什么。提问题时，What 往往比 How 更重要。</p><h3 id="要有具体场景"><a href="#要有具体场景" class="headerlink" title="要有具体场景"></a>要有具体场景</h3><p>无论在开源社区，还是微博、知乎等平台上，有一种非常常见的问题：</p><blockquote><p>如何维护 JavaScript 代码？<br>如何使用 SeaJS 进行模块化开发？</p></blockquote><p>这类问题还有很多，每每遇到，只能笑笑，然后悄悄地忽略掉。因此这类问题很难回答，就如下面这些问题一样：</p><blockquote><p>如何才能让生命有意义？<br>如何打败淘宝？</p></blockquote><p>这类提问者，一般比较浮躁，经常对问题本身也没有经过思考。踏实的提问者，不会让问题浮在空中无法回答，而会在具体场景中让问题落地：</p><blockquote><p>我的项目有 20 多个 JS 文件，接下来还会急剧增加。目前遇到以下问题……（省略五百字）…… 请问如何维护？</p></blockquote><h3 id="仔细检查、确保准确"><a href="#仔细检查、确保准确" class="headerlink" title="仔细检查、确保准确"></a>仔细检查、确保准确</h3><p>是人都会犯错误，特别是在如此快节奏的互联网环境下。好不容易把问题描述清楚时，不要急着立刻提交。在提交前，至少保证从头到尾再仔细阅读一遍，比如语法错误、错别字、标点符号、排版等等。做到这些，不光是尊重别人，也是尊重自己。</p><h2 id="提问后"><a href="#提问后" class="headerlink" title="提问后"></a>提问后</h2><p>提交问题后，建议通过邮件等方式订阅回复。互联网上最有效的沟通方式是异步沟通，不要期待作者马上回复，也不要心烦意乱着急地等待。出去看看天，数数云朵，你会逐步明白什么是风轻云淡。</p><h3 id="尽可能补充信息"><a href="#尽可能补充信息" class="headerlink" title="尽可能补充信息"></a>尽可能补充信息</h3><p>在接收到回复时，仔细阅读。最经常的情况是，社区回复的，经常不是你想要的。比如</p><blockquote><p>根据你的描述，问题无法重现。能否提供具体使用环境和重现步骤？</p></blockquote><p>这时要淡定。仔细看看自己提交的问题描述是否足够清晰，如果有可补充的信息，尽量补充，以帮助作者能尽快定位问题。比如</p><blockquote><p>很抱歉，我前面有一步描述不正确，实际情况是我是在 IETester 中运行的……</p></blockquote><p>谦和淡定的交流，不光能帮助你解决问题，还有助于你结交更多朋友。</p><h3 id="适当的总结"><a href="#适当的总结" class="headerlink" title="适当的总结"></a>适当的总结</h3><p>当问题终于解决时，建议对问题进行总结。可以编辑原帖，也可以通过博客等方式总结。你的总结，会让遇到同样问题的朋友们受益，并且对自己的技能也是一种提高。前端业界，无论国内还是国外，有很多牛人之所以成为牛人，很大程度上都是因为有总结思考的好习惯。</p><h3 id="不要忘记感谢"><a href="#不要忘记感谢" class="headerlink" title="不要忘记感谢"></a>不要忘记感谢</h3><p>最后，记得感谢。很多开源软件的作者，都是利用业余时间在创作代码。你的感谢，汇集许许多多大家的感谢，会让开源社区充满爱与力量。</p>]]></content>
      
      
      <categories>
          
          <category> 认知升级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
            <tag> 认知升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHubSearch</title>
      <link href="/2021/01/16/GitHubSearch/"/>
      <url>/2021/01/16/GitHubSearch/</url>
      
        <content type="html"><![CDATA[<p>当我们知道自己要找的技术栈、编程语言或框架等关键要素之后，我们就可以通过搜索引擎或在代码托管平台上进行搜索。以 GitHub 为例，除了直接搜索关键字，GitHub 还提供了许多条件搜索功能，善用这些功能，可以更加快速有效地找到我们想要的、优质的开源项目。比如：</p><ol><li><p>匹配含有 “student” 字样、星标超过 500 个的仓库。</p><pre class=" language-sql"><code class="language-sql">student stars:<span class="token operator">></span><span class="token number">500</span></code></pre></li><li><p>匹配含有 “vue” 字样、有 5 个或更多主题的仓库。</p><pre class=" language-sql"><code class="language-sql">vue topics:<span class="token operator">>=</span><span class="token number">5</span></code></pre></li><li><p>匹配含有 “node” 字样，有 10,000 或更多关注者的仓库。</p><pre class=" language-sql"><code class="language-sql">node followers:<span class="token operator">>=</span><span class="token number">10000</span></code></pre></li><li><p>匹配已归类为 “algorithm” 主题的仓库</p><pre class=" language-sql"><code class="language-sql">topic:<span class="token keyword">algorithm</span></code></pre></li><li><p>匹配遵循 Apache License 2.0 授权的仓库</p><pre class=" language-sql"><code class="language-sql">license:apache<span class="token number">-2.0</span></code></pre></li><li><p>匹配项目自述文件中提及 “SSM” 的仓库。</p><pre class=" language-sql"><code class="language-sql">SSM <span class="token operator">in</span>:readme</code></pre></li><li><p>搜索地址位于中国，且拥有超过 5000 名关注者的开发者。</p><pre class=" language-sql"><code class="language-sql">location:china followers:<span class="token operator">></span><span class="token number">5000</span></code></pre></li></ol><p>更多搜索语法相关内容，请查阅 GitHub Docs 文档 <a href="https://docs.github.com/cn/free-pro-team@latest/github/searching-for-information-on-github">在 GitHub 上搜索信息</a>。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Hexo迁移 the &quot;mode&quot; argument must be integer</title>
      <link href="/2020/12/15/nodejsVersionTooHigh/"/>
      <url>/2020/12/15/nodejsVersionTooHigh/</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客从Window迁移到Mac电脑</p></blockquote><pre class=" language-bash"><code class="language-bash">fatal something's wrong. maybe you can <span class="token function">find</span> the solution here: https://hexo.io/docs/troubleshooting.html typeerror <span class="token punctuation">[</span>err_invalid_arg_type<span class="token punctuation">]</span>: the <span class="token string">"mode"</span> argument must be integer. received an instance of object    at copyfile <span class="token punctuation">(</span>fs.js:1972:10<span class="token punctuation">)</span>    at trycatcher <span class="token punctuation">(</span>/users/zhouhailin/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span>    at ret <span class="token punctuation">(</span>eval at makenodepromisifiedeval <span class="token punctuation">(</span>/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promisify.js:184:12<span class="token punctuation">)</span>, <span class="token operator">&lt;</span>anonymous<span class="token operator">></span>:13:39<span class="token punctuation">)</span>    at /users/zhouhailin/blog/node_modules/hexo-fs/lib/fs.js:144:39    at trycatcher <span class="token punctuation">(</span>/users/zhouhailin/blog/node_modules/bluebird/js/release/util.js:16:23<span class="token punctuation">)</span></code></pre><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/nodejs VersionToHigh.png"></div><blockquote><p>解决办法</p></blockquote><p>这是因为nodejs版本太高导致，卸载安装低版本。</p><p>卸载参考如下步骤</p><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/uninstallNode0.png"><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/uninstallNode1.png"></div><blockquote><p>下载低版本nodejs</p></blockquote><p>传送门🚪 <a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a></p><hr><blockquote><p>续</p></blockquote><p>很久一段时间没有管HEXO，最近准备重拾站点，再一次遇到了node版本过高问题。尝试升级hexo版本失败，最终还是选择降低node版本解决此问题。</p><ul><li>系统信息：macOS Monterey</li><li>芯片架构：M1</li><li>node版本：16</li><li>hexo版本：4.2</li></ul><p>降低node版本后相关信息</p><pre class=" language-bash"><code class="language-bash">hexo: 4.2.0hexo-cli: 4.3.0os: darwin 21.4.0 12.3.1node: 12.22.11v8: 7.8.279.23-node.56uv: 1.40.0zlib: 1.2.11brotli: 1.0.9ares: 1.18.1modules: 72nghttp2: 1.41.0napi: 8llhttp: 2.1.4http_parser: 2.9.4openssl: 1.1.1ncldr: 37.0icu: 67.1tz: 2021a4unicode: 13.0</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指令系统</title>
      <link href="/2020/11/17/ComputerCommandSystem/"/>
      <url>/2020/11/17/ComputerCommandSystem/</url>
      
        <content type="html"><![CDATA[<blockquote><p>指令系统是计算机硬件的语言系统，也叫机器语言，它是软件和硬件的主要界面，从系统结构的角度看，它是系统程序员看到的计算机的主要属性。指令系统是表征一台计算机性能的重要因素，它的格式与功能不仅直接影响到机器的硬件结构，而且也直接影响到系统软件，影响到机器的适用范围</p></blockquote><h2 id="发展与性能"><a href="#发展与性能" class="headerlink" title="发展与性能"></a>发展与性能</h2><h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><p>计算机的程序是由一系列机器指令组成的。指令就是要计算机执行某种操作的命令。每一条指令可以完成一个独立的算术运算或者逻辑运算操作</p><p><strong>计算机组成结构</strong></p><ul><li>微指令，微程序级的命令，属于硬件。</li><li>机器指令，介于微指令与宏指令之间，通常简称指令。</li><li>宏指令，若干条机器指令组成的软件指令，属于软件。</li></ul><p><strong>指令系统（指令集）</strong>：一台计算机中所有机器指令的集合。</p><p>指令系统是表征一台计算机机性能的重要因素，它的格式与功能不仅仅影响到机器的硬件结构，而且影响到系统软件。因为指令是设计一台计算机的硬件与低层软件的接口。</p><p><strong>系列计算机</strong>：基本指令系统相同、基本体系结构相同的一系列计算机。</p><p>系列计算机解决了各种机的软件兼容问题，其必要条件是同一系列的各机种有共同的指令系统，而且新推出的机种指令系统一定包含所以旧机种的全部指令。因此旧机种上运行的各种软件可以不加任何修改便可以再新机种上运行，大大减少了软件开发费用。</p><p>计算机硬件结构随着VLSI(超大规模集成电路)技术的飞速发展而越来越复杂化，大多数计算机的指令系统多大几百条，这种机器称为<strong>CISC（复杂指令系统计算机）</strong></p><p>缺点：计算机的研制周期变长，由于采用了大量使用频率很低的复杂指令而造成硬件资源浪费。</p><p>解决办法：<strong>RISC(精简指令系统计算机)</strong></p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>一个完善的指令系统应满足四方面要求：完备性，有效性，规整性，兼容性。</p><p><strong>完备性</strong></p><p>用汇编语言编写各种程序时，指令系统直接提供的指令足够使用，而不必用软件来实现。完备性要求指令系统丰富，功能齐全，使用方便。</p><p>一台计算机种最基本，必不可少的指令是不多的，许多指令空用最基本的指令编程来实现。</p><p>乘除运算指令，浮点运算指令可直接使用硬件来实现，也可用基本指令编写程序来实现。</p><p>采用硬件指令的目的是提高程序执行速度，便于用户编写程序。</p><p><strong>有效性</strong></p><p>有效性是指利用改指令系统所编写的程序能够高效的运行。高效率主要表现在程序占据存储空间小，执行速度快。</p><p>一般来说，一个功能更强，更完善的指令系统，必定有更好的有效性。</p><p><strong>规整性</strong></p><p>包括指令系统的对称性，匀齐性，指令格式和数据格式 一致性。</p><p>对称性：指令系统种所以的寄存器和存储单元都可同等对待，所以指令可使用各种寻址方式</p><p>匀齐性：一种操作性质的指令可以支持各种数据类型</p><p>指令格式和数据格式一致性：指令长度和数据长度有一定的关系，以方便处理和存取。</p><p><strong>兼容性</strong></p><p>系列机各机种之间具有相同的基本结构和共同的基本指令系统，因而指令系统是兼容的，即各机种上基本软件可通用。</p><p>由于不同机种推出的时间不同，在结构和性能上有差异，做到各机种上基本软件都完全兼容是不可能的，只能做到“向上兼容”，即抵挡机上运行的软件可以在高档机上运行。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea Maven SSM整合配置</title>
      <link href="/2020/11/02/IdeaMavenSSM/"/>
      <url>/2020/11/02/IdeaMavenSSM/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><strong>IntelliJ IDEA</strong> </p><p><strong>maven环境</strong></p><p><strong>JDK环境</strong></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><pre class=" language-reStructuredText"><code class="language-reStructuredText">│  pom.xml│  ├─src│  ├─main│  │  ├─java│  │  │  └─vip│  │  │      └─wulinzeng│  │  │          ├─controller│  │  │          │      CustomerController.java│  │  │          │      │  │  │          ├─mapper│  │  │          │      CustomerMapper.java│  │  │          │      │  │  │          ├─pojo│  │  │          │      Customer.java│  │  │          │      │  │  │          └─service│  │  │              │  CustomerService.java│  │  │              │  │  │  │              └─impl│  │  │                      CustomerServiceImpl.java│  │  │                      │  │  ├─resources│  │  │  │  applicationContext.xml│  │  │  │  jdbc.properties│  │  │  │  log4j.properties│  │  │  │  spring-mvc.xml│  │  │  │  sqlMapConfig-spring.xml│  │  │  │  sqlMapConfig.xml│  │  │  │  │  │  │  └─vip│  │  │      └─wulinzeng│  │  │          └─mapper│  │  │                  CustomerMapper.xml│  │  │                  │  │  └─webapp│  │      │  index.jsp│  │      │  │  │      └─WEB-INF│  │          │  web.xml│  │          │  │  │          └─views│  │                  customer_list.jsp│  │                  │  └─test│      └─java│              Test.java│              └─target    ├─classes    │  │  applicationContext.xml    │  │  jdbc.properties    │  │  log4j.properties    │  │  spring-mvc.xml    │  │  sqlMapConfig-spring.xml    │  │  sqlMapConfig.xml    │  │      │  └─vip    │      └─wulinzeng    │          ├─controller    │          │      CustomerController.class    │          │          │          ├─mapper    │          │      CustomerMapper.class    │          │      CustomerMapper.xml    │          │          │          ├─pojo    │          │      Customer.class    │          │          │          └─service    │              │  CustomerService.class    │              │      │              └─impl    │                      CustomerServiceImpl.class    │                          ├─generated-sources    │  └─annotations    ├─generated-test-sources    │  └─test-annotations    ├─MybatisDemoTwo    │  │  index.jsp    │  │      │  ├─META-INF    │  │      MANIFEST.MF    │  │          │  └─WEB-INF    │      │  web.xml    │      │      │      ├─classes    │      │  │  applicationContext.xml    │      │  │  jdbc.properties    │      │  │  log4j.properties    │      │  │  spring-mvc.xml    │      │  │  sqlMapConfig-spring.xml    │      │  │  sqlMapConfig.xml    │      │  │      │      │  ├─mapper    │      │  ├─vip    │      │  │  └─wulinzeng    │      │  │      ├─controller    │      │  │      │      CustomerController.class    │      │  │      │          │      │  │      ├─mapper    │      │  │      │      CustomerMapper.class    │      │  │      │      CustomerMapper.xml    │      │  │      │          │      │  │      ├─pojo    │      │  │      │      Customer.class    │      │  │      │          │      │  │      └─service    │      │  │          │  CustomerService.class    │      │  │          │      │      │  │          └─impl    │      │  │                  CustomerServiceImpl.class    │      │  │                      │      │  └─vip.wulinzeng    │      │      └─mapper    │      ├─lib    │      │      aspectjweaver-1.8.7.jar    │      │      c3p0-0.9.1.2.jar    │      │      hamcrest-core-1.3.jar    │      │      jsp-api-2.0.jar    │      │      jstl-1.2.jar    │      │      junit-4.12.jar    │      │      log4j-1.2.17.jar    │      │      mybatis-3.4.5.jar    │      │      mybatis-spring-1.3.1.jar    │      │      MybatisDemo01-1.0-SNAPSHOT.jar    │      │      mysql-connector-java-5.1.6.jar    │      │      servlet-api-2.5.jar    │      │      spring-aop-5.0.5.RELEASE.jar    │      │      spring-beans-5.0.5.RELEASE.jar    │      │      spring-context-5.0.5.RELEASE.jar    │      │      spring-core-5.0.5.RELEASE.jar    │      │      spring-expression-5.0.5.RELEASE.jar    │      │      spring-jcl-5.0.5.RELEASE.jar    │      │      spring-jdbc-5.0.5.RELEASE.jar    │      │      spring-test-5.0.5.RELEASE.jar    │      │      spring-tx-5.0.5.RELEASE.jar    │      │      spring-web-5.0.5.RELEASE.jar    │      │      spring-webmvc-5.0.5.RELEASE.jar    │      │          │      └─views    │              customer_list.jsp    │                  └─test-classes            Test.class</code></pre><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ideaMavenSSM0.png"></div><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><blockquote><p>resources</p></blockquote><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--spring相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--servlet和jsp--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mybatis相关--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>MybatisDemo01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>加载配置文件在<code>build</code>中添加<code>resources</code></p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--组件扫描 扫描service和mapper--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--排除controller的扫描--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>exclude-filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--加载propeties文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置sessionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--加载mybatis核心文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:sqlMapConfig-spring.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--扫描mapper所在的包 为mapper创建实现类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--声明式事务控制--></span>    <span class="token comment" spellcheck="true">&lt;!--平台事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置事务增强--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--事务的aop织入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* vip.wulinzeng.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h3><p>修改数据库表名，数据库用户名，密码。8.0以上需设置时区<code>serverTimezone=UTC</code></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/db_test?useUnicode=true&amp;characterEncoding=utf-8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span></code></pre><p><strong>log4j.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Hibernate, Relational Persistence for Idiomatic Java</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># License: GNU Lesser General Public License (LGPL), version 2.1 or later.</span><span class="token comment" spellcheck="true"># See the lgpl.txt file in the root directory or &lt;http://www.gnu.org/licenses/lgpl-2.1.html>.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">### direct log messages to stdout ###</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.err</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d&amp;#123;ABSOLUTE&amp;#125; %5p %c&amp;#123;1&amp;#125;:%L - %m%n</span><span class="token comment" spellcheck="true">### direct messages to file hibernate.log ###</span><span class="token comment" spellcheck="true">#log4j.appender.file=org.apache.log4j.FileAppender</span><span class="token comment" spellcheck="true">#log4j.appender.file.File=hibernate.log</span><span class="token comment" spellcheck="true">#log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><span class="token comment" spellcheck="true">#log4j.appender.file.layout.ConversionPattern=%d&amp;#123;ABSOLUTE&amp;#125; %5p %c&amp;#123;1&amp;#125;:%L - %m%n</span><span class="token comment" spellcheck="true">### set log levels - for more verbose logging change 'info' to 'debug' ###</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">all, stdout</span></code></pre><h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--组件扫描  主要扫描controller--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置mvc注解驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--内部资源视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--开发静态资源访问权限--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="sqlMapConfig-xml"><a href="#sqlMapConfig-xml" class="headerlink" title="sqlMapConfig.xml"></a>sqlMapConfig.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--加载properties文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;typeAlias type="com.itheima.domain.Account" alias="account">&lt;/typeAlias>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>developement<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>developement<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--加载映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;mapper resource="com/itheima/mapper/AccountMapper.xml">&lt;/mapper>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="sqlMapConfig-spring-xml"><a href="#sqlMapConfig-spring-xml" class="headerlink" title="sqlMapConfig-spring.xml"></a>sqlMapConfig-spring.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--定义别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;typeAlias type="com.itheima.domain.Account" alias="account">&lt;/typeAlias>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="CustomerMapper-xml"><a href="#CustomerMapper-xml" class="headerlink" title="CustomerMapper.xml"></a>CustomerMapper.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.mapper.CustomerMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.pojo.Customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select * from customer     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><blockquote><p>java</p></blockquote><h3 id="CustomerController"><a href="#CustomerController" class="headerlink" title="CustomerController"></a>CustomerController</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>service<span class="token punctuation">.</span>CustomerService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomerService customerService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">findAll</span><span class="token punctuation">(</span>ModelAndView model<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"findAll get in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> customerList<span class="token operator">=</span>customerService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customerList<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"customer"</span><span class="token punctuation">,</span>customerList<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"customer_list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  model<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="CustomerMapper"><a href="#CustomerMapper" class="headerlink" title="CustomerMapper"></a>CustomerMapper</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Customer"><a href="#Customer" class="headerlink" title="Customer"></a>Customer</h3><p><code>set</code>  <code>get</code> <code>toString</code>方法自行补齐，数据库表结构参考实体类，<code>id</code>自增。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String jobs<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* set get tostring */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="CustomerServiceImpl"><a href="#CustomerServiceImpl" class="headerlink" title="CustomerServiceImpl"></a>CustomerServiceImpl</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>CustomerMapper<span class="token punctuation">;</span><span class="token keyword">import</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>service<span class="token punctuation">.</span>CustomerService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CustomerService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CustomerMapper customerMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> customerMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="CustomerService"><a href="#CustomerService" class="headerlink" title="CustomerService"></a>CustomerService</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> vip<span class="token punctuation">.</span>wulinzeng<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><blockquote><p>webapp</p></blockquote><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--spring 监听器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--springmvc的前端控制器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--乱码过滤器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h3 id="customer-list-jsp"><a href="#customer-list-jsp" class="headerlink" title="customer_list.jsp"></a>customer_list.jsp</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/jsp/jstl/core<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>展示账户数据列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>账户id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>账户名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>账户职位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>账户电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;customer&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>customer.id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>customer.username<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>customer.jobs<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>customer.phone<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>项目下载：<a href="https://github.com/unluckynike/BaseSSM">https://github.com/unluckynike/BaseSSM</a></p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS项目部署</title>
      <link href="/2020/10/27/AiliyunECSDeployProject/"/>
      <url>/2020/10/27/AiliyunECSDeployProject/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p><strong>传送门🚪：<a href="https://www.aliyun.com/">阿里云服务器</a></strong></p><p>直接买、高校云上计划领取、学生认证买都可以，不多赘述。</p><p><strong>传送门🚪：<a href="https://www.netsarang.com/zh/all-downloads/?code=623">Xshell</a></strong></p><p><strong>传送门🚪：<a href="https://www.netsarang.com/zh/all-downloads/?code=623">Xftp 6</a></strong></p><p>这两个软件<strong>Xshell</strong>是连接服务器的，<strong>Xftp</strong>是传输电脑数据的。官网进入后选择<strong>家庭和学校用户的免费许可证</strong>里的<strong>免费授权</strong>输入自己的学生邮箱（.edu结尾）即可获取免费的下载链接，下载的地址会以邮件的形式发送到填的学生邮箱中，点击即可下载，安装直接一路next。</p><h2 id="建立服务器连接"><a href="#建立服务器连接" class="headerlink" title="建立服务器连接"></a>建立服务器连接</h2><p>进入到阿里云的控制台，选择<code>云服务器ECS</code>，进入过后找到自己的<code>公网IP</code></p><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/aliyunECS.png"></div><p>进入云<strong>服务器ECS</strong>下的<strong>实例</strong>设置用户名和密码这里我们在后面的Xshell连接服务器时会用到。用户名默认是<strong>root</strong>，仅需要设置密码。</p><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/aliyunECSandXshellRootPasswordSetting.png">      <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/aliyunECSandXshellRootPassword.png"></div><p>现在我们需要将Xshell与Xftp6与服务器进行连接。</p><p>打开<strong>Xshell</strong>第一打开便直接就会进入到新建页面，在<strong>主机</strong>中输入自己的<strong>公网IP</strong>,再进入<strong>用户身份验证</strong>输入刚才我们在<strong>云服务器ECS</strong>中设置的用户名（root）和密码。</p><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Xshell0.png">        <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Xhell1.png"></div><p>确认完成后点击连接Xshell出现以下内容则连接成功。</p><div>          <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/XhellConnectSuccess.png"></div><p><strong>Xftp6</strong>建立服务器的连接与<strong>Xshell</strong>类似，填入主机，用户名，密码即可。</p><div>          <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Xftp6Connect.png"></div><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><p>注意复制是<strong>shift+insert</strong>，同意安装完成过后通过命令<code>java -version</code>查看是否安装成功已经JDK的版本信息。</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> java-1.8.0-openjdk.x86_64</code></pre><div>      <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/installJDK.png">         <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/installJDKSuccess.png"></div><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p><strong>传送门🚪：<a href="https://lnmp.org/install.html">LNMP</a></strong></p><p>mysql安装是最繁琐的一步了，经常会出现各种错误，这里我使用的是<strong>LNMP</strong>一键安装，一路回车等着它跑完就可以了。时间可能会有点长，<strong>一开始的时候会让你设置MYSQL的密码</strong>，过后全程只需要等就可以了。</p><p>这里给出它的安装成功图示（图示来自LNMP官网）。如果显示Nginx: OK，MySQL: OK，PHP: OK，并且Nginx、MySQL、PHP都是running，80和3306端口都存在，并提示安装使用的时间及Install lnmp V1.6 completed! enjoy it.的话，说明已经安装成功。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://soft.vpser.net/lnmp/lnmp1.7.tar.gz -cO lnmp1.7.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> zxf lnmp1.7.tar.gz <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> lnmp1.7 <span class="token operator">&amp;&amp;</span> ./install.sh lnmp</code></pre><p>mysql登录</p><pre class=" language-bash"><code class="language-bash">mysql -uroot -p****<span class="token punctuation">(</span>你设置的密码）<span class="token comment" spellcheck="true">#或者</span>mysql -uroot -p<span class="token comment" spellcheck="true">#回车输入密码</span>Enter password： </code></pre><p>查询使用</p><pre class=" language-bash"><code class="language-bash">show databases<span class="token punctuation">;</span>use dbxxxx<span class="token punctuation">;</span></code></pre><div>      <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/lnmp1.5-install-success.png"></div><h2 id="安装tomcate"><a href="#安装tomcate" class="headerlink" title="安装tomcate"></a>安装tomcate</h2><p>这里安装和前两个jdk和mysql有所不一样。附上**<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/">链接</a>**，直接下载的本地电脑（后面我们会使用Xftp6将他放在服务器中）。</p><p>不管你是下载tomcate7、8、9、10哪一个版本，直接进入文夹下的<code>bin</code>目录下载<code>tar.gz</code>后缀的文件，例如tomcat7，就下载<code>apache-tomcat-7.0.106.tar.gz   </code></p><p>下载到本地过后，将压缩包放到服务器的<code>usr/local</code>文件夹下，可以直接拖拽。</p><p>然后进行解压，</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local<span class="token function">tar</span> xzf apache-tomcat-7.0.106.tar.gz</code></pre><div>      <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ECSTomcate.png"></div><p>解压完成过后，启动tomcate，会提示启动成功。如果嫌文件夹名字过长易打错可以将解压后的文件夹重命名。</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">cd</span> /usr/local/apache-tomcat-7.0.106.tar.gz/bin./startup.sh</code></pre><p>启动成功</p><div>            <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/tomcateStart.png"> </div><p>设置安全组，进入<strong>云服务器ECS</strong>，进入<strong>安全组配置</strong>后点击<strong>配置规则</strong></p><div>        <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Securitygroup0.png">            <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Securitygroup1.png"></div><p>完成过后，这个时候在浏览器中直接<code>ip:8080</code>其实就可以进入了，只不过tomcat里面没有任何的东西，所以浏览器会显示Apache Tomcat页面。有显示，说明tomcat安装成功。</p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>如此服务器上的环境已经准备好了，现在就可以将web项目部署到服务器了。</p><h4 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h4><p>先将mysql数据库表在navicate导出来，将到处的<code>.sql</code>文件利用Xftp6放到服务器中。</p><p>这里我在<code>use/local</code>下新建了一个文件夹<code>mysqldata</code>将数据库文件放在了里面。</p><div>         <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/Xftp6MysqlFolder.png"></div><p>先创建出数据库，名字随意（最好和<code>.sql</code>文件一致）。创建完成之后查看一下是否创建成功。之后推出mysql运行放在服务器上的<code>.sql</code>文件。</p><pre class=" language-bash"><code class="language-bash">mysql -uroot -p*****<span class="token punctuation">(</span>你的密码<span class="token punctuation">)</span>CREATE DATABASE db_xxxx DEFAULT CHARACTER SET utf8<span class="token punctuation">;</span>show databases<span class="token punctuation">;</span>quitmysql -u root -p****（你的密码） --default-character-set<span class="token operator">=</span>utf8 db_xxx <span class="token operator">&lt;</span> /usr/local/mysqldata/db_xxxx.sql</code></pre><p>允许完成过后，可以先在终端中直接查询一下看是否成功，表中是否有数据。</p><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><p><strong>终端命令</strong></p><p>CMD 进入tomcat 的webapp下   ( 项目的webroot 中不会包含引用工程的内容 ，只有在tomcat下的WebApp中才会包含)</p><pre class=" language-bash"><code class="language-bash">jar vcf bagName.war <span class="token keyword">.</span> </code></pre><p>会在cmd的当前目录下生成war包 这个.是代表目录下的所有子文件夹也打包在内</p><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><p>Eclipse打war包其实也是相当方便的，右键项目名称然后<code>Export</code> ——&gt; <code>WAR file</code></p><p><code>Destination</code>是需要到处的WAR包的路径，到时候生成完成了，我们需要将这个WAR包放到服务器的Tomcat中</p><div>      <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/EclipseWarPackage.png"></div><h4 id="放入服务器"><a href="#放入服务器" class="headerlink" title="放入服务器"></a>放入服务器</h4><p>这个就不多赘述了，直接利用Xftp6将打好的WAR包<code>.War</code>后缀文件放到tomcat的<code>webapps</code>目录下。</p><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/WARpackageTOSever.png"></div><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>现在已经算是大功告成了，直接在浏览器中地址栏敲<code>ip:8080/projectname</code>就可以访问项目了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署上线 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-backup备份恢复</title>
      <link href="/2020/10/19/HexoBlogRecovery/"/>
      <url>/2020/10/19/HexoBlogRecovery/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一次电脑重置Hexo还原恢复</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>就在昨天，博主的电脑莫名其妙就崩了，蓝屏，开不了机。通过某技术手段（U盘）打开发现，里面什么也没有，连C盘都直接空了😱😱😱😱。这可真是神奇，什么都没给我留下。还好hexo之前用backup利用branch做了备份，要不然可真是😨😨😨😨😨“连个毛都不剩了”。（嗯！<a href="https://baike.baidu.com/item/%E6%9C%AA%E9%9B%A8%E7%BB%B8%E7%BC%AA/839102">未雨绸缪</a>总是好事😝😝😝😝）。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/doyouhavemao.gif"></p><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/computersystemcrash.png"></div>## 恢复<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>之前已经用hexo分支备份，我们首先需要电脑上下载git，node.js，配好ssh.</p><p>重置电脑删除了配置文件的环境变量，需要重新设置name和email。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name<span class="token operator">=</span><span class="token string">"你的名字"</span><span class="token function">git</span> config --global user.email<span class="token operator">=</span><span class="token string">"你的邮箱"</span></code></pre><p>私钥，生产后在github配置SSH,同样在<code>.ssh</code>文件下，将公钥粘到<code>key</code>里面。</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱"</span></code></pre><ul><li>-t 指定密钥类型，默认是rsa</li><li>-C 设置注释文字，比如用户名</li></ul><p>这里输入后弹出的信息，连按回车就可以。</p><p>测试是否连通，这里看自己个人有哪些部署，GitHub，Coding，Gitee</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span class="token function">ssh</span> -T git@git.coding.net<span class="token function">ssh</span> -T git@gitee.com</code></pre><h3 id="克隆到本地"><a href="#克隆到本地" class="headerlink" title="克隆到本地"></a>克隆到本地</h3><p>首先找一个空的文件夹将之前托管的项目拉下来，这里使用的GitHub Desktop工具(推荐)，也可以直接<code>clone</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:xxxxx/xxxxx.github.io.git<span class="token function">git</span> clone https://github.com/xxxxx/xxxxx.github.io.git</code></pre><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20201019170706.png"></div><p>拉取下来后切换到分支<code>backup</code>,因为这里才是我们的源文件，<code>master</code>我已经渲染生成好的文件。</p><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20201019170707.png"></div><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>在克隆的那个文件夹下输入如下命令恢复博客，这里我们不再需要<code>hexo init</code>了，因为我们不再是从零开始搭建的，要进入有<code>public</code>、<code>source</code>、<code>themes</code>文件的目录下执行。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli$ <span class="token function">npm</span> <span class="token function">install</span>$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git</code></pre><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20201019170708.png"></div><p>完成之后直接三连本地访问部署😆😆😆😆😆。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h4 id="指令无效"><a href="#指令无效" class="headerlink" title="指令无效"></a>指令无效</h4><pre class=" language-bash"><code class="language-bash">$ hexo s $ bash: hexo:command not foud</code></pre><p>这里我们将hexo的文件写入系统环境变量即可解决，找到<code>node_modules</code>目录。</p><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20201019170709.png">    <img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20201019170710.png"></div><p>完成之后当前终端可能依然会出现指令找不见的现象，另开一个终端执行hexo即可（或者重启）。</p><h3 id="Coding推送失败"><a href="#Coding推送失败" class="headerlink" title="Coding推送失败"></a>Coding推送失败</h3><p>如图（中间部分Error），这里只是GitHub推送上去了，Coding推送失败，检查自己的Coding SSH配置，重新部署。</p><div><img   src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/20201019170711.png"></div><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在代码托管平台利用分支备份文件避免突然一天电脑系统坏了<code>hexo</code>文件直接没了确实是一个不错的办法，但也要兼顾安全性问题。<code>public</code>公开别人也能看到你的<code>.md</code>文件，直接拷下来你的<code>scaffolds</code>、<code>source</code>、<code>themes</code>也就被别人看到了。</p><p><strong>办法</strong></p><ul><li>新建一个<code>private</code>私有仓连接源文件，每个手动git</li><li>硬盘备份（简单粗暴）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Coding SSL/TLS证书</title>
      <link href="/2020/10/13/HexoCodingSSL/"/>
      <url>/2020/10/13/HexoCodingSSL/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>站点Coding Pages SSL&#x2F;TLS证书到期，访问为不安全链接。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/PageIsNotSecurity.png" alt="Firefox访问为不安全链接"></p><h2 id="SSL与TLS"><a href="#SSL与TLS" class="headerlink" title="SSL与TLS"></a>SSL与TLS</h2><p>SSL：（Secure Socket Layer，安全套接字层），位于可靠的面向连接的网络层协议和应用层协议之间的一种协议层。SSL通过互相认证、使用数字签名确保完整性、使用加密确保私密性，以实现客户端和服务器之间的安全通讯。该协议由两层组成：SSL记录协议和SSL握手协议。</p><p>TLS：(Transport Layer Security，传输层安全协议)，用于两个应用程序之间提供保密性和数据完整性。该协议由两层组成：TLS记录协议和TLS握手协议。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>进入coding找到部署的项目（不得不说新改版的看着有点别扭），进入到<strong>持续部署</strong>的<strong>静态网站</strong>，这里不用新建，因为我们之前已经部署过了，点击<strong>旧版网站列表</strong>进入到以前部署的项目。进入后直接到<strong>设置</strong>下拉到自定义域名，点击<strong>申请证书</strong>（注意这里需要DNS停掉GitHub Pages 的解析）。直至证书状态变为<strong>正常</strong>即可。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/CodingPages.png"></p><p>绑定域名成功后，系统将会自动为其申请 SSL&#x2F;TLS 安全证书。（ SSL&#x2F;TLS 安全证书到期前一周，系统将自动续签。）</p><p>启用强制 HTTPS 访问后，任何尝试用 HTTP 协议访问你网站的请求都会被强制跳转到使用 HTTPS 加密协议访问，为保护数据安全。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/CodingPagesSSL.png"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>不安全链接已经消失，直接转到主站。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/PageIsSecurity.png" alt="FireFox访问安全"></p><h2 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h2><pre class=" language-bash"><code class="language-bash">acme:error:unauthorized: During secondary validation: Invalid response from http://xxxxxxx/.well-known/acme-challenge/u0F-eNkNn958JbxhnH0lyhGxS6d_FMLHWmIiiwF8P5k <span class="token punctuation">[</span>185.199.108.153<span class="token punctuation">]</span>: <span class="token string">"&lt;!DOCTYPE html>\n&lt;html>\n &lt;head>\n &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\n &lt;meta http-equiv=\"Co"</span></code></pre><p><strong>原因</strong></p><p>这种错误一般是 hexo 博客双线部署到 GitHub Pages 和 Coding Pages 过程中出现的，并且已经在域名 DNS 配置好了 GitHub 的域名解析，这种情况下，在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败。</p><p><strong>解决</strong></p><p>DNS停掉GitHub的解析再重新生成证书，申请成功后再开启解析。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/TencentCodingGitBubDNS.png" alt="腾讯云DNS解析DNSPod"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储系统</title>
      <link href="/2020/10/12/MemorySystem/"/>
      <url>/2020/10/12/MemorySystem/</url>
      
        <content type="html"><![CDATA[<h2 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h2><blockquote><p>计算机的主存储器不能同时满足存取速度快、存储容量大和成本低的要求，在计算机中必须有速度由慢到快、容量由大到小的多级层次存储器，以最优的控制调度算法和合理的成本，构成具有性能可接受的存储系统。</p></blockquote><h3 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h3><p><strong>为什么要进行层次划分</strong>？</p><p><strong>采用层次结构，形成存储体系，以满足用户高速度、大容量、低价位的需求。</strong></p><p>存储器分层：即不同容量、成本、功耗和速度的多种存储器构成有机结合的多级存储系统。构成多级存储系统的依据就是程序的局部性原理。</p><p> <strong>程序的局部性原理</strong></p><p>在某一段时间内频繁访问某一局部的存储器地址空间，而对此范围以外的地址空间则很少访问的现象称为<strong>程序的局部性原理</strong></p><ul><li>时间局部性：最近被访问的信息很可能还要被访问</li><li>空间局部性：最近被访问的信息邻近地址的信息也可能被访问</li></ul><p><strong>多级存储系统的组成</strong></p><p>正在执行的程序的指令和数据存储在CPU能直接访问的存储器中，这种侠义的存储器就是<strong>内存储器</strong>。内存储器速度高、容量小、价格高。由半导体器件构成。</p><p>为了扩大存储容量，在内存储器之外增加容量更大但访问速度稍慢的<strong>外存储器</strong>或者称为<strong>辅助存储器</strong>。相对而言，外存储器速度的容量大、价格便宜，可以由磁盘、存储器、光盘等非半导体器件或者固态半导体存储器构成。</p><p>CPU不能直接访问外存储器，外存储器的信息必须调入内存储器后才能由CPU处理。内存储器和外存储器构成了两级存储系统。</p><p><strong>cache：</strong>常规内存储器与CPU之间增加了速度更高但容量更小的半导体高速缓冲存储器，用于存放常规内存中正在使用的一些信息块的副本。</p><p>常规的内存被称为<strong>主存</strong>。这样，内存储器就分为<strong>cache</strong>和<strong>主存</strong>两部分，由此构成了三级存储系统。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E8%BE%85%E5%AD%98-%E4%B8%89%E7%BA%A7%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png"></p><p>对性能要求更高的系统还可以将cache分成一级cache和二级cache甚至多级cache。在由cache、主存、磁盘和磁带构成的多级存储体系中，存储容量、存储密度逐级提升，访问速度和价格逐级降低，构成金字塔式的存储结构。</p><table><thead><tr><th align="center">寄存器 cache</th><th align="center">CPU内</th></tr></thead><tbody><tr><td align="center"><strong>cache 主存储器</strong></td><td align="center"><strong>主板内</strong></td></tr><tr><td align="center"><strong>磁盘 光盘</strong></td><td align="center"><strong>主板外</strong></td></tr><tr><td align="center"><strong>磁带</strong></td><td align="center"><strong>离线</strong></td></tr></tbody></table><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>构成存储器的存储介质主要采用半导体和磁性材料。一个双稳态半导体电路或一个CMOS晶体管或磁性材料的存储元，均可以存储一位二进制代码。这个二进制代码位式存储器中最小的存储单元，称为<strong>存储位元</strong>。由若干个存储位元组成一个存储单元，然后再由多存储单元组成一个存储器。</p><p>分类根据存储材料和性能以及使用方法不同。</p><p><strong>存储介质</strong></p><p>主要构成内存</p><p>半导体存储器：通过高电平、低电平存储1、0。TTL（晶体管晶体管逻辑），集成度低、功耗高，速度快；MOS（金属氧化物半导体），集成度高，功耗低，速度快，计算机中的内存材质主要为MOS型。</p><p>主要构成外存</p><p>磁介质存储器：磁表面存储器，如磁盘、磁带，表面涂有磁层，利用磁化方向不同来存储0、1，要有磁头和磁载体；磁芯存储器（core memory），曾经作为计算机的内存被使用</p><p>光介质存储器：如光盘，利用激光、磁光材料完成。<br>电子介质存储器：体积小、可靠性高。</p><p><strong>存取方式</strong></p><p>随机存取存储器：任何存储单元的内容都能被随机存取，且存取时间和存储单元的物理位置无关。</p><p>顺序存取存储器：只能按某种顺序来存取，存取时间和存取单元的物理位置有关。</p><p>磁盘存储器则是办顺序（直接）存取存储器，沿磁道方向顺序存取，垂直半径方向随机存取。</p><p><strong>CPU能否直接访问（与CPU的耦合度）</strong></p><p>内存储器：也称为主存储器，简称内存或主存；内存可以直接被 CPU 访问，访问速度快，但是成本较高，能存储的信息量较少，因此内存一般用来存储计算机正在访问的程序或数据。</p><p>外存储器：也称为辅助存储器，简称外存或辅存；外存不能直接被CPU 访问，必须通过内存“中转”，访问速度慢，但是成本较低，能存储的信息量大可以脱机保存，因此外存一般用来存储暂时不访问的程序或数据。</p><p><strong>读写方式</strong></p><p>只读存储器（ORM）：工作过程中只能读出而不能写入</p><p>随机存取存储器（RAM）：工作过程中既能读出又能写出的半导体存储器</p><p><strong>信息易失性</strong></p><p>永久性存储器：指系统停电后存储器中的信息不丢失，例如外存储器和 ROM </p><p>非永久性存储器：指系统停电后所存储的信息会丢失的存储器，例如 RAM存储器</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><p>主存储器的主要性能指标：容量和速度</p><ul><li>存储容量：存储容量是指一个存储器中可存储的信息比特数。</li><li>存取时间：又称为存储器访问时间，是从存储器接收到读&#x2F;写命令开始到信息被读出或者写入完成所需要的时间，取决于存储机制的物理特性和寻址部件的结构。</li><li>存取周期（存储周期）：是再存储器连续读写过程中一次完整的存取操作所需要的时间，即CPU连续两次访问存储器的最小间隔时间。通常，存储周期略大于存取时间。</li><li>存储器带宽（数据传送速率，频率）：单位时间里存储器所存取的信息量，通常以位&#x2F;秒或字节&#x2F;秒作为度量单位。</li></ul><h2 id="主存储系统"><a href="#主存储系统" class="headerlink" title="主存储系统"></a>主存储系统</h2><p>主存储器系统由<strong>半导体只读存储器ROM</strong>和<strong>半导体随机读写存储器RAM</strong>构成。</p><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p>半导体只读存储器ROM（Read Only Memory）是指在一般情况下只能读出、不能写入的存储器，一般用来存放需要长期保存、不允许破坏的信息，例如操作系统的核心程序、计算机的基本输入输出系统等。根据制造工艺不同，只读存储器可以分为ROM、 PROM、 EPROM和E<sup>2</sup>PROM等 。</p><p><strong>掩模式只读存储器</strong></p><p>掩模式只读存储器（ROM）由工厂生产时一次性写入信息，不允许使用者做任何修改。这种只读存储器结构简单，可靠性高，价格便宜，但是灵活性差，不允许使用者做任何修改。</p><p><strong>可编程只读存储器</strong></p><p>可编程只读存储器（PROM，Programmable ROM）是允许用户一次性写入的只读存储器。优点是用户可以根据需要进行一次性写入，扩大了芯片的应用范围，但是一经写入就再不允许做任何修改。</p><p><strong>可擦除可编程只读存储器</strong></p><p>可擦除可编程只读存储器（EPROM，Erasible PROM）是可以用紫外线擦除、允许用户多次写入信息的只读存储器。EPROM在使用时，需要从电路板上拔下，在专用紫外线擦除器中擦除，因此，操作起来比较麻烦。一块芯片经过多次拔插之后，可能会是外部管脚损坏。另外，EPROM被擦除后可写的次数也是有限的，一块芯片往往使用时间也不太长。</p><p>EPROM 芯片常用浮栅型MOS 管作存储单元，新出厂的EPROM 每位均为“1”状态，对EPROM 的编程是用电信号控制将有关位由原来的“1”改写为“0”的过程。</p><p>对EPROM 的擦除则是用紫外光照射，即用高能光子将浮栅上的电子驱逐出去，使其返回基体，相应位由原来的“0” 变为“1”的过程。</p><p>由于紫外光通过 EPROM 芯片的石英窗口对整 个芯片的所有单元都发生作用，所以，一次擦除便使整个芯片恢复为全“1”状态，部分擦除是不行的。</p><p><strong>电可擦可编程只读存储器</strong></p><p>电可擦可编程只读存储器（E<sup>2</sup>PROM，Electrically EPROM）是一种不用从电路板上拔下，而是直接再线直接用电信号进行擦除的EPROM芯片，加长了芯片的使用寿命。对其进行的编程也是在线的写操作，其他性能与EPROM类似。</p><p><strong>闪速存储器</strong></p><p>闪速存储器（Flash Memory）是一种新型的半导体存储器。闪速存储器具有非易失性，在断电时它也能保留存储内容，这使它优于需要持续供电来存储信息的易失性存储器，如静态和动态 RAM ；</p><p>闪速存储器具有电擦除性，可实现大规模电擦除。闪速存储器的擦除功能可迅速地清除整个器件中的所有内容，这一点优于传统的可修改字串的 E<sup>2</sup>PROM 。</p><p>闪速存储器的单元结构和它具有的 EPROM 基本特征使它的制造特别经济，能够实现较低成本，在密度增加时保持可测性，并具有可靠性，这几方面综合起来的优势是目前其他半导体存储器技术所无法比拟的。</p><p>闪速存储器是一种低成本、高可靠性的读写非易失性存储器。从功能上讲由于其随机存取的特点，闪速存储器也可看作是一种非易失的ROM，因此它为能够用于程序代码和数据存储的理想媒介。</p><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p>半导体随机读写存储器也称为半导体随机访问存储器，这是一种非永久性存储器，常用来作为计算机系统的主存储器。</p><p>半导体随机读写存储器又分为<strong>静态随机读写存储器</strong>和<strong>动态随机读写存储器</strong>。</p><p><strong>静态随机读写存储器(SRAM)</strong></p><p>六管静态存储元</p><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/六管静态存储元.png"></div><p>6 个 MOS 管 T 1 ~T 6 构成一个存储元，能存储一位二进制信息。<br>T1、T2 管构成存储一位二进制信息的双稳态触发器；<br>T3、T4 管是负载管，用来给T1、T2 管提供负载电流；<br>T5、T6 、T7、T8是门控管，其中T5、T6 作为行开关， T7、T8 作为共用的列开关</p><p>如何进行读写操作？</p><p>X 选择线用来选择整个一行的存储元，Y 选择线通过公用的T7、T8 管选择整个一列的存储元。只有位于一条X 选择线和一条Y 选择线交叉点上的存储元被选中，才可以对它进行读&#x2F;写操作。</p><p>如何保存0、1？</p><p>假定T1 管截止，T2 管导通，表示该存储元存储的是信息“1”；反之，如果T1 管导通，T2 管截止，表示该存储元存储的是信息“0”。</p><p><strong>动态随机读写存储器(DRAM)</strong></p><p>四管动态存储元</p><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/四管动态存储元.png"></div><p>四管的动态存储电路是将六管静态存储元电路中的负载管T3、T4 去掉而成的。</p><p>写操作：当T5、T6 截止时，靠T1、T2 管栅极电容的存储作用，在一定时间内可保留所写入的信息。</p><p>读操作：T5、T6 管导通时，存储的信息通过A、B 端向位线输出。</p><p>刷新操作：由于存储的信息电荷终究是有泄漏的，为防止存储的信息电荷泄漏而丢失信息，由外界按一定规律不断给栅极进行充电，补足栅极的信息电荷。</p><div>    <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/单管动态存储元.png"></div><p>单管动态存储元</p><p>单管动态存储元电路由一个管子T1 和一个电容C 构成。T1为字选控制管。</p><p>写入操作：字选择线为“1”使T1 管导通，要写“1”，在位线（数据线）上加高电位，经T1管对C充电；写“0”则在数据线上加低电位，使C上无电荷。</p><p>读出操作：字选择线为“1”使T1 管导通，存储在电容C 上的电荷，通过T1 输出到位线数据线上，通过读出放大器形成读“1”信号。反之，若原存“0”，则无泄放电流。因为读出时C电荷泄放，电位下降，所以是破坏性读出，在读出后应有重写操作刷新操作</p><table><thead><tr><th>名称</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>四管存储元电路</td><td>外围电路比较简单，刷新时不需要另加外部逻辑</td><td>管子多，占用的芯片面积大</td></tr><tr><td>单管存储元电路</td><td>原件数量少，集成度高</td><td>需要有高鉴别能力的读出放大器配合工作，外围电路比较复杂</td></tr></tbody></table><p><strong>动态RAM与静态RAM比较</strong></p><table><thead><tr><th></th><th>DRAM</th><th>SRAM</th></tr></thead><tbody><tr><td>存储原理</td><td>电容</td><td>触发器</td></tr><tr><td>集成度</td><td>高</td><td>低</td></tr><tr><td>芯片引脚</td><td>少</td><td>大</td></tr><tr><td>功耗</td><td>小</td><td>大</td></tr><tr><td>价格</td><td>低</td><td>高</td></tr><tr><td>速度</td><td>慢</td><td>快</td></tr><tr><td>刷新</td><td>有</td><td>无</td></tr></tbody></table><h2 id="辅助存储系统"><a href="#辅助存储系统" class="headerlink" title="辅助存储系统"></a>辅助存储系统</h2><p>计算机的主存储系统的存储容量是有限的，而且要扩充时成本较高，同时多数存储在主存储器中的内容都是暂时存储的，如果需要长期、大量的存储数据，可以使用辅助存储器进行存储。辅助存储器也称为“外存”，是和“内存”对应的存储设备，常用的辅助存储器采用磁存储技术、光存储技术和电子存储技术等。目前在个人计算机占主流地位的存储设备是磁介质设备。</p><h3 id="磁介质存储器"><a href="#磁介质存储器" class="headerlink" title="磁介质存储器"></a>磁介质存储器</h3><p>磁介质存储器是利用电磁转换进行存储的，常见的磁介质存储器有软磁盘、硬磁盘、磁带等。</p><p>特点：存储容量大，位成本低，信息保存时间长，读出时不需要再生。</p><ul><li><p>磁盘存储器</p><p>特点：可随机存取，访问速度快。</p></li><li><p>磁带存储器</p><p>特点：只能顺序存取，访问速度慢，主要用于脱机存储。</p></li></ul><h3 id="光介质存储器"><a href="#光介质存储器" class="headerlink" title="光介质存储器"></a>光介质存储器</h3><p>特点：记录密度大，存储容量大，没有磨损，可长期保存信息，误码率低。</p><p>只读型（CD-ROM）光盘：形变型记录方式</p><p>追记型（CD-R）光盘：形变型记录方式</p><p>可改写型光盘：磁光型、相变型记录方式</p><h3 id="电子介质存储器"><a href="#电子介质存储器" class="headerlink" title="电子介质存储器"></a>电子介质存储器</h3><p>特点：体积小、可靠性高、非易失性存储器。</p><p>USB闪存盘</p><p>以闪存芯片为存储介质</p><p>无需驱动器</p><p>由USB端口、主控芯片、FLASH闪存、PCB底板和外壳构成。</p><h2 id="主存储器的扩展与组织"><a href="#主存储器的扩展与组织" class="headerlink" title="主存储器的扩展与组织"></a>主存储器的扩展与组织</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM-Maven坐标</title>
      <link href="/2020/10/11/SSMMavenCoordinate/"/>
      <url>/2020/10/11/SSMMavenCoordinate/</url>
      
        <content type="html"><![CDATA[<blockquote><p> pom.xml</p></blockquote><pre class=" language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--spring相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--servlet和jsp--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis相关--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> MyBatis </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode</title>
      <link href="/2020/09/17/LeetCode0/"/>
      <url>/2020/09/17/LeetCode0/</url>
      
        <content type="html"><![CDATA[<h2 id="Leetcode9-回文数"><a href="#Leetcode9-回文数" class="headerlink" title="Leetcode9 回文数"></a>Leetcode9 回文数</h2><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例 1:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 121输出: <span class="token boolean">true</span></code></pre><p><strong>示例 2:</strong></p><pre class=" language-bash"><code class="language-bash">输入: -121输出: <span class="token boolean">false</span>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</code></pre><p><strong>示例 3:</strong></p><pre class=" language-bash"><code class="language-bash">输入: 10输出: <span class="token boolean">false</span>解释: 从右向左读, 为 01 。因此它不是一个回文数。</code></pre><p><strong>进阶:</strong></p><p>你能不将整数转为字符串来解决这个问题吗？</p><p><a href="https://leetcode-cn.com/problems/palindrome-number">链接</a></p><p><strong>题解</strong></p><p>利用从末位每位乘十相加等于原数来判断，负数直接排除，注意溢出。</p><pre class=" language-c"><code class="language-c">bool <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> init<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>temp<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        init<span class="token operator">=</span>init<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        temp<span class="token operator">/</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">return</span> init<span class="token operator">==</span>x<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Leetcode189-旋转数组"><a href="#Leetcode189-旋转数组" class="headerlink" title="Leetcode189 旋转数组"></a>Leetcode189 旋转数组</h2><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p><p>示例 1:</p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>1,2,3,4,5,6,7<span class="token punctuation">]</span> 和 k <span class="token operator">=</span> 3输出: <span class="token punctuation">[</span>5,6,7,1,2,3,4<span class="token punctuation">]</span>解释:</code></pre><pre class=" language-bash"><code class="language-bash">向右旋转 1 步: <span class="token punctuation">[</span>7,1,2,3,4,5,6<span class="token punctuation">]</span>向右旋转 2 步: <span class="token punctuation">[</span>6,7,1,2,3,4,5<span class="token punctuation">]</span>向右旋转 3 步: <span class="token punctuation">[</span>5,6,7,1,2,3,4<span class="token punctuation">]</span></code></pre><p>示例 2:</p><pre class=" language-bash"><code class="language-bash">输入: <span class="token punctuation">[</span>-1,-100,3,99<span class="token punctuation">]</span> 和 k <span class="token operator">=</span> 2输出: <span class="token punctuation">[</span>3,99,-1,-100<span class="token punctuation">]</span>解释: 向右旋转 1 步: <span class="token punctuation">[</span>99,-1,-100,3<span class="token punctuation">]</span>向右旋转 2 步: <span class="token punctuation">[</span>3,99,-1,-100<span class="token punctuation">]</span></code></pre><p>说明:</p><p>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。<br>要求使用空间复杂度为 O(1) 的 原地 算法。<br><a href="https://leetcode-cn.com/problems/rotate-array">链接</a></p><p><strong>题解</strong></p><p>第一能想到的就是循环k次，每次将数组的最后一位记录，再后一位用前一位代替，两个循环求解。运行超时。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> k <span class="token operator">%</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录最后一位</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> numsSize<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放在开头</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>三次旋转求解，利用k，分别将k的前部分逆置，后部分逆置，最后将数组整体逆置。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> k <span class="token operator">%</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>numsSize<span class="token operator">-</span>k<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>j <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意j的值</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前部分逆置</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> numsSize<span class="token operator">-</span>k<span class="token punctuation">,</span>j<span class="token operator">=</span>numsSize<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//后部分逆置</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>c    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>numsSize<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全部逆置</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Leetcode617-合并二叉树"><a href="#Leetcode617-合并二叉树" class="headerlink" title="Leetcode617 合并二叉树"></a>Leetcode617 合并二叉树</h2><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p><p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><p>示例 1:</p><pre class=" language-bash"><code class="language-bash">输入:     Tree 1                     Tree 2                            1                         2                                      / \                       / \                                    3   2                     1   3                               /                           \   \                            5                             4   7                  输出: 合并后的树:         3        / \       4   5      / \   \      5   4   7</code></pre><p>注意: 合并必须从两个树的根节点开始。<br><a href="https://leetcode-cn.com/problems/merge-two-binary-trees">链接</a></p><p><strong>题解</strong></p><p>递归求解，左子树或者右子树有一个为空则终止递归，返回值为合并树的根节点。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode &amp;#123; *     int val; *     struct TreeNode *left; *     struct TreeNode *right; * &amp;#125;; */</span><span class="token keyword">struct</span> TreeNode<span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span><span class="token keyword">struct</span> TreeNode<span class="token operator">*</span> t1<span class="token punctuation">,</span> <span class="token keyword">struct</span> TreeNode<span class="token operator">*</span> t2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> t2<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>t2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> t1<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//都不为空</span>     <span class="token keyword">struct</span> TreeNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> TreeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> TreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     head<span class="token operator">-></span>val <span class="token operator">=</span> t1<span class="token operator">-></span>val<span class="token operator">+</span>t2<span class="token operator">-></span>val<span class="token punctuation">;</span>     head<span class="token operator">-></span>left<span class="token operator">=</span><span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token operator">-></span>left<span class="token punctuation">,</span>t2<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>     head<span class="token operator">-></span>right<span class="token operator">=</span><span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token operator">-></span>right<span class="token punctuation">,</span>t2<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> Leetcode 简单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算方法</title>
      <link href="/2020/09/16/OperationMethod/"/>
      <url>/2020/09/16/OperationMethod/</url>
      
        <content type="html"><![CDATA[<h2 id="定点加减"><a href="#定点加减" class="headerlink" title="定点加减"></a>定点加减</h2><blockquote><p>负数用补码表示后就可以和正数一样来处理。这样运算器里只需要一个加法器就可以了，不必为了负数的加法运算再配一个减法器</p></blockquote><h3 id="补码加法"><a href="#补码加法" class="headerlink" title="补码加法"></a>补码加法</h3><p><strong>公式</strong></p><p>[X]<sub>补</sub>+[Y]<sub>补</sub>&#x3D;[X+Y]<sub>补</sub>   （mod 2<sup>n+1</sup>）</p><p>任意两数的补码之和等于该数之和的补码</p><p><strong>特点</strong></p><ul><li>符号位要作为数的一部分一起参与运算</li><li>要在模2<sup>n+1</sup>的意义下相加，即超过2<sup>n+1</sup>的进位要丢掉</li></ul><p><strong>例：x&#x3D;+1001，y&#x3D;+0101，求x+y</strong></p><p>[X]<sub>补</sub>&#x3D;01001 [Y]<sub>补</sub>&#x3D;00101   (第一位是符号位)</p><p>[X+Y]<sub>补</sub>&#x3D;X]<sub>补</sub>+[Y]<sub>补</sub>&#x3D;01110</p><p>x+y&#x3D;+1110          (正数去掉符号位，写上<code>+</code>)</p><p><strong>例：x&#x3D;+1001，y&#x3D; -0101，求x+y</strong></p><p>[X]<sub>补</sub>&#x3D;01001 [Y]<sub>补</sub>&#x3D;11011   (负数求补码，先求反码再末位加1)</p><p>[X+Y]<sub>补</sub>&#x3D;X]<sub>补</sub>+[Y]<sub>补</sub>&#x3D;00110   (1溢出)</p><p>x+y&#x3D;+0110          (PS:正数去掉符号位，写上<code>+</code>)</p><h3 id="补码减法"><a href="#补码减法" class="headerlink" title="补码减法"></a>补码减法</h3><p>负数的加法要利用补码话为加法来做，减法运算也要设法化为加法来做。之所以使用这种方法而补使用直接减法，是因为它可以和常规的加法运算使用同一加法器电路，从而简化了计算机的设计。</p><p><strong>公式</strong></p><p>[X-Y]<sub>补</sub>&#x3D;[X]<sub>补</sub>-[Y]<sub>补</sub>&#x3D;[X<sub>补</sub>]+[-Y]<sub>补</sub></p><p>[-Y]<sub>补</sub>&#x3D; ~[Y]<sub>补</sub>+2<sup>-n</sup> (对Y的补码包括符号位在内取反再末位加1)</p><p><strong>例：x&#x3D;+1101，y&#x3D;+0110，求x-y</strong></p><p>[x]<sub>补</sub>&#x3D;01101  [y]<sub>补</sub>&#x3D;00110   [-y]<sub>补</sub>&#x3D;11010  </p><p>[x-y]<sub>补</sub>&#x3D;[x]<sub>补</sub>+[-y]<sub>补</sub>&#x3D;00111  （1溢出）</p><p>x-y&#x3D; +0111</p><h3 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h3><p>在定点机器中，数的表示范围|x|&lt;2<sup>n</sup>-1。在运算过程中如出现大于字长绝对值的现象，称为<strong>溢出</strong>，在定点机中，运算过程中出现溢出时其结果是不正确的，故运算器必须能检测出溢出。</p><ul><li>两个正数相加结果大于机器字长所能表示的最大正数，正溢出。</li><li>两个负数相加结果大于机器字长所能表示的最小负数，负溢出。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E6%BA%A2%E5%87%BA%E6%A3%80%E6%B5%8B.png"></p><h4 id="双位符号法（变形补码）"><a href="#双位符号法（变形补码）" class="headerlink" title="双位符号法（变形补码）"></a>双位符号法（变形补码）</h4><p>[X]<sub>变形补</sub>+[Y]<sub>变形补</sub>&#x3D;[X+Y]<sub>变形补</sub></p><p>[[X]<sub>变形补</sub>]<sub>变形补</sub>&#x3D;[X]原</p><p>[X-Y]<sub>变形补</sub>&#x3D;[X+(-Y)]<sub>变形补</sub>&#x3D;[X]<sub>变形补</sub>+[-Y]<sub>变形补</sub></p><table><thead><tr><th align="center">运算结果的两位符号位</th><th align="center">溢出情况</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">未发生溢出，结果是一个正数</td></tr><tr><td align="center">11</td><td align="center">未发生溢出，结果是一个负数</td></tr><tr><td align="center">01</td><td align="center">正溢出</td></tr><tr><td align="center">10</td><td align="center">负溢出</td></tr></tbody></table><p><strong>特征</strong></p><ul><li>两个符号位都要看做数码一样参与运算</li><li>两位数进行2<sup>n+2</sup>为模的加法，即最高符号位上产生的进位要丢掉</li></ul><p><strong>例：x&#x3D;+1100，y&#x3D;+1000，求 x+y</strong></p><p>[X+Y]<sub>变形补</sub>&#x3D;[X]<sub>变形补</sub>+[Y]<sub>变形补</sub>&#x3D;<strong>00</strong>1100+<strong>00</strong>1000&#x3D;<strong>01</strong>0100 （前两位符号位）</p><p>两个符号位出现“01”，表示正溢出，即结果大于+2<sup>n</sup></p><p><strong>例：x&#x3D;-1100，y&#x3D;-1000，求x+y</strong></p><p>[X+Y]<sub>变形补</sub>&#x3D;[X]<sub>变形补</sub>+[Y]<sub>变形补</sub>&#x3D;<strong>11</strong>0100+<strong>11</strong>1000&#x3D;<strong>10</strong>1100 （前两位符号位）</p><p>两个符号位出现“10”，表示负溢出，即结果小于-2<sup>n</sup></p><h4 id="单符号位法"><a href="#单符号位法" class="headerlink" title="单符号位法"></a>单符号位法</h4><p>当最高有效位产生进位而符号位无进位时，产生正溢；当最高有效位无进位而符号位有进位时，产生负溢。</p><ul><li>符号位的进位判断溢出，最高<strong>数值</strong>位的进位叫做“进位入”记作C<sub>n-1</sub>,数值最高位有进位，C<sub>n-1</sub>&#x3D;1，没有进位C<sub>n-1</sub>&#x3D;0。</li><li>符号位产生的进位叫做“进位出”，记作C<sub>n</sub>。</li></ul><p><strong>V&#x3D;C<sub>n</sub>⊕C<sub>n-1</sub>(异或)</strong></p><table><thead><tr><th align="center">Cn</th><th align="center">Cn-1</th><th align="center">V</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">正数</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">负数</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">负溢</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">正溢</td></tr></tbody></table><h2 id="定点乘除"><a href="#定点乘除" class="headerlink" title="定点乘除"></a>定点乘除</h2><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>在定点计算机中，两个原码表示的数相乘的运算规则是：乘积的符号位由两数的符号位按异或运算得到，而乘积的数值部分则是两个正数相乘之积。</p><p>乘积符号的运算法则是：同号相乘为正，异号相乘为负。由于被乘数和乘数的符号组合只有四种情况（00，01，10，11），因此积的符号可按“异或”（按位加）运算得到。</p><p><strong>例</strong></p><p>设x&#x3D;0.1101，y&#x3D;0.1011。(x是被乘数，y是乘数)</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B9%98%E6%B3%95%E7%9A%84%E6%89%8B%E7%AE%97%E8%BF%87%E7%A8%8B.png"></p><p>运算过程与十进制乘法相似：从乘数y的最低位开始，若这一位为“1”，则将被乘数x写下；若这一位为“0”,则写下全0。然后再对乘数y的高一位进行乘法运算，其规则同上一步，不过这一位乘数的权与最低位乘数的权不一样，因此被乘数x要左移一位。以此类推，直到乘数各位乘完为止，最后把它们统统加起来，便得到最后乘积。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse操作</title>
      <link href="/2020/09/14/EclipseShortcutSettings/"/>
      <url>/2020/09/14/EclipseShortcutSettings/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Eclipse 是一个开放源代码的、基于Java的可扩展开发平台。就其本身而言，它只是一个框架和一组服务，用于通过插件组件构建开发环境。幸运的是，Eclipse 附带了一个标准的插件集，包括Java开发工具（Java Development Kit，JDK）。</p></blockquote><p>🚪 传送门：<a href="https://www.eclipse.org/">Eclipse下载</a></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><code>ctrl</code> + <code>2</code>  快捷创建变量</p><p><code>alt</code>  +  <code>/</code>  提示补全</p><p><code>ctrl</code> + <code>/</code>  注释当前行</p><p><code>ctrl</code> + <code>f</code>  查找 批量替换</p><p><code>ctrl</code> + <code>d</code>  删除当前行</p><p><code>ctrl</code> + <code>shift</code> + <code>f</code>  快速排版</p><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p>依次进入<code>Window</code> -&gt; <code>preferences</code> -&gt; <code>java</code> -&gt; <code>Editor</code> -&gt; <code>Content Assist</code></p><p>在右侧的Auto Activation子菜单里找到Auto activation triggers for Java,可以看到现在是一个<code>.</code>。将其替换为<code>.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code>。同时Auto activation delay(ms) 设置为 <code>0</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/eclipse0.png"></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>依次进入<code>Window</code> -&gt; <code>preferences</code> -&gt; <code>General</code> -&gt; <code>Appearance</code> -&gt; <code>Colors and Fonts</code>-&gt; <code>Text Font</code></p><p>弹出的框即可设置字体、字形、大小，选择完成后确定并<code>Apple</code>。</p><h2 id="Project-facet-Java-version-13-is-not-supported"><a href="#Project-facet-Java-version-13-is-not-supported" class="headerlink" title="Project facet Java version 13 is not supported"></a>Project facet Java version 13 is not supported</h2><p>从别处Import一个Java project之后，Eclipse提示“Project facet Java version xxx is not supported”。</p><p>这是版本JDK版本不匹配导致。选中项目-&gt;右键 -&gt; <code>Properties</code> -&gt;  <code>Project facet</code> -&gt; <code>Java</code>  在下拉菜单中选择自己使用的 JDK 版本即可。</p><h2 id="Multiple-annotations-found-at-this-line"><a href="#Multiple-annotations-found-at-this-line" class="headerlink" title="Multiple annotations found at this line"></a>Multiple annotations found at this line</h2><p>解决Eclipse中XML最上边报错Multiple annotations found at this line:</p><pre class=" language-xml"><code class="language-xml">- Referenced file contains errors (http://www.springframework.org/schema/aop/spring-aop-4.1.xsd). For more information, right click on the message in the Problems View and select "Show xml Details..."- Referenced file contains errors (http://www.springframework.org/schema/context/spring-context.xsd). For more information, right click on the message in the Problems View and select "Show  Details...</code></pre><p>依次进入<code>Window</code> -&gt; <code>preferences</code> -&gt; <code>XML</code> -&gt; <code>XML Files</code> -&gt; <code>Validation</code> 取消勾选:<code>Honour all XML schema locations</code>,这告诉eclipse,不再验证不同schema位置的相同命名空间的引用，仅以第一次找到的可验证的XML文件为结果。Apple若有弹窗选择是即可。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/eclipse1.png"></p><h2 id="注释作者日期"><a href="#注释作者日期" class="headerlink" title="注释作者日期"></a>注释作者日期</h2><p>依次进入 <code>Window</code> -&gt; <code>preferences</code>  -&gt; <code>Java</code>  -&gt; <code>CodeStyle</code>  -&gt; <code>Code Templates</code> -&gt; <code>types</code> 设置模板 user是电脑账号名，也可自定义，时间格式<code>$&#123;date&#125;</code>固定不可改变。</p><pre><code>/** * @author $&#123;user&#125; * @date $&#123;date&#125; * $&#123;tags&#125; */</code></pre><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/eclipse2.png"></p><h2 id="代码统计"><a href="#代码统计" class="headerlink" title="代码统计"></a>代码统计</h2><p>依次进入 <code>Search</code> -&gt; <code>file</code> Containing tex 输入 <code>\n</code>，勾选 Regular expression ,File name patterns 输入<code>*java</code>,当然也可以输入<code>*css,*html</code>（ 点击choose切换 ）等文件后缀，这里匹配的是你所要统计的文件。点击 <code>Search</code> 后，下方便有代码总数了。这是统计的工作区的所有项目，当然也可统计单个项目。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/eclipse3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis动态SQL</title>
      <link href="/2020/09/08/MybatisDynamicSQL/"/>
      <url>/2020/09/08/MybatisDynamicSQL/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mybatis 的映射文件，有些时候业务逻辑复杂时，我们的 SQL是动态变化的</p></blockquote><h2 id="动态SQL语句"><a href="#动态SQL语句" class="headerlink" title="动态SQL语句"></a>动态SQL语句</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>根据实体类的不同取值，使用不同的 SQL语句来进行查询。比如在 id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from User    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id!<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and username=#<span class="token entity" title="&#123;">&amp;#123;</span>username<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>当查询条件id和username都存在时，控制台打印的sql语句如下</p><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">//获得MyBatis框架生成的UserMapper接口的实现类</span>  UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User condition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    condition<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    condition<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByCondition</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>当查询条件只有id存在时，控制台打印的sql语句如下</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//获得MyBatis框架生成的UserMapper接口的实现类</span>UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User condition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>condition<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByCondition</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>循环执行sql的拼接操作，例如：SELECT * FROM USER WHERE id IN (1,2,5)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByIds<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from User    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>测试代码片段</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//获得MyBatis框架生成的UserMapper接口的实现类</span>UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>foreach标签的属性含义如下：</p><p>标签用于遍历集合，它的属性：</p><p>•collection：代表要遍历的集合元素，注意编写时不要写#{}</p><p>•open：代表语句的开始部分</p><p>•close：代表结束部分</p><p>•item：代表遍历集合的每个元素，生成的变量名</p><p>•sperator：代表分隔符</p><h3 id="SQL片段抽取"><a href="#SQL片段抽取" class="headerlink" title="SQL片段抽取"></a>SQL片段抽取</h3><p>SQL 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 SQL重用的目的。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--抽取sql片段简化编写--></span>&lt;sql id="selectUser" select * from User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span> where id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findByIds<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>array<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id in(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            #<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数制转换</title>
      <link href="/2020/09/07/NumberSystemConversion/"/>
      <url>/2020/09/07/NumberSystemConversion/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数制，也称为“计数制”，是用一组固定的符号和统一的规则来表示数值的方法。任何一个数制都包含两个基本要素：基数和位权。不同的数制可以进行进制转换。</p></blockquote><p>🚪传送门：<a href="https://tool.oschina.net/hexconvert">在线进制转换</a></p><h1 id="数制"><a href="#数制" class="headerlink" title="数制"></a>数制</h1><p>虽然计算机能极快地进行运算，但其内部并不像人类在实际生活中使用的十进制，而是使用只包含0和1两个数值的二进制。当然，人们输入计算机的十进制被转换成二进制进行计算，计算后的结果又由二进制转换成十进制，这都由操作系统自动完成，并不需要人们手工去做，学习汇编语言，就必须了解二进制（还有八进制&#x2F;十六进制）。</p><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><p><strong>基数</strong></p><p>R进制中只允许出现0，1，2…….R-1共R个数码，数码既可以是数，也可以是吗（如字母），则R就称为R进制的基数。</p><p><strong>位权</strong></p><p>R进制中，不同位置的1所表示的值不同，位号为i的1表示R^i，R^i称为位权。</p><p><strong>进制规则</strong></p><p>进位规则是指何种情况下向高位进位。R进制中，对位加法满R就应向高位进位，即逢R进一。</p><h2 id="数制的相互转换"><a href="#数制的相互转换" class="headerlink" title="数制的相互转换"></a>数制的相互转换</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E6%95%B0%E5%88%B6%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2.png" alt="数制的相互转换"></p><p><strong>十进制转二进制：</strong>整数部分除基数（2）取余，小数部分乘基数（2）取整。</p><p><strong>十进制转八进制：</strong>整数部分除基数（8）取余，小数部分乘基数（8）取整。</p><p><strong>十进制转十六进制：</strong>整数部分除基数（16）取余，小数部分乘基数（16）取整。</p><p><strong>其他进制转十进制：</strong>二进制，八进制，十六进制转十进制按权相加。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E6%95%B4%E6%95%B0%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="整数"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%B0%8F%E6%95%B0%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="小数"></p><p><strong>二进制转八进制：</strong>三位分一组，每三位进制数相当于一位8进制数。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%AB%E8%BF%9B%E5%88%B6.png" alt="二进制转八进制"></p><p><strong>八进制转二进制：</strong>每位八进制数转换为相应的三位二进制数。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%85%AB%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="八进制转二进制"></p><p><strong>二进制转十六进制：</strong>四位分一组，每四位二进制数相当于一位十六进制数。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6.png" alt="二进制转十六进制"></p><p><strong>十六进制转二进制：</strong>每位十六进制数转换为相应四位二进制数。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="十六进制转二进制"></p><p><strong>常见的一些数值表示及用法</strong></p><ol><li>（100…0）2 &#x3D; 2N：表示 1 后面有 N 个 0 的二进制整数。</li><li>（111…1）2 &#x3D; 2N+1-1：表示共有 N+1 个 1 的二进制整数。</li><li>（0.0…01）2 &#x3D; 2-N：表示小数点后共有N-1 个 0 的二进制纯小数。</li><li>（0.1…11）2 &#x3D; 1-2-N：表示 小数点后共有N 个 1 的二进制纯小数。</li><li>（111…1）2 -（X1X2…XN）2  &#x3D;  （X1X2…XN）2：表示共有N 个 1 的二进制整数减去一个N 位的二进制整数，结果是将减数按位取反。</li><li>（0.111…1）2 -（0.X1X2…XN）2  &#x3D;  （0.X1X2…XN）2：表示共有 N 个 1 的二进制纯小数减去一个小数部分有N 位的二进制纯小数，结果是将减数的小数部分按位取反。</li><li>​二进制数左移K 位，相当于这个数乘以 2K。</li><li>​二进制数右移K 位，相当于这个数除以</li></ol><h2 id="数值数据描述"><a href="#数值数据描述" class="headerlink" title="数值数据描述"></a>数值数据描述</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E6%95%B0%E5%80%BC%E6%95%B0%E6%8D%AE%E6%8F%8F%E8%BF%B0.png" alt="数值数据描述"></p><h3 id="无符号数和有符号数"><a href="#无符号数和有符号数" class="headerlink" title="无符号数和有符号数"></a>无符号数和有符号数</h3><p><strong>无符号数（unsigned）</strong></p><ul><li>数据与数值相等，数据本身的N+1个二进制比特位全部用来表示其数值，没有符号位。</li><li>通常用于表示地址，作为计数器等用途。</li><li>范围[0，2^(N+1) -1]</li></ul><p><strong>有符号数（signed）</strong></p><p>有符号数的数据分为符号和数值两个部分，N+1位有符号数的二进制比特位最左一位用于表示符号，其余N位用于表示数值。有符号数中涉及两个概念：<strong>真值</strong> 和 <strong>机器数</strong>。真值是带符号的数，即平时生活中数的表达方式。机器数是有符号数的数值化后在计算机存储中的数，是一个0、1序列。</p><ol><li>符号的数值化：<code>+</code>用<code>0</code>表示，<code>-</code>用<code>1</code>表示。</li><li>数值编码：多种方案，如源码，反码，补码，移码等。</li><li>小数点的表示：隐藏，不表示出来，只是事先约定好即可。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0.png" alt="有符号数"></p><h3 id="定点数和浮点数"><a href="#定点数和浮点数" class="headerlink" title="定点数和浮点数"></a>定点数和浮点数</h3><h4 id="定点数的表示"><a href="#定点数的表示" class="headerlink" title="定点数的表示"></a>定点数的表示</h4><p>小数点固定在某一位置的数为定点数，有两种格式，当小数点位于数符和第一数值位之间时，计算机内的数位纯小数；当小数点位于数值最后时，计算机内的数位纯整数。采用定点的计算叫做定点机，数值部分的位数N决定了定点机种数的表示范围。在定点机中，由于小数点的位置固定不变，故当计算机处理的数不是纯小数或纯整数时，必须乘上一个比例因子，否则会产生“溢出”。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%AE%9A%E7%82%B9%E6%95%B0.png" alt="定点数"></p><h4 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h4><p>实际上计算机中处理的数不一定是纯小数或纯整数，因此都不能直接用定点小数或定点整数表示，所以要用浮点数表示。</p><ul><li>浮点数即小数点的位置可以浮动的数。</li><li>将尾数最高位为1的浮点数称作规格化数。</li><li>左规与右规。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E6%B5%AE%E7%82%B9%E6%95%B0.png" alt="浮点数"></p><h4 id="浮点数的表示形式"><a href="#浮点数的表示形式" class="headerlink" title="浮点数的表示形式"></a>浮点数的表示形式</h4><p>浮点数在计算机中的形式如图 所示，采用这种数据格式的计算机叫做浮点机。浮点数由阶码和尾数两部分组成。阶码是整数，阶符和阶码的位数 p+1 合起来反映浮点数的表示范围及小数点的实际位置；尾数是小数，其位数反映了浮点数的精度；尾数的符号代表浮点数的正负。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%BD%A2%E5%BC%8F.png" alt="浮点数的表示形式"></p><h4 id="浮点数的规格化"><a href="#浮点数的规格化" class="headerlink" title="浮点数的规格化"></a>浮点数的规格化</h4><p>为了提高浮点数的精度，其尾数必须为规格化数。如果不是规格化数，就要通过修改阶码并同时左右移尾数的办法，使其变成规格化数。将非规格化数转换成规格化数的过程叫做规格化。对于基数不同的浮点数，因其规格化数的形式不同，规格化过程也不同。</p><p>当基数为 2 时，尾数采用带符号的二进制数表示时，尾数最高数值位为 1 的数为规格化数。规格化时， 尾数左移一位，阶码减 1，这种规格化叫做向左规格化，简称左规；尾数右移一位，阶码加 1，这种规格化叫做向右规格化，简称右规。</p><p>浮点机中基数一旦确定就不再变了，而且基数是隐含的，故不同基数的浮点数其表示形式完全相同。但基数不同，对数的表示范围和精度等都受影响。一般来说，基数R 越大，可表示的浮点数范围越宽，而且所表示的数其个数越多。但R 越大，浮点数的精度反而下降。如 R&#x3D;16 的浮点数，因其规格化数的尾数最高三位可能出现零，故与其尾数位数相同的 R&#x3D;2 的浮点数相比，后者可能比前者多三位精度。</p><h4 id="数值范围和数据精度"><a href="#数值范围和数据精度" class="headerlink" title="数值范围和数据精度"></a>数值范围和数据精度</h4><p>由于计算机硬件限制只能用有限的二进制比特位来表示数据（假定为 N+1 位），因此对于数值数据而言，计算机的数值数据不可能把所有的数（无论整数、小数还是一般意义的实数）都表示出来，从而存在它能够表示的数值范围和数据精度。这里需要注意的是只要提到二进制都会有这样一个问题，这个二进制数有多少位，这个位数将决定数值的范围和精度。一般情况下，在出现的数据运算中出现的任一个数都要保持这种位数，不能任意减少，更不能增加。关于数值范围和数据精度有以下几个概念。</p><ul><li>数值范围：一种类型的数据所能表示的最大值和最小值。 </li><li>数据精度：一种类型的数据所能表示的有效数据位的位数。</li><li>溢出：超出数据表示的范围称为溢出。</li><li>正溢：定点数中大于所能表示的最大正数。</li><li>负溢：定点数中小于所能表示的最小负数。</li></ul><h2 id="定点数的编码方案"><a href="#定点数的编码方案" class="headerlink" title="定点数的编码方案"></a>定点数的编码方案</h2><p>假定用N+1个二进制比特来表示定点数，最左为符号位，右N位为数值位，定点数的表示方法为原码表示法、反码表示法和补码表示法。</p><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>原码表示法把数值的绝对值转换成二进制以后在最高位加上其符号的数值表示，原数值的符号位<code>+</code>和<code>-</code>分别用<code>0</code>和<code>1</code>表示。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%8E%9F%E7%A0%81%E6%95%B4%E6%95%B0.png" alt="整数原码"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%8E%9F%E7%A0%81%E5%B0%8F%E6%95%B0.png" alt="小数原码"></p><p><strong>0的原码不唯一</strong></p><p>需要注意的是 0 的编码有“+0”和“-0”的区别：[+0]原&#x3D;00000000，[-0]原&#x3D;10000000。也就是说，0 的原码不唯一。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/0%E7%9A%84%E5%8E%9F%E7%A0%81%E4%B8%8D%E5%94%AF%E4%B8%80.png" alt="0的原码不唯一"></p><h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>反码表示法对数的处理过程与数值的符号有关，如果为正数则其编码与原码相同；如果为负数把原码的符号位不变，其他位（数据位）取反。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%8F%8D%E7%A0%81%E6%95%B4%E6%95%B0.png" alt="整数反码"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%8F%8D%E7%A0%81%E5%B0%8F%E6%95%B0.png" alt="小数反码"></p><p><strong>0的反码不唯一</strong></p><p>其中 0 的编码不一致的问题仍然存在，其编码为：[+0]反&#x3D;00000000，[-0]反&#x3D;11111111。0 的反码不唯一！</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/0%E7%9A%84%E5%8F%8D%E7%A0%81%E4%B8%8D%E5%94%AF%E4%B8%80.png" alt="0的反码不唯一"></p><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>补码表示法对数的处理过程与数值的符号有关，如果位正数则其编码与原码相同，如果位负数则在反码的最末位加上1，计算所得到的编码即为其的补码。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E8%A1%A5%E7%A0%81%E6%95%B4%E6%95%B0.png" alt="整数补码"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E8%A1%A5%E7%A0%81%E5%B0%8F%E6%95%B0.png" alt="小数补码"></p><p><strong>0的补码唯一</strong></p><p>对 0 编码时，[+0]补&#x3D;00000000，[-0]补&#x3D;00000000。由此可见，0 的补码是唯一的！</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/0%E7%9A%84%E8%A1%A5%E7%A0%81%E5%94%AF%E4%B8%80.png" alt="0的补码唯一"></p><p><strong>补码的性质</strong></p><p>已知[X]补，求[X]原、[-X]补、[2X]补、[X&#x2F;2]补的方法。</p><ul><li>[X]原&#x3D; [X]补（正数），[X]原&#x3D; [[X]补]补（负数）</li><li>[-X]补&#x3D; [X]补连同符号位一起按位取反，末尾加1</li><li>[2X]补&#x3D; [X]补连同符号位一起左移一位，右边补0（符号位不能变）</li><li>[X&#x2F;2]补&#x3D; [X]补连同符号位一起右移一位，左边补符号位（舍去）</li></ul><p><strong>变形补码</strong></p><p>变形补码是实质是双符号位补码，只需要将补码的符号位多写一位即可。变形补码主要用于方便判断运算是否溢出。</p><h3 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h3><p>将一个数的补码的符号位取反所得的编码即为其移码。移码只用于表示定点整数。</p><p>移码中 0 的编码是：[+0]移&#x3D;10000000，[-0]移&#x3D;10000000。0 的移码表示是唯一的！ </p><p>移码表示的整数可直接比较大小，通常用于表示浮点数的阶码，便于浮点数运算。</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>最高位为符号位，书写上用<code>,</code>（整数）或<code>.</code>（小数）将数值部分和符号位隔开。</li><li>对于正数，原码 &#x3D; 补码 &#x3D; 反码 。</li><li>对于负数，符号位为1，（补码）其数值部分原码除符号位外每位取反末位加1；（反码）原码出符号位外每位取反。</li></ul><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>假设机器字长为8，符号位取1位，数据位取7位，求+10和-10的原码、反码、补码、移码</p><table><thead><tr><th align="center"></th><th align="center">+10</th><th align="center">-10</th></tr></thead><tbody><tr><td align="center">二进制形式</td><td align="center">+000101</td><td align="center">-0001010</td></tr><tr><td align="center">原码</td><td align="center">0 000101</td><td align="center">1 0001010</td></tr><tr><td align="center">反码</td><td align="center">0 000101</td><td align="center">1 1110101</td></tr><tr><td align="center">补码</td><td align="center">0 000101</td><td align="center">1 1110110</td></tr><tr><td align="center">移码</td><td align="center">1 000101</td><td align="center">0 1110110</td></tr></tbody></table><p>假设机器字长为8，符号位取1位，数据位取7位，求+0.625和-0.625的原码、反码、补码</p><table><thead><tr><th align="center"></th><th align="center">+0.625</th><th align="center">-0.625</th></tr></thead><tbody><tr><td align="center">二进制形式</td><td align="center">+0.1010000</td><td align="center">-0.1010000</td></tr><tr><td align="center">原码</td><td align="center">0.1010000</td><td align="center">1.1010000</td></tr><tr><td align="center">反码</td><td align="center">0.1010000</td><td align="center">1.0101111</td></tr><tr><td align="center">补码</td><td align="center">0.1010000</td><td align="center">1.0110000</td></tr></tbody></table><h2 id="十进制数的编码"><a href="#十进制数的编码" class="headerlink" title="十进制数的编码"></a>十进制数的编码</h2><h3 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h3><p>用二进制代码来为十进制数编码，即是用若干位二进制的编码来表示进制的每一个数码0~9，一般用四位二进制来表示一位十进制，这样，就可以在只识别二进制的编码来表示计算机中利用十进制来表示的数值。</p><h3 id="BCD码的编码方案"><a href="#BCD码的编码方案" class="headerlink" title="BCD码的编码方案"></a>BCD码的编码方案</h3><p>BCD码实质都是利用四位二进制来表示一位十进制数码，方案很多，按照其编码是否根据特定的权值构成，分为<code>有权码</code>和<code>无权码</code>。有权码有<code>8421码</code>、<code>2421码</code>和<code>5421</code>码等编码方式，通常用得最多的就是<code>8421码</code>，所以一般BCD如果不特殊说明就是指<code>8421</code>码。</p><p><code>无权码</code>有余3码和格雷码等编码方式。余3码的编码方式就是在8424码的编码上加上3做数值计算得到的编码。格雷码的主要特点为任何两组相邻码子中只有一位二进制不同，它用多种编码方案。一种方案为8421码加一个前导0，然后相邻两位异或得到。</p><table><thead><tr><th align="center">十进制数码</th><th align="center">8421码</th><th align="center">余3码</th><th align="center">格雷码</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0000</td><td align="center">0011</td><td align="center">0000</td></tr><tr><td align="center">1</td><td align="center">0001</td><td align="center">0100</td><td align="center">0001</td></tr><tr><td align="center">2</td><td align="center">0010</td><td align="center">0101</td><td align="center">0011</td></tr><tr><td align="center">3</td><td align="center">0011</td><td align="center">0110</td><td align="center">0010</td></tr><tr><td align="center">4</td><td align="center">0100</td><td align="center">0111</td><td align="center">0100</td></tr><tr><td align="center">5</td><td align="center">0101</td><td align="center">1000</td><td align="center">0111</td></tr><tr><td align="center">6</td><td align="center">0110</td><td align="center">1001</td><td align="center">0101</td></tr><tr><td align="center">7</td><td align="center">0111</td><td align="center">1010</td><td align="center">0100</td></tr><tr><td align="center">8</td><td align="center">1000</td><td align="center">1011</td><td align="center">1100</td></tr><tr><td align="center">9</td><td align="center">1001</td><td align="center">1100</td><td align="center">1101</td></tr></tbody></table><h1 id="文本数据描述"><a href="#文本数据描述" class="headerlink" title="文本数据描述"></a>文本数据描述</h1><h3 id="ASCLL码"><a href="#ASCLL码" class="headerlink" title="ASCLL码"></a>ASCLL码</h3><blockquote><p>🚪传送门： <a href="http://www.litefeel.com/tools/ascii.php">ascll码表在线查询</a></p></blockquote><p>ASCII是由电报代码发展而来的。它的第一个商业用途是作为贝尔数据服务公司推广的七位电传打字机代码。ASCII标准的工作始于1960年10月6日，美国标准协会(ASA)(现为美国国家标准协会或ANSI) X3.2小组委员会的第一次会议。该标准的第一版于1963年出版， 在1967年进行了重大修订，并在1986年进行了最新更新。 与早期的电报代码相比，建议的贝尔代码和ASCII都是为了更方便地对列表进行排序(即按字母顺序排列)，并为电传打字机以外的设备增加了功能。<br>目前使用最广泛的英文字符集及其编码是ASCII 字符集和ASCII 码（ASCII 是 American Standard Code for Information Interchange 的缩写）， 它同时也被国际标准化组织（ International Organization for Standardization, ISO）批准为国际标准。<br>基本的 ASCII 字符集共有 <code>128 个字符</code>，其中有 <code>96 个可打印字符</code>，包括常用的字母、数字、标点符号等，另外还有 <code>32 个控制字符</code>。标准 ASCII 码使用 7 位二进制数对字符进行编码，对应的 ISO 标准为 ISO646 标准。</p><p>计算机基本处理单位为字节（1Byte&#x3D;8bit），ASCLL码仍以一个字节来存放每，每一个字节中多出的一位（最高位）在计算机内部通常保持为0，可用于奇偶校验。</p><h3 id="汉字的编码"><a href="#汉字的编码" class="headerlink" title="汉字的编码"></a>汉字的编码</h3><p>汉字编码为汉字设计的一种便于输入计算机的代码。由于电子计算机现有的输入键盘与英文打字机键盘完全兼容。因而如何输入非拉丁字母的文字（包括汉字）便成了多年来人们研究的课题。汉字信息处理系统一般包括编码、输入、存储、编辑、输出和传输。根据应用目的的不同，汉字编码分为外码、交换码、机内码和字形码。 </p><h3 id="输入码"><a href="#输入码" class="headerlink" title="输入码"></a>输入码</h3><p>输入码也叫外码，是用来将汉字输入到计算机中的一组键盘符号。英文字母只有 26 个，可以把所有的字符都放到键盘上，而使用这种办法把所有的汉字都放到键盘上，是不可能的。所以汉字系统需要有自己的输入码体系，使汉字与键盘能建立对应关系。目前常用的输入码有拼音码、智能全拼输入法和五笔字型输入法。</p><h3 id="交换码"><a href="#交换码" class="headerlink" title="交换码"></a>交换码</h3><p>计算机内部处理的信息，都是用二进制代码表示的，汉字也不例外。而二进制代码使用起来是不方便的，于是需要采用信息交换码。我国使用国标码，国标码字符集中收集了常用汉字和图形符号 7445 个，其中图<br>形符号 682 个，汉字 6763 个，按照汉字的使用频度分为两级，第一级为常用汉字 3755 个，第二级为次常用汉字 3008 个。为了避开 ASCII 字符中的不可打印字符 0100001-1111110（十六进制为 21-7E），国标码表示汉字的范围为 2121-7E7E（十六进制）。</p><p>区位码是国标码的另一种表现形式，把国标GB2312-80 中的汉字、图形符号组成一个 94×94 的方阵， 分为 94 个“区”，每区包含 94 个“位”，其中“区”的序号由 01 至 94，“位”的序号也是从 01 至 94。94 个区中<br>位置总数＝94×94 ＝8836 个，其中 7445 个汉字和图形字符中的每一个占一个位置后，还剩下 1391 个空位，<br>这 1391 个位置空下来保留备用。所以给定“区”值和“位”值，用四位数字就可以确定一个汉字或图形符号， 其中前两位是“区”号，后两位是“位”号。</p><ul><li><p>01-15 区：是各种图形符号、制表符和一些主要国家的语言字母，其中 01–09 区为标准符号区，共有682 个常用符号。</p></li><li><p>10-15 区：为自定义符号区，可留作用户自己定义。</p></li><li><p>16-55 区：是一级汉字区，共有 3755 个常用汉字，以拼音为序排列。</p></li><li><p>56-87 区：是二级汉字区，共有 3008 个次常用汉字，以部首为序排列。</p></li><li><p>88-94 区：自定义汉字区，可留作用户自己定义。</p></li></ul><h3 id="机内码"><a href="#机内码" class="headerlink" title="机内码"></a>机内码</h3><p>每一个汉字确定的二进制代码，既把国标码的每一个字节的首位置1（为了解决和ASCLL码的冲突）。</p><h3 id="字形码"><a href="#字形码" class="headerlink" title="字形码"></a>字形码</h3><p>汉字的输出码，输出汉字时都采用图形方式，无论汉字的笔画多少，每个汉字都可以写在同样大小的方块中。</p><h3 id="区位码、国标码和汉字内码"><a href="#区位码、国标码和汉字内码" class="headerlink" title="区位码、国标码和汉字内码"></a>区位码、国标码和汉字内码</h3><p>汉字的区位码的区号和位号各占一个字节，区号和位号都是用十进制表示的。汉字的国标码是用 4 位<br>的十六进制数描述的。汉字在计算机内用两个字节存储，即汉字的内码是 16 位二进制，但是为了书写方便还是用十六进制。<br>汉字的机内码、国际码和区位码之间的关系是：<br>（汉字的十进制区号）D &#x3D;（国标码的高两位）H –（20）H<br>（汉字的十进制位号）D &#x3D;（国标码的低两位）H –（20）H<br>（汉字的内码）H &#x3D; （国标码）H+ （8080）H<br>例 2.10：“啊”字的国标码为 3021H（可以参考GB2312-80 文档）。<br>它的区位码为 3021H – 2020H &#x3D; 1001H，即它在第 16 区，第 01 位。它在计算机内部的存储的内码为：3021H + 8080H &#x3D; B0A1H。</p><h1 id="其他信息形式的表示"><a href="#其他信息形式的表示" class="headerlink" title="其他信息形式的表示"></a>其他信息形式的表示</h1><p>计算机内任何形式的信息最终都将转换为二进制数据进行存储，对于较复杂的信息形式都采用的各自领域的编码形式，也可以说成定义了不同的数据结构，使顺序的二进制数据不同部分表述不同意义。</p><p><strong>图像</strong></p><ul><li>BMP：位图格式</li><li>GIF：图形交换格式</li><li>JPEG：有损压缩格式</li></ul><p><strong>音频</strong></p><ul><li><p>采样率和采样大小</p><ul><li>采样的过程就是抽取某点的频率值</li><li>采样率：采样的频率</li><li>采样大小：采样频率的能量值并量化</li></ul></li><li><p>有损与无损</p><ul><li>相对自然界的信号，任何数字音频编码方案都是有损的</li><li>PCM约定俗成了无损编码</li></ul></li><li><p>PCM编码：音质好，体积大</p></li><li><p>WAVE：较高音质，音乐编辑创作的首选格式</p></li></ul><p><strong>视频</strong></p><ul><li>FLC：无声时代</li><li>AVI：音频视频交叉存取格式</li><li>MPEG编码</li><li>流媒体：MPEG-4，便下载边播放</li></ul><h1 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h1><p>计算机对数据进行传送、存储和操作的过程中，都有可能由于硬件故障、软件错误或信息干扰等原因而导致数据出错。为了有效地防止、减少或避免错码现象，就必须采取相应的技术手段来解决这个问题。校验码就是解决这一问题的主要手段。<br>数据进行传送、存储和操作的过程中可能出现的问题包括代码是否出错了、错在什么地方以及如何纠正。<br>校验码分为两类：一类为<code>检错码</code>，即检查代码是否出错，但不能确定何处出错，不能修改；另一类为<code>纠错码</code>，即不仅能检查出错误，还能定位错误并纠正。常用的校验码有奇偶校验码、海明码、循环冗余码CRC 等。</p><h3 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h3><p>奇偶校验码是奇校验码和偶校验码的统称，是一种最基本的检错码。奇偶校验码是由 n-1 位信息元和1 位校验元组成，可以表示成为（n，n-1）。如果是奇校验码，在附加上一个校验元以后，码长为 n 的码字中“1”的个数为奇数个；如果是偶校验码，在附加上一个校验元以后，码长为 n 的码字中“1”的个数为偶数个。</p><p>例 2.14：被校验的代码为 1000001，则奇偶校验码分别为</p><p>  奇校验码：11000001（最左位为校验位）</p><p>  偶校验码：01000001（最左位为校验位）</p><h3 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h3><p>海明码是由 R.HmIMI1ing 在 1950 年首次提出的，它是一种可以纠正一位差错的编码。可以借用简单奇偶校验码的生成原理来说明海明码的构造方法。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统</title>
      <link href="/2020/08/31/PrinciplesOfComputerComposition/"/>
      <url>/2020/08/31/PrinciplesOfComputerComposition/</url>
      
        <content type="html"><![CDATA[<blockquote><p>计算机组成指的是系统结构的逻辑实现，包括机器机内的数据流和控制流的组成及逻辑设计等。主要分为五个部分：控制器，运算器，存储器，输入设备，输出设备。</p></blockquote><h2 id="计算机的由来"><a href="#计算机的由来" class="headerlink" title="计算机的由来"></a>计算机的由来</h2><p>第一台真正意义上的电子数字计算机ENIAC（Electronic Numerical Integrator And Compute）是在美国宾夕法尼亚大学诞生的，标志着信息时代的到来。ENIAC长30.48米，宽6米，高2.4米，占地面积约170平方米，30个操作台，重达30英吨，耗电量150千瓦，造价48万美元。它包含了17,468根真空管，电子管7,200根晶体二极管，1,500 个中转，70,000个电阻器，10,000个电容器，1500个继电器，6000多个开关，计算速度是每秒5000次加法或400次乘法，是使用继电器运转的机电式计算机的1000倍、手工计算的20万倍。</p><p>冯·诺依曼计算机（von Neumann machine），使用冯·诺伊曼体系结构的电子数字计算机。他的精髓贡献是<strong>二进制思想</strong>与<strong>程序内存思想</strong>。</p><p>冯诺依曼：现代电子计算机与博弈论的重要创始人，被后人称为现代计算机之父、博弈论之父。</p><p>图灵：英国数学家、逻辑学家，被称为计算机科学与人工智能之父，以他名字命名的图灵奖被喻为计算机界的诺贝尔奖。</p><p><strong>冯诺伊曼机的特点</strong></p><ul><li>计算机由运算器、控制器、存储器、输入设备和输出设备五大部件组成。</li><li>数据和指令均以二进制代码表示，二进制的采用极大简化了逻辑电路。</li><li>引进存储程序的概念，采用存储程序的方式，程序和数据都放在同一个存储器中，指令和数据一样可以送到运算器中进行运算，即由指令组成的程序是可修改的。</li><li>指令由操作码和地址码组成。</li><li>指令在存储器中顺序存放，由指令计数器指明要执行的指令所在的单元地址，指令地址一般按顺序递增，但可按运算结果或外部条件而改变。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%9C%BA%E7%BB%93%E6%9E%84.jpg" alt="冯诺依曼机结构"></p><h2 id="计算机的发展"><a href="#计算机的发展" class="headerlink" title="计算机的发展"></a>计算机的发展</h2><p>根据组成计算机的元器件分四代</p><ol><li>电子管计算机时代（1946第一台计算机到50年代后期）</li><li>晶体管计算机时代（50年代中期到60年代后期）</li><li>集成电路计算机时代（60年代中期到70年代前期）</li><li>大规模和超大规模集成电路时代（70年代初）</li></ol><p>根据能处理的对象发展</p><p>按所能处理的对象出现的先后顺序为：数值——字符——图像、图形、声音——动画、音频、视频——感觉、知识。</p><h2 id="计算机特点"><a href="#计算机特点" class="headerlink" title="计算机特点"></a>计算机特点</h2><ul><li>计算速度快</li><li>自动化程度高（与日常使用袖珍计算器的本质区别）</li><li>具有高度的灵活性与准确性</li><li>具有极强的“记忆能力”</li><li>具有较强的逻辑判断能力</li><li>具有高性能的实时通讯能力</li><li>具有直观灵活的表项能力</li></ul><h2 id="计算机的应用"><a href="#计算机的应用" class="headerlink" title="计算机的应用"></a>计算机的应用</h2><ul><li>科学计算</li><li>数据及事务处理</li><li>自动控制</li><li>计算机辅助设计与辅助制造</li><li>计算机辅助教学</li><li>逻辑关系加工</li><li>人工智能</li></ul><h2 id="计算机系统的硬件组成"><a href="#计算机系统的硬件组成" class="headerlink" title="计算机系统的硬件组成"></a>计算机系统的硬件组成</h2><p>外观上看，计算机由主机和各种外设组成（外部设备又称输出设备），外部信息经输入设备输入主机，由主机分析、加工、处理、再经输出设备输出。最重要的核心部件都安装再主机箱内，其中有主板及安装再主板上的CPU（CPU组成不包含存储器）、内存、插在主板扩展槽上的显卡、声卡、网卡等可选件，另外还有电源、磁盘驱动、关盘驱动器等。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90.png" alt="计算机系统硬件组成"></p><h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><blockquote><p>不同机器的运算结构是不同的，其结构与指令系统、数据类型、运算性能等相关联。</p></blockquote><p><strong>基本功能</strong></p><p>运算器用来完成算数运算（加减乘除等）和逻辑运算（与或非移位等），并将运算结果暂存再运算器内。</p><p><strong>基本结构</strong></p><p>包含算术逻辑运算单元ALU（Arithmetic Logical Unit）、寄存器、联通电路。</p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p><strong>基本功能</strong></p><p>存储原程序、原数据、运算中间结果；并满足计算机再执行过程中随机访问的执行程序和数据。</p><p><strong>工作模式</strong></p><p>读&#x2F;写。</p><p><strong>工作原理</strong></p><p>按地址访问，读&#x2F;写数据。</p><p><strong>内存储器</strong></p><p>又称主存储器（简称内存或主存），存取速度块，容量小，价格贵，内存的常见类型有只读存储器（ROM）、随机存取存储器（RAM）。</p><p><strong>外存储器</strong></p><p>又称辅助存储器，存储速度慢、容量大，价格便宜，常见的外存储器有硬盘、软盘、U盘等。</p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a><strong>控制器</strong></h3><blockquote><p>主机能指令进行译码的部件是控制器</p></blockquote><p><strong>基本功能</strong></p><p>产生指令执行过程所需要的控制信号，控制相关功能部件执行相应操作。</p><p><strong>控制信号的形成</strong></p><p>电平信号，脉冲信号</p><p><strong>产生控制信号的依据</strong></p><p>指令、状态、时许</p><p><strong>控制信号的产生方式</strong></p><p>微程序、硬布线</p><h2 id="计算机系统的软件组成"><a href="#计算机系统的软件组成" class="headerlink" title="计算机系统的软件组成"></a>计算机系统的软件组成</h2><p>软件是指导计算机硬件如何工作的各种程序，以及供程序的数据和相关的文档资料。计算机用户正是通过使用各种软件来操作计算机硬件，从而完成各种功能的。</p><p><strong>系统软件</strong></p><p>系统软件是指直接控制和协调计算机各部件的最基本的软件，它的目的是提供一个基本的计算机运行环境，系统软件的核心称为操作系统。常见的微机操作系统有：DOS、Windows、Unix、Linux。系统软件还包括编辑程序、诊断程序、调试程序、各种语言处理程序、数据库管理系统程序它们的目的是为程序员开发新程序提供方便。</p><p><strong>应用软件</strong></p><p>应用软件是为了使用各种专用目的而开发的软件，如图形图像处理软件</p><p>计算机辅助教学软件、游戏软件、文字处理软件等，它们再系统软件的支持下工作。</p><h2 id="计算机软硬件关系"><a href="#计算机软硬件关系" class="headerlink" title="计算机软硬件关系"></a>计算机软硬件关系</h2><p>计算机系统组成原理  一个计算机系统由硬件系统和软件系统两部分组成。硬件和软件是相辅相成，缺一不可的。硬件是基础，是大脑，而软件是灵魂，是大脑中的知识。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%85%B3%E7%B3%BB.jpg" alt="计算机软硬件关系"></p><h2 id="计算机系统的主要性能指标"><a href="#计算机系统的主要性能指标" class="headerlink" title="计算机系统的主要性能指标"></a>计算机系统的主要性能指标</h2><p><strong>字长</strong></p><p>字长是计算机能同时处理的二进制的最大位数，其单位是二进制的位（bit）,字长直接关系到计算机的计算精度、速度和功能强度。</p><p><strong>存储容量</strong></p><p>主要包括内存储器容量、外存储器容量和各种功能缓冲三区。</p><p><strong>吞吐量</strong></p><p>计算机系统的吞吐量是指单位时间内流入、处理和流出系统的信息的数量。</p><p><strong>响应时间</strong></p><p>指计算机完成一个任务所花费的全部时间，包括存储器访问时间、磁盘访问时间和I&#x2F;O访问时间等。</p><p>CPU<strong>时钟周期与主频</strong></p><p>计算机操作的最小时钟单位，通常把定时震荡两相邻脉冲上升沿之间的时间间隔称为一个CPU时钟周期。CPU时钟周期的倒数就称为主频。</p><p><strong>CPI</strong></p><p>CPI（Clock cycle Per Instruction）表示执行每条计算机指令所需的平均时钟周期。</p><p><strong>CPU执行时间</strong></p><p>CPU执行时间是指执行程序时实际占用CPU的时间，不包括I&#x2F;O访问时间和等待时间等。</p><p><strong>MIPS</strong></p><p>MIPS(Million Instructions Per Second)是CPU每秒可以处理百万条机器指令的数量。</p><p><strong>MFLOPS</strong></p><p>MFLOPS(Million Floating Point Operations Per Second)是CPU每秒钟执行百万次浮点操作的次数。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 概论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM配置</title>
      <link href="/2020/08/17/ssmConfiguration/"/>
      <url>/2020/08/17/ssmConfiguration/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SSM框架集由Spring、SpringMVC、MyBatis三个开源框架整合而成，常作为数据源较简单的web项目的框架。</p></blockquote><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><pre class=" language-text"><code class="language-text">│  web.xml│  ├─config│  │  db.properties│  │  log4j.properties│  │  │  ├─mybatis│  │  │  mybatis-config.xml│  │  │  │  │  └─mapper│  ├─spring│  │      applicationContext.xml│  │      │  └─springmvc│          springmvc.xml│          └─lib        aspectjweaver-1.8.9.jar        c3p0-0.9.1.jar        commons-beanutils-1.7.0.jar        commons-collections-3.2.jar        commons-fileupload-1.3.3.jar        commons-io-2.2.jar        commons-lang-2.3.jar        commons-logging-1.1.jar        ezmorph-1.0.4.jar        gson-1.6.jar        hamcrest-core-1.3.jar        jackson-annotations-2.8.0.jar        jackson-core-2.8.9.jar        jackson-databind-2.8.9.jar        javax.servlet-api-3.1.0.jar        json-lib-2.2.1-jdk15.jar        json-simple-1.1.1.jar        jsp-api-2.2.jar        jsqlparser-1.0.jar        jstl-1.2.jar        junit-4.12.jar        log4j.jar        mybatis-3.4.4.jar        mybatis-generator-core-1.3.5.jar        mybatis-spring-1.3.1.jar        mysql-connector-java-5.1.29.jar        pagehelper-5.0.3.jar        spring-aop-4.3.9.RELEASE.jar        spring-aspects-4.3.9.RELEASE.jar        spring-beans-4.3.9.RELEASE.jar        spring-context-4.3.9.RELEASE.jar        spring-core-4.3.9.RELEASE.jar        spring-expression-4.3.9.RELEASE.jar        spring-jdbc-4.3.9.RELEASE.jar        spring-test-4.3.9.RELEASE.jar        spring-tx-4.3.9.RELEASE.jar        spring-web-4.3.9.RELEASE.jar        spring-webmvc-4.3.9.RELEASE.jar</code></pre><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><blockquote><p>web.xml是Java Web项目的配置文件</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>web</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 中文乱码处理 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>HiddenHttpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring配置文件信息 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:config/spring/applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- ContextLoaderListener监听器 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 日志配置 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>log4jConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:config/log4j.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.util.Log4jConfigListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置前端控制器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:config/springmvc/springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/errors/404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/WEB-INF/errors/500.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 描述项目运行的首页 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h2 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h2><blockquote><p>mysql数据库</p><p>db_xxx  数据库名称</p><p>8.0以上url添加时区 serverTimezone&#x3D;UTC</p></blockquote><pre class=" language-xml"><code class="language-xml">datasource.connection.driver_class=com.mysql.jdbc.Driverdatasource.connection.url=jdbc:mysql://localhost:3306/db_xxx?useUnicode=true&amp;characterEncoding=utf-8datasource.connection.username=rootdatasource.connection.password=#连接池保持的最小连接数,default : 3（建议使用）datasource.connection.minPoolSize=3#连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大,default : 15（建议使用）datasource.connection.maxPoolSize=15#连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接。如果为0，则永远不会断开连接,即回收此连接。default : 0 单位 s（建议使用）datasource.connection.maxIdleTime=0#连接池在无空闲连接可用时一次性创建的新数据库连接数,default : 3（建议使用）datasource.connection.acquireIncrement=3#连接池为数据源缓存的PreparedStatement的总数。由于PreparedStatement属于单个Connection,所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement来计算。同时maxStatementsPerConnection的配置无效。default : 0（不建议使用）datasource.connection.maxStatements=0#连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，因为它缓存的服务对象是单个数据连接，如果设置的好，肯定是可以提高性能的。为0的时候不缓存。default : 0（看情况而论）datasource.connection.maxStatementsPerConnection=0#连接池初始化时创建的连接数,default : 3（建议使用）datasource.connection.initialPoolSize=3#用来配置测试空闲连接的间隔时间。测试方式还是上面的两种之一，可以用来解决MySQL8小时断开连接的问题。因为它保证连接池会每隔一定时间对空闲连接进行一次测试，从而保证有效的空闲连接能每隔一定时间访问一次数据库，将于MySQL8小时无会话的状态打破。为0则不测试。default : 0(建议使用)datasource.connection.idleConnectionTestPeriod=0#连接池在获得新连接失败时重试的次数，如果小于等于0则无限重试直至连接获得成功。default : 30（建议使用）datasource.connection.acquireRetryAttempts=30#如果为true，则当连接获取失败时自动关闭数据源，除非重新启动应用程序。所以一般不用。default : false（不建议使用）datasource.connection.breakAfterAcquireFailure=false#性能消耗大。如果为true，在每次getConnection的时候都会测试，为了提高性能,尽量不要用。default : false（不建议使用）datasource.connection.testConnectionOnCheckout=false#配置当连接池所有连接用完时应用程序getConnection的等待时间。为0则无限等待直至有其他连接释放或者创建新的连接，不为0则当时间到的时候如果仍没有获得连接，则会抛出SQLException。其实就是acquireRetryAttempts*acquireRetryDelay。default : 0（与上面两个，有重复，选择其中两个都行）datasource.connection.checkoutTimeout=30000#如果为true，则在close的时候测试连接的有效性。default : false（不建议使用）datasource.connection.testConnectionOnCheckin=false#配置一个表名，连接池根据这个表名用自己的测试sql语句在这个空表上测试数据库连接,这个表只能由c3p0来使用，用户不能操作。default : null（不建议使用）datasource.connection.automaticTestTable=c3p0TestTable#连接池在获得新连接时的间隔时间。default : 1000 单位ms（建议使用）datasource.connection.acquireRetryDelay=1000#为0的时候要求所有的Connection在应用程序中必须关闭。如果不为0，则强制在设定的时间到达后回收Connection，所以必须小心设置，保证在回收之前所有数据库操作都能够完成。这种限制减少Connection未关闭情况的不是很适用。建议手动关闭。default : 0 单位 s（不建议使用）datasource.connection.unreturnedConnectionTimeout=0#这个配置主要是为了快速减轻连接池的负载，比如连接池中连接数因为某次数据访问高峰导致创建了很多数据连接，但是后面的时间段需要的数据库连接数很少，需要快速释放，必须小于maxIdleTime。其实这个没必要配置，maxIdleTime已经配置了。default : 0 单位 s（不建议使用）datasource.connection.maxIdleTimeExcessConnections=0#配置连接的生存时间，超过这个时间的连接将由连接池自动断开丢弃掉。当然正在使用的连接不会马上断开，而是等待它close再断开。配置为0的时候则不会对连接的生存时间进行限制。default : 0 单位 s（不建议使用）datasource.connection.maxConnectionAge=0</code></pre><h2 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h2><blockquote><p>日志打印</p></blockquote><pre class=" language-xml"><code class="language-xml">### direct log message to stdout ###log4j.appender.stdout.Target = System.outlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout = org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern =  %d<span class="token entity" title="&#123;">&amp;#123;</span>ABSOLUTE<span class="token entity" title="&#125;">&amp;#125;</span> %5p %c<span class="token entity" title="&#123;">&amp;#123;</span>1<span class="token entity" title="&#125;">&amp;#125;</span>:%L - %m%nlog4j.rootLogger=INFO, stdout</code></pre><h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><p><strong>mapper</strong></p><blockquote><p>mapper 下为实体类映射文件 xxxMapper.xml</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span></code></pre><p><strong>mybatis-config.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 暂时不需做任何配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h2><blockquote><p>包替换 vip.wulinzeng</p><p>数据源（连接池）：C3P0</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>            <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Component<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>            <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>            <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载配数据源配置文件 db.properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:config/db.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 C3P0 数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.driver_class&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.minPoolSize&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接池中保留的最大连接数。Default: 15 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.maxPoolSize&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdleTime<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.maxIdleTime&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireIncrement<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.acquireIncrement&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.maxStatements&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxStatementsPerConnection<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.maxStatementsPerConnection&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.initialPoolSize&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--每60秒检查所有连接池中的空闲连接。Default: 0 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idleConnectionTestPeriod<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.idleConnectionTestPeriod&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.acquireRetryAttempts&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试            获取连接失败后该数据源将申明已断开并永久关闭。Default: false --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>breakAfterAcquireFailure<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.breakAfterAcquireFailure&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable            等方法来提升连接测试的性能。Default: false --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testConnectionOnCheckout<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.testConnectionOnCheckout&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.checkoutTimeout&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testConnectionOnCheckin<span class="token punctuation">"</span></span>                  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.testConnectionOnCheckin&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>automaticTestTable<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.automaticTestTable&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryDelay<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.acquireRetryDelay&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--自动超时回收Connection--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>unreturnedConnectionTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.unreturnedConnectionTimeout&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--超时自动断开--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdleTimeExcessConnections<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.maxIdleTimeExcessConnections&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxConnectionAge<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;datasource.connection.maxConnectionAge&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 事务管理器 （JDBC） --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 启动声明式事务驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring 通过 sqlSessionFactoryBean 获取 sqlSessionFactory 工厂类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 扫描 po 包，使用别名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.entity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 扫描映射文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:config/mybatis/mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置扫描 dao 包，动态实现 dao 接口，注入到 spring 容器中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.dao<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注意使用 sqlSessionFactoryBeanName 避免出现spring 扫描组件失效问题 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gson<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.google.gson.Gson<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h2><blockquote><p>包替换 vip.wulinzeng</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>task</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/task<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 只需要扫描包中的 Controller 注解 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span>        <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 启动 mvc 注解驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 启动定时任务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">task:</span>annotation-driven</span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 静态资源处理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置视图解析器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/views/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 文件上传 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>         <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 上传文件大小限制 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10485760<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 请求的编码格式, 和 jsp 页面一致 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 后台访问拦截器 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--&lt;mvc:mapping path="/grade/*"/>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/login<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/system/get_cpacha<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/h-ui/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/easyui/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home-resources/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ischoolbar.programmer.interceptor.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置数据源</title>
      <link href="/2020/08/15/Spring-dataSource/"/>
      <url>/2020/08/15/Spring-dataSource/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库连接池（Connection pooling）是程序启动时建立足够的数据库连接，并将这些连接组成一个连接池，由程序动态地对池中的连接进行申请，使用，释放。</p><p>简单说，它是存储连接通道对象，能提高程序性能。如事先实例化数据源，初始化部分连接资源；使用连接资源时从数据源中获取；使用完毕后将连接资源归还给数据源</p><p>常见的数据源(连接池)：DBCP、C3P0、BoneCP、Druid等</p></blockquote><h2 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h2><p><strong>导入坐标</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- C3P0连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Druid连接池 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- mysql驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在<code>test</code>下创建测试类，并在<code>mysql</code>数据库创建<code>testjdbc</code></p><p><strong>Druid</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">//测试手动创建druid</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/testjdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DruidPooledConnection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Druid: "</span> <span class="token operator">+</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>控制台出现<code>Druid: com.mysql.jdbc.JDBC4Connection@1176dcec</code>信息则表示创建成功</p><p><strong>C3P0</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">//测试手动创建c3p0</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PropertyVetoException<span class="token punctuation">,</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ComboPooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/testjdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印数据源地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C3P0: "</span> <span class="token operator">+</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>同样控制台出现<code>C3P0: com.mchange.v2.c3p0.impl.NewProxyConnection@71b1176b</code>类似信息则表示创建成功</p><h2 id="spring容器创建"><a href="#spring容器创建" class="headerlink" title="spring容器创建"></a>spring容器创建</h2><p>导入坐标</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>jdbc.properties</strong>写入数据连接信息</p><pre class=" language-xml"><code class="language-xml">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/testjdbc?useUnicode=true&amp;characterEncoding=utf8jdbc.username=rootjdbc.password=</code></pre><p><strong>抽取jdbc配置文件</strong></p><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息.首先，需要引入context命名空间和约束路径</p><blockquote><p>命名空间：xmlns:context&#x3D;”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a></p><p>约束路径：<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a>                        </p><p>​                   <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>在<code>test</code>下测试数据源</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">//测试从容器中获取数据源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataSource dataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DataSource<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据源："</span><span class="token operator">+</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>出现 <code>数据源：com.mchange.v2.c3p0.impl.NewProxyConnection@7283d3eb </code>类似信息则表示创建成功</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM各层级作用</title>
      <link href="/2020/08/11/SSMExecutionProcess/"/>
      <url>/2020/08/11/SSMExecutionProcess/</url>
      
        <content type="html"><![CDATA[<h2 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h2><blockquote><p>SSM：spring+springMVC+mybaits</p><p>Spring：是一个容器，就是一个bean（实体对象）大集合。</p><p>SpringMVC：控制器（业务逻辑层）(视图分发器)。</p><p>Mybaits：jdbc的封装（数据库框架）Mapper.xml。</p></blockquote><p>SSM框架集由Spring、SpringMVC、MyBatis三个开源框架整合而成，常作为数据源较简单的web项目的框架。</p><p>其中spring是一个<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=7988600&ss_c=ssc.citiao.link">轻量级</a>的<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=666629&ss_c=ssc.citiao.link">控制反转</a>（IoC）和面向切面（AOP）的容器框架。</p><p><a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=40917807&ss_c=ssc.citiao.link">SpringMVC</a>分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。</p><p>MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=55187093&ss_c=ssc.citiao.link">持久层</a>框架。<br>页面发送请求给控制器，控制器调用业务层处理逻辑，<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=17228&ss_c=ssc.citiao.link">逻辑层</a>向持久层发送请求，持久层与数据库交互，后将结果返回给业务层，业务层将处理逻辑发送给控制器，控制器再调用视图展现数据。</p><h2 id="各层级"><a href="#各层级" class="headerlink" title="各层级"></a>各层级</h2><ul><li>表现层（springMVC）：Controller层（Handler层）<ul><li>负责具体的业务模块流程的控制</li><li>Controller层通过要调用Service层的接口来控制业务流程，控制的配置也在Spring配置文件里面。</li></ul></li><li>业务层（Spring）：Service层<ul><li>Service层：负责业务模块的逻辑应用设计。</li><li>首先设计其接口，然后再实现他的实现类。</li><li>通过对Spring配置文件中配置其实现的关联，完成此步工作，我们就可以通过调用Service的接口来进行业务处理。</li><li>最后通过调用DAO层已定义的接口，去实现Service具体的 实现类。</li></ul></li><li>持久层（Mybatis）：Dao层（Mapper层）<ul><li>Dao层：负责与数据库进行交互设计，用来处理数据的持久化工作。</li><li>DAO层的设计首先是设计DAO的接口，</li><li>然后在Spring的配置文件中定义此接口的实现类，就可在其他模块中调用此接口来进行数据业务的处理，而不用关心接口的具体实现类是哪个类，这里用到的就是反射机制， DAO层的数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置。</li></ul></li><li>视图层：View层<ul><li>负责前台jsp页面的展示。</li><li>此层需要与Controller层结合起来开发。</li></ul></li><li>各层间的联系：<ul><li>本来Controller层与View层是可以放在.jsp文件里一起开发的，但是为了降低代码的复杂度，提高其可维护性，将其分为了这两层，这也体现了MVC框架的特性，即结构清晰，耦合度低。</li><li>Service层是建立在DAO层之上的，建立了DAO层后才可以建立Service层，而Service层又是在Controller层之下的，因而Service层应该既调用DAO层的接口，又要提供接口给Controller层的类来进行调用，它刚好处于一个中间层的位置。每个模型都有一个Service接口，每个接口分别封装各自的业务处理方法。</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/ssm框架原理流程图.png"><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><blockquote><p> Spring MVC框架也是一个基于请求驱动的Web框架，并且也使用了前端控制器模式来进行设计，再根据请求映射规则分发给相应的页面控制器（动作&#x2F;处理器）进行处理。</p></blockquote><p><strong>执行流程</strong></p><ul><li>首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；</li><li>DispatcherServlet——&gt;HandlerMapping， HandlerMapping将会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象、多个HandlerInterceptor拦截器）对象，通过这种策略模式，很容易添加新的映射策略；</li><li>DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；</li><li>HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView对象（包含模型数据、逻辑视图名）；</li><li>ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；</li><li>View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；</li><li>返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</li></ul><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/springmvc框架原理流程图.png"><h3 id="Maybatis"><a href="#Maybatis" class="headerlink" title="Maybatis"></a>Maybatis</h3><ul><li>获取配置文件mybatis-config.xml，由SqlSessionFactoryBuilder对象，读取并解析配置文件，返回SqlSessionFactory对象</li><li>由SqlSessionFactory创建SqlSession 对象，没有手动设置的话事务默认开启</li><li>调用SqlSession中的api，获取指定UserMapper.class文件</li><li>由jdk动态代理，获取到UserMapper.xml文件，内部进行复杂的处理，最后调用jdbc执行SQL语句，封装结果返回。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2020/08/07/mybatis-quick/"/>
      <url>/2020/08/07/mybatis-quick/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><blockquote><p>mybatis 是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p><p>mybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</p><p>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。</p></blockquote><p><strong>Mybatis官网地址</strong><a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>添加MyBatis的坐标</li><li>创建student数据表</li><li>编写Student实体类 </li><li>编写映射文件SqlMapConfig.xml</li><li>编写核心文件studentMapper.xml</li><li>编写测试类</li></ol><h2 id="导入依赖坐标"><a href="#导入依赖坐标" class="headerlink" title="导入依赖坐标"></a>导入依赖坐标</h2><p><strong>pom.xml</strong></p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis坐标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mysql驱动坐标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--日志坐标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><p>创建Student类，并且创建好mysql数据库的<code>student</code>表，表中分别是<code>id</code> ，<code>name</code>，<code>sex</code>和<code>score</code>字段注意命名，以免后面Mapper映射文件冲突。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScores</span><span class="token punctuation">(</span><span class="token keyword">int</span> scores<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> scores<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getScores</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> score<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Student&amp;#123;"</span> <span class="token operator">+</span>java                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", scores="</span> <span class="token operator">+</span> score <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在resources目录下创建<code>jdbc.properties</code>文件和<code>sqlMapConfig.xml</code>文件.</p><p><strong>jdbc.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/testjdbc?useUnicode=true&amp;characterEncoding=utf8</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span></code></pre><p><strong>sqlMapConfig</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--properties标签：该标签可以加载外部的properties文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--environments标签：数据源环境配置标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.driver&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.username&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;jdbc.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mappers标签：加载映射配置--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip/wulinzeng/mapper/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p><strong>environments标签</strong></p><p>数据库环境的配置，支持多环境配置</p><p>其中，事务管理器（transactionManager）类型有两种：</p><p>•JDBC：这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</p><p>•MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。</p><p>其中，数据源（dataSource）类型有三种：</p><p>•UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接。</p><p>•POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</p><p>•JNDI：这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用</p><p><strong>mapper标签</strong></p><p>该标签的作用是加载映射的，加载方式有如下几种：</p><p>•使用相对于类路径的资源引用，例如：</p><p>•使用完全限定资源定位符（URL），例如：</p><p>•使用映射器接口实现类的完全限定类名，例如：</p><p>•将包内的映射器接口实现全部注册为映射器，例如：</p><p><strong>Properties标签</strong></p><p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p><h2 id="核心文件"><a href="#核心文件" class="headerlink" title="核心文件"></a>核心文件</h2><p>在resources中创建<strong>StudentMapper.xml</strong>这里要注意路径问题。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span>  <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from student    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into student values(#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>sex<span class="token entity" title="&#125;">&amp;#125;</span>,#<span class="token entity" title="&#123;">&amp;#123;</span>score<span class="token entity" title="&#125;">&amp;#125;</span>)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulinzeng.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update student set name=#<span class="token entity" title="&#123;">&amp;#123;</span>name<span class="token entity" title="&#125;">&amp;#125;</span>,sex=#<span class="token entity" title="&#123;">&amp;#123;</span>sex<span class="token entity" title="&#125;">&amp;#125;</span>,score=#<span class="token entity" title="&#123;">&amp;#123;</span>score<span class="token entity" title="&#125;">&amp;#125;</span>        where id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from student where id=#<span class="token entity" title="&#123;">&amp;#123;</span>id<span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在test文件下编写测试类，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加载核心配置文件</span>        InputStream resourceAsStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得sqlSession工厂对象</span>        SqlSessionFactory build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得sqlSession对象</span>        SqlSession sqlSession <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql语句</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> student <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"studentMapper.findAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//释放资源</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student std<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"貂蝉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setScores</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream resourceAsStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"studentMapper.add"</span><span class="token punctuation">,</span>std<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student std<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"孙尚香"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setScores</span><span class="token punctuation">(</span><span class="token number">68</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream resourceAsStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"studentMapper.update"</span><span class="token punctuation">,</span>std<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除</span>    <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student std<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream resourceAsStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"sqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory build <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"studentMapper.delete"</span><span class="token punctuation">,</span>std<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Mybatis相应API"><a href="#Mybatis相应API" class="headerlink" title="Mybatis相应API"></a>Mybatis相应API</h2><p><strong>SqlSession工厂构建器SqlSessionFactoryBuilder</strong></p><p>SqlSessionFactory  build(InputStream inputStream)</p><p>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。</p><pre class=" language-java"><code class="language-java">String resource <span class="token operator">=</span> <span class="token string">"org/mybatis/builder/mybatis-config.xml"</span><span class="token punctuation">;</span> InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span> SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>SqlSession工厂对象SqlSessionFactory</strong></p><p>SqlSessionFactory 有多个个方法创建SqlSession 实例。常用的有如下两个：</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>openSession()</td><td>会默认开启一个事务，但事务不会自动提交，也就意味着需要手动提交该事务，更新操作数据才会持久化到数据中</td></tr><tr><td>openSession(boolean autoCommit)</td><td>参数为是否自动提交，如果设置为true，那么不需要手动提交事务</td></tr></tbody></table><p><strong>SqlSession会话对象</strong></p><p>SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。</p><p>执行语句的方法主要有</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">selectOne</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span></code></pre><p>操作事务的方法主要有</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-IOC-Set注入</title>
      <link href="/2020/08/06/Spring-ioc-Set/"/>
      <url>/2020/08/06/Spring-ioc-Set/</url>
      
        <content type="html"><![CDATA[<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><blockquote><p>IOC</p></blockquote><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方.</p><p><strong>IoC是Spring框架的核心内容</strong>，使用多种方式完美的实现了IoC，可以使用XML配置，也可以使用注解，新版本的Spring也可以零配置实现IoC。</p><p>Spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从IoC容器中取出需要的对象。</p><h2 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h2><p>导入依赖</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--导入spring的contenxt坐标 context依赖core beans expression--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="Set注入"><a href="#Set注入" class="headerlink" title="Set注入"></a>Set注入</h2><blockquote><p>Set注入</p></blockquote><p>要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is .</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Salary</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> baseSalary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBaseSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> baseSalary<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseSalary <span class="token operator">=</span> baseSalary<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBaseSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> baseSalary<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Staff</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Salary baseSalary<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> task<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbys<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> card<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties infor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBaseSalary</span><span class="token punctuation">(</span>Salary baseSalary<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseSalary <span class="token operator">=</span> baseSalary<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTask</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> task<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobbys</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbys<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbys <span class="token operator">=</span> hobbys<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCard</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> card<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGames</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>games <span class="token operator">=</span> games<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfor</span><span class="token punctuation">(</span>Properties infor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>infor <span class="token operator">=</span> infor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"salary:"</span> <span class="token operator">+</span> baseSalary<span class="token punctuation">.</span><span class="token function">getBaseSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"task:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String t <span class="token operator">:</span> task<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hobbys="</span> <span class="token operator">+</span> hobbys<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"card="</span> <span class="token operator">+</span> card<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"games="</span> <span class="token operator">+</span> games<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"infor="</span> <span class="token operator">+</span> infor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>applicationContext.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--常量注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Salary<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulingzeng.pojo.Salary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseSalary<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Staff<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vip.wulingzeng.pojo.Staff<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        引用使用ref--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseSalary<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Salary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        数组注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>task<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>写一篇文案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>做一份ppt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>做周报总结<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>列出下周任务目标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        List注入--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>写作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>弹吉他<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        map注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>建设银行<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>54131654867631<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>工商银行<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21354854564154<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--            set注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>地下城与勇士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>英雄联盟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        proprerties注入--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>infor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>学历<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>本科<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>住址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>太原街<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><strong>Test</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ApplicationContext app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Staff staff <span class="token operator">=</span> <span class="token punctuation">(</span>Staff<span class="token punctuation">)</span> app<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"Staff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staff<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>结果</strong></p><pre><code>name:Tomsalary:5000.0task: 写一篇文案 做一份ppt 做周报总结 列出下周任务目标hobbys=[唱歌, 写作, 弹吉他]card=&#123;建设银行=54131654867631, 工商银行=21354854564154&#125;games=[地下城与勇士, 英雄联盟]infor=&#123;姓名=Tom, 住址=太原街, 学历=本科&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引刨析</title>
      <link href="/2020/08/02/MysqlIndex/"/>
      <url>/2020/08/02/MysqlIndex/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h2><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。创建索引时，需要确保该索引是应用在SQL 查询语句的条件(一般作为 WHERE 子句的条件)。实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。</p><p><strong>索引的重要性</strong></p><p>从MySQL数据库中查找书籍，就类似于从图书馆找书，如果书比较少，那么查找的速度会比较快，如果书比较多的时候，那么查找的速度就会非常的慢。这个时候图书的分类管理就显得非常重要了，图书分类管理就类似于索引（或者理解成给所有的图书设定目录）。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>最基本的索引，它没有任何限制。</p><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> indexName <span class="token keyword">ON</span> mytable<span class="token punctuation">(</span>username<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p><h4 id="修改表结构（添加索引）"><a href="#修改表结构（添加索引）" class="headerlink" title="修改表结构（添加索引）"></a>修改表结构（添加索引）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">table</span> tableName <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> indexName<span class="token punctuation">(</span>columnName<span class="token punctuation">)</span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">ON</span> mytable<span class="token punctuation">;</span></code></pre><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> indexName <span class="token keyword">ON</span> mytable<span class="token punctuation">(</span>username<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="修改表结构（添加索引）-1"><a href="#修改表结构（添加索引）-1" class="headerlink" title="修改表结构（添加索引）"></a>修改表结构（添加索引）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">table</span> mytable <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token punctuation">(</span>username<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h2><p><strong>在没有索引的情况下，为什么查询的速度会比较慢呢？</strong></p><p>因为数据都是存储在磁盘上的，那么再执行sql语句的时候，一定会去磁盘上读取相关的数据，那就会产生磁盘IO。如果没有索引，那么会进行多次磁盘的IO操作，比较耗费时间。</p><p><strong>为什么要使用索引？</strong></p><p>其目的就是为了减少磁盘的IO操作，这样就可以提高查询数据的速度。</p><p><strong>索引本质是什么？</strong></p><p>索引是帮助快速检索出数据的数据结构。<br>索引的作用是快速检索出数据。<br>索引的本质就是一种数据结构。也就是说你创建了一个索引，其实MySQL的数据库会帮你创建一个数据结构，然后使用该数据结构来存储数据，该数据结构就是索引。</p><h2 id="索引底层数据结构"><a href="#索引底层数据结构" class="headerlink" title="索引底层数据结构"></a>索引底层数据结构</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树是一颗相对平衡的有序二叉树，对其进行插入，查找，删除等操作性能都比较好。</p><p>特点：它的左子节点的值比父节点的值要小，右节点的值要比父节点的大。</p><p>二叉树的优点：可以优化磁盘IO的次数。节点存在有顺序，可以进行范围的查询。</p><p>二叉树的缺点：插入数据的速度会比较慢，因为会更改数据结构。不平衡的问题，会产生倾斜的二叉树。</p><h3 id="完全平衡二叉树"><a href="#完全平衡二叉树" class="headerlink" title="完全平衡二叉树"></a>完全平衡二叉树</h3><p>插入数据会平衡，但是插入的时候会改变树的结构。插入的数据的时候比较慢。而且树的层级会变高，会增加磁盘IO的次数。</p><p>二叉树是有顺序的，范围查找都是支持的。</p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>B树或者B+树的节点可以存储多个数据，所以相对于完全平衡二叉树的高度肯定会低，那么就会降低磁盘IO的次数。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+树相对于B树有数据的冗余，叶子节点中的数据是有顺序的。那么再进行顺序查找的时候就非常的方便，只要在叶子节点顺序向后遍历即可。</p><h2 id="MySQL索引是如何存储数据的"><a href="#MySQL索引是如何存储数据的" class="headerlink" title="MySQL索引是如何存储数据的"></a>MySQL索引是如何存储数据的</h2><h4 id="MySQL中是如何使用B-树的"><a href="#MySQL中是如何使用B-树的" class="headerlink" title="MySQL中是如何使用B+树的"></a>MySQL中是如何使用B+树的</h4><p>MySQL中Innodb和myisam存储引擎默认都是使用B+树数据结构做索引的，存储的数据结构如下</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/mysql-Innodb.png"></p><p><strong>为什么只有叶子节点会存储数据，而非叶子节点不存储数据呢？</strong></p><p>局部性原理：当一个数据被用到时，其附近的数据也可能被使用，所以操作系统为了提高效率，读取数据的时候往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，操作系统也会从这个位置开始，顺序向后读取一定长度的数据放入内存中，这里的长度叫做页。也就是计算机操作系统操作磁盘的基本单位，一般操作系统中一页的大小为 4kb。</p><p>在MySQL中可以使用如下的命令查看Innodb引擎页的默认大小</p><p>SHOW GLOBAL STATUS LIKE ‘Innodb_page_size’ </p><p>MySQL的页的大小默认是16kb，B+数的设计非常适合读取数据。</p><p>如果节点又存储数据和索引，数据比较多，索引就比较少，那么树的高度就越高。导致磁盘IO变多，效率变低。</p><h4 id="叶子节点可以存储多少数据"><a href="#叶子节点可以存储多少数据" class="headerlink" title="叶子节点可以存储多少数据"></a>叶子节点可以存储多少数据</h4><p>一个节点能存储16KB的数据，这是MySQL默认的节点大小，一页16KB。<br>假设一行记录的大小为1kb（其实已经比较大了）<br>那么一个叶子节点就能存储16条数据。<br>非叶子节点里面存储的是索引的值和指针，MySQL默认的索引值大小是8B，指针大小是6B，合在一起是14B。那么非叶子节点可以存储的索引+指针的个数为：<br>161024&#x2F;14 &#x3D; 1170 个<br>那么如果数的高度是2层，叶子节点的个数也就是 1170个，那么可以存储的数据条数为：1170 <em>16 &#x3D; 18720条。<br>如果树的高度是3层，那每个叶子节点可以存储的条数为：11701170</em>16&#x3D; 21902400条</p><h4 id="myisam引擎存储结构"><a href="#myisam引擎存储结构" class="headerlink" title="myisam引擎存储结构"></a>myisam引擎存储结构</h4><p>可以使用命令创建一张新的表结构，使用myisam引擎来创建。myisam引擎的索引采用的非聚集索引，索引和表数据是分开存储的。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/mysql-myisam.png"></p><p>user2.frm文件是创建表的文件<br>user2.MYD文件是表的数据文件<br>user2.MYI文件是索引文件</p><p><strong>myisam引擎的索引结构图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/myisam%E5%BC%95%E6%93%8E%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="索引文件"></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/MYD%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6.png" alt="数据文件"></p><p>myisam引擎通过索引查找数据的时候，通过索引值找到对应的地址，通过地址找到数据。如果已name字段设置索引，效果是一样的。</p><h4 id="Innodb引擎存储结构"><a href="#Innodb引擎存储结构" class="headerlink" title="Innodb引擎存储结构"></a>Innodb引擎存储结构</h4><p>数据文件<code>user.frm</code>和<code>user.ibd</code></p><p>user.frm是创建表的文件</p><p>user.ibd是数据+索引文件</p><p>索引Innodb引擎是聚集索引，索引和数据文件在一起的。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/IBD%E7%B4%A2%E5%BC%95%EF%BC%88%E6%95%B0%E6%8D%AE%EF%BC%89%E6%96%87%E4%BB%B6.png" alt="数据文件"></p><p>如果已name字段设置索引，那就是二级索引（辅助索引）。叶子节点中存储的该列的数据和主键值，也就意味着还需要再通过主键去查找一次数据。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/IBD%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6.png" alt="索引文件"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><strong>数据库中最常见的慢查询优化方式是什么？</strong></p><p>加索引</p><p><strong>为什么加索引能优化慢查询？</strong></p><p>因为索引是一种优化查询的数据结构，比如MySQL中的索引是用B+树实现的。而B+树就是一种数据结构，可以利用索引快速查找数据。所以能优化查询。</p><p><strong>哪些数据结构可以提高查询速度？</strong></p><p>哈希表 完全平衡二叉树 B树 B+树等</p><p><strong>InnoDB聚集索引和普通索引有什么差异？</strong></p><p>InnoDB聚集索引的叶子节点存储行记录，因此， InnoDB必须要有，且只有一个聚集索引：</p><ol><li>如果表定义了PK，则PK就是聚集索引；</li><li>如果表没有定义PK，则第一个not NULL unique列是聚集索引；</li><li>否则，InnoDB会创建一个隐藏的row-id作为聚集索引；</li></ol><p><strong>为什么有的字段建立索引，查询速度反而变慢了呢？</strong></p><p>列的散列度越低，不推荐建立索引。</p><p>散列度公式：count(distinct(column_name)) &#x2F; count(*)</p><p>现在有一列字段，假如列的名称是 sex性别，存储的值是<code> 男</code>或者<code>女</code>，表中有500w条数据，现在执行<code>sql：select * from t_user where sex = &#39;男&#39;</code> 查询花费的时间2秒多，现在对sex 列建立了索引，再执行之前的sql语句，但是花费的时间变成了 20多秒。</p><p><strong>在什么字段上创建索引？</strong></p><p>where、join、 order by</p><p>索引个数不要过度，散列度低的字段，不要建立索引，随机无序或频繁更新的值，不适合作为主键，创建符合索引时避免冗余索引。</p><p><strong>联合索引，最左匹配原则</strong></p><p>必须从联合索引的第一个字段开始，不能跳过，不能中断。</p><p>两个字段一般是同时出现的，推荐建立联合索引，例如高考成绩查询：身份证号+考号</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name_sex <span class="token keyword">on</span> t_user <span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'name4999008'</span> <span class="token operator">and</span> sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token string">'name4999008'</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'name4999008'</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> sex <span class="token operator">=</span> <span class="token string">'男'</span></code></pre><p>第四条不会应用上该索引，其余三条都可以（第二条MySQL优化器）。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在人间凑数的日子</title>
      <link href="/2020/07/30/MyDayInTheWorld/"/>
      <url>/2020/07/30/MyDayInTheWorld/</url>
      
        <content type="html"><![CDATA[<h2 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>weather-v2-plugin-simple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    WIDGET <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      CONFIG<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"modules"</span><span class="token punctuation">:</span> <span class="token string">"10234"</span><span class="token punctuation">,</span>        <span class="token string">"background"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"tmpColor"</span><span class="token punctuation">:</span> <span class="token string">"FFFFFF"</span><span class="token punctuation">,</span>        <span class="token string">"tmpSize"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token string">"cityColor"</span><span class="token punctuation">:</span> <span class="token string">"FFFFFF"</span><span class="token punctuation">,</span>        <span class="token string">"citySize"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token string">"aqiSize"</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token string">"weatherIconSize"</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>        <span class="token string">"alertIconSize"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        <span class="token string">"padding"</span><span class="token punctuation">:</span> <span class="token string">"10px 10px 10px 10px"</span><span class="token punctuation">,</span>        <span class="token string">"shadow"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token string">"language"</span><span class="token punctuation">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>        <span class="token string">"borderRadius"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string">"fixed"</span><span class="token punctuation">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span>        <span class="token string">"vertical"</span><span class="token punctuation">:</span> <span class="token string">"middle"</span><span class="token punctuation">,</span>        <span class="token string">"horizontal"</span><span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>        <span class="token string">"key"</span><span class="token punctuation">:</span> <span class="token string">"rEcszacdIx"</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://apip.weatherdt.com/simple/static/js/weather-simple-common.js?v<span class="token punctuation">=</span>2.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="嵌入代码"><a href="#嵌入代码" class="headerlink" title="嵌入代码"></a>嵌入代码</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/pictures/people-5365324_1920.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><hr><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/wulinzengblog/GIF/20210220at104754.gif" alt="GIF"></p><hr><h2 id="BGM-已经使用-raw取消渲染"><a href="#BGM-已经使用-raw取消渲染" class="headerlink" title="BGM  已经使用 raw取消渲染"></a>BGM  已经使用 raw取消渲染</h2><!--<div ><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100%  height=86 src="//music.163.com/outchain/player?type=2&id=1374329431&auto=1&height=66"></iframe></div><div ><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height="110" loading="lazy" sandbox="allow-popups allow-scripts allow-same-origin" src="https://www.xiami.com/webapp/embed-player?autoPlay=1&id=2103139717"></iframe></div><div ><iframe height="230" width="260" src="https://www.ximalaya.com/thirdparty/player/sound/player.html?id=324428990&type=red" frameborder=0 allowfullscreen></iframe></div>--><h2 id="Vedio"><a href="#Vedio" class="headerlink" title="Vedio"></a>Vedio</h2><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=840308488&bvid=BV1C54y197CT&cid=179996357&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div> <div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"src="//player.bilibili.com/player.html?aid=99316004&bvid=BV1Y741117Lk&cid=169671011&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"  src='https://player.youku.com/embed/XNDQ1MTA0MjA0OA==' frameborder=0 allowfullscreen="true"></iframe></div><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://www.youtube-nocookie.com/embed/M_vJqpKr2LE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><h2 id="札记"><a href="#札记" class="headerlink" title="札记"></a>札记</h2><p>时光只解催人老，不信多情，长恨离亭，泪滴春衫酒易醒。梧桐昨夜西风急，淡月胧明，好梦频惊，何处高楼雁一声？       —— 晏殊 <strong>采桑子·时光只解催人老</strong>                                                                                                     </p><p>曾虑多情损梵行， 入山又恐别倾城，世间安得双全法， 不负如来不负卿。—— <strong>仓央嘉措</strong></p><p>绿衣捧砚催题卷,红袖添香伴读书。   ——席佩兰 <strong>寿简斋先生</strong></p><p>春水初生，春林初盛，春风十里，不如你。愿有岁月可回首，且以深情共白头。愿无岁月可回头，且以深情共余生。  ——冯唐 <strong>三十六大</strong></p><p>得成比目何辞死，愿作鸳鸯不羡仙。——卢照邻 <strong>长安古意</strong></p><p>西风吹老洞庭波，一夜湘君白发多。醉后不知天在水，满船清梦压星河。 ——唐珙 <strong>提龙阳县青草湖</strong></p><p>百川赴海返潮易，一叶报秋归树难。 —— 鲍溶 <strong>始见二毛</strong>                             </p>]]></content>
      
      
      <categories>
          
          <category> 札记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 札记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层</title>
      <link href="/2020/07/28/NetworkLayer/"/>
      <url>/2020/07/28/NetworkLayer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>网络层是计算机网络体系结构中非常重要的一层，它为运输层提供服务，跨越不同的网络将运输层报文段送达到对端运输层。IP协议是因特网网络层的核心协议。</p></blockquote><blockquote><p>2^7&#x3D;128   10000000<br>2^6&#x3D;64     01000000<br>2^5&#x3D;32     00100000<br>2^4&#x3D;16     00010000<br>2^3&#x3D;8       00001000<br>2^2&#x3D;4       00000100<br>2^1&#x3D;2       00000010<br>2^0&#x3D;1       00000001</p></blockquote><h2 id="网络层服务和功能"><a href="#网络层服务和功能" class="headerlink" title="网络层服务和功能"></a>网络层服务和功能</h2><p>运输层为应用层提供了端到端的数据传递服务。但运输层的报文段要从发送方主机到达接收方主机，需要使用下层的服务。网络层位于运输层下，为运输层提供服务，网络层要负责把运输层报文段从发送方主机的运输层送到接收方主机的运输层。但发送方主机与接收方主机常常相隔很远，它们之间相隔若干的网络。运输层报文段要走怎样的路才能到达接收方？网络层要完成的任务如下：</p><ol><li>网络层接收运输层的报文段，添加字节的首部，形成网络层分组。分组是网络层的传输单元。</li><li>网络层分组在途径的各个站点的网络层之间传递，最终到达接收方的网络层。</li><li>接收方网络层将运输报文段上传给本地运输层。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%BD%91%E7%BB%9C%E5%B1%82%E4%B8%8E%E8%BF%90%E8%BE%93%E5%B1%82%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="网络层与运输层的关系"></p><p>在TCP&#x2F;IP的体系中，网络层最主要的协议是网际协议（Internet Protocol，IP）。IP协议在RFC791中定义，目前的版本是IPv4，下一个版本IPv6已经开始实施，目前因特网上运行是主要还是IPv4。</p><h2 id="IP协议概述"><a href="#IP协议概述" class="headerlink" title="IP协议概述"></a>IP协议概述</h2><p>IP协议是TCP&#x2F;IP体系网络层的主要协议，为上层的TCP和UDP提供服务，在TCP&#x2F;IP体系的网络层，除了IP协议外，还有ICMP协议和IGMP协议。</p><p>IP协议是TCP&#x2F;IP协议体系的核心协议，通过IP协议可以连接各种不同的网络。这些网络在物理层和数据链路层上可能采用了不同技术标准和协议，但IP协议屏蔽了这些差异，对运输层和应用层呈现了一个统一的界面。对于运输层和应用层而言，它们只知道有IP网络，不需要了解低层的具体网络技术。IP协议连接各种不同的网络，使整个Internet统一为一个巨大的IP网络。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E7%BD%91%E7%BB%9C.png" alt="IP网络"></p><p>IP协议封装TCP报文段或UDP数据报，形成IP数据报，IP协议的主要功能要为IP数据报选路，并转发IP数据报到目的地。</p><p>IP协议提供的是数据报服务，有两个主要特点</p><ol><li>不可靠：IP数据报在传输途中可能会丢失、损坏或乱序，IP协议不去解决这些问题，IP协议不提供可靠性，IP协议只是尽最大努力去传输数据。</li><li>无连接：在发送IP数据报前，发送方的IP协议不会与接收方的IP协议建立联系，而是直接发送IP数据报。每个IP数据报被独立处理，IP不维护传输的各种状态（如主机间的关联、分组的顺序等）。</li></ol><p>IP协议定义了以下内容：</p><ol><li>IP地址。IP地址定义了一个统一的地址体系，IP网络中，每台节点都有一个IP地址，使用这个地址进行通信。</li><li>IP数据报格式。IP数据报是IP协议的数据传输单元，IP协议定义了IP数据报格式、内容和IP数据报的分片与重组。</li><li>IP协议与相关层次的接口。</li></ol><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p> <strong>概念</strong></p><p>就像现实社会中每个人都有一个通信地址一样，在IP网络中，每台设备也需要一个通信地址，这个地址称为IP地址，一个IP地址可以唯一确定IP网络中的一个站点。IP数据报的选路和转发都需要以IP地址为基础的。</p><p>IP地址是一个32比特（4字节）的二进制数字，为了方便人们记忆和书写，采用了点分十进制的写法。将IP地址的32比特分成4组，每组8比特（1字节），字节之间用点间隔，每组的8比特用对应的十进制数字表示，这种表示方法称为点分十进制。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%82%B9%E5%88%86%E5%8D%81%E8%BF%9B%E5%88%B6.png" alt="点分十进制"></p><p>IP地址具有以下特点：</p><ul><li>IP地址是一个逻辑上的地址，与具体的网络技术和硬件无关，可以人为指定或通过DHCP服务器动态获得。</li><li>IP地址是分配给网络接口的，与网络接口相关联，一个接口一个IP地址。</li></ul><p>通常情况下，主机只有一个网络接口（即网卡），所以一个主机只有一个IP地址，而路由器有多个网络接口，连接多个网络，所以路由器会有多个IP地址。</p><p>每个IP地址分为两部分：网络号和主机。网络号代表主机或路由器所处的物理网络，主机号代表所处物理网络中的编号。</p><p>同一个物理网络中的IP地址，它们的网络号是相同的，但主机号不同例如<code>202.113.1.1</code>、<code>202.113.1.2</code>、<code>202.113.1.3</code>这三个IP地址处于同一个物理网络，前三个字节是网络号，相同的，第四个字节是主机和，是不同的。不同的物理网络，IP地址网络号应该不同，一个物理网络应该对应一个IP网络号。</p><p><strong>IP地址的分类</strong></p><p>早期根据网络号和主机号所站比特位数不同，将IP地址分为A、B、C、D、E五大类，其中A、B、C类地址称为单播地址，用来分配给主机和路由器。D类IP地址以224 ~ 239之间的数字开头，是作为组播地址预留的。Internet中大多数数据传输是点对点的，而组播是一种点对多的传输方法，在Internet上有特殊应用，如电话会议或视频会议。E类IP地址以240 ~ 254之间的数字开头，作为保留地址。D类和E类IP地址都不用来分配给主机或路由器。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E5%9C%B0%E5%9D%80%E7%9A%84%E5%88%86%E7%B1%BB.png" alt="IP地址的分类"></p><p><strong>A、B、C类的网络数目</strong></p><ul><li>A类网络，网络位占8个比特，第一位固定为0，因此最小的网络号是0（00000000），最大的一个网络号是127（11111111）。但在IP地址中，全0网络号有特殊的含义和用途，保留不分配；网络号是127的IP地址也保留作为环回测试地址，所以A类网络号有效范围是1至126，共有126个A类网络。</li><li>B类网络，网络位占14个比特，前两位固定位10，所以不存在全0或全1的B类网络号，因此B类网络 数目共有2^14个。</li><li>C类网络，网络占位24个比特，前三位固定位110，所以C类的网络数目位2^21个</li></ul><p><strong>网络所拥有的主机数</strong></p><p>对于某个IP网络（网络号确定）,如果主机占位N个比特，那么地址空间位2^N，但全0和全1的主机地址有特殊含义，不分配，所以可供分配的IP地址数目为2^N-2。</p><p>每个A类网络，主机位有24比特，可分配的IP地址是2^24-2个。每个B类网络，主机位有16比特，可以分配的IP地址数是2^16-2。每个C类网络，主机位有8比特，可分配的IP地址数是2^8-2。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/ABC%E7%B1%BBIP%E5%9C%B0%E5%9D%80%E8%8C%83%E5%9B%B4%E5%92%8C%E6%AF%8F%E4%B8%AA%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%B8%BB%E6%9C%BA%E6%95%B0%E7%9B%AE.png" alt="ABC类IP地址范围和每个网络中的主机数目"></p><p>第一个字节范围在1-126的是A类，128-191的是B类，192-223的是C类。</p><p><strong>特殊的IP地址</strong></p><ul><li>全0和全1地址</li></ul><p>在IP地址中，网络号和主机号都有可能出现全0或全1的情况，全0和全1在IP地址中有特殊的含义，不分配。简单的讲全0代表“本”，全1代表“所有”。在特殊的IP地址中，最常用的是某网络的网络号和广播地址。网络号代表整个网络，广播地址代表网络中所有的主机。如<code>223.1.2.0</code>表示一个C类网络的网络号，代表这个C类网络，<code>223.1.2.225</code>是这个网络的广播地址，代表<code>223.1.2.0</code>网络中的所有主机。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%85%A80%E5%92%8C%E5%85%A81%E7%9A%84%E7%89%B9%E6%AE%8A%E5%9C%B0%E5%9D%80.png" alt="全0和全1的特殊地址"></p><ul><li>换回地址</li></ul><p>网络号为127的地址作为环回地址，保留作为本地软件测试，也不分配。最常用的环回地址是127.0.0.1，代表本机，即不论网络接口分配的IP地址是多少，127.0.0.1总代表主机或路由器本身。</p><ul><li>私有IP地址</li></ul><p>接入Internet的IP地址必须向IP地址管理机构申请才可以使用，全球唯一，这类地址称为公有地址（public address）</p><p>如果只在组织机构内部自由使用，不接入Internet，可以直接使用私有IP地址（private address），不需要申请。</p><p>私有IP地址的范围</p><ol><li>10.0.0.0~10.255.255.255</li><li>172.16.0.0~172.31.255.255</li><li>192.168.0.0~192.168.255.255</li></ol><p>私有地址只能在一个机构内部使用，不能访问Internet</p><ul><li>链路本地地址</li></ul><p>主机的IP地址可以通过两种方式获得：</p><ol><li>手工为主机分配IP地址，这样的地址称为静态IP地址。除非重新配置，否则地址不会变化。</li><li>从DHCP服务器动态获取IP地址，动态IP地址可能会发生变化。</li></ol><p>当主机台配置通过DHCP服务器动态获取IP时，如果由于服务器故障或其他原因，无法获得IP地址，这时操作系统会为本机指定一个<code>169.254</code>开头的IP地址，地址范围是<code>169.254.0.0</code>到<code>126.254.255.255</code>,这个地址称为链路本地地址（Link lock Addresses），在RFC3330中规定，在主机动态获取IP地址失败时有操作系统指定。</p><h2 id="IP子网"><a href="#IP子网" class="headerlink" title="IP子网"></a>IP子网</h2><p>分配IP地址时，每个物理网络要占用一个IP网络号，不同的物理网络就要有不同的IP网络号。随着接入因特网的物理网络越来越多，每增加一个网络就要分配一个IP网络号。这样就带来了两个严重的问题。</p><ol><li>地址浪费。对于一个B类的网络，可以容纳的主机数目为6万多个，而实际上一个物理网络中不可能有如此多的主机。对于A类网络而言，一个网络中可以有1600多万个主机，更是存在着巨大的地址浪费。</li><li>路由表急剧膨胀。因特网中的路由器内都有一个路由表，记录IP网络的信息。网络数据的激增造成IP网络的激增，路由表也急剧膨胀，给路由器的性能也带来了很大的负面影响。</li></ol><p>解决思路：IP子网</p><p>IP子网让多个物理网络共用一个IP网络号，减少地址的浪费，方便管理。</p><p><strong>IP子网划分</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86.png" alt="子网划分"></p><p>IP子网划分是将原来属于主机的比特“借”过来作为子网号，原来的网络号与子网号共同组成IP地址的网络部分。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%AD%90%E7%BD%91%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="子网示例图"></p><p>划分IP子网是一个机构内部的事情，即子网只在机构内部可见，对于外部是不可见的。</p><p><strong>根据所需子网数目划分</strong></p><p>如果需要划分m个子网，假设需要借用N位主机位，那么两者应该满足2^N&gt;&#x3D;m，N位二进制数共有2^N种组合，每种组合都可以作为一个子网号。</p><p>例：一个B类的网络128.1.0.0要划分3个子网，则m&#x3D;3,根据2^N&gt;&#x3D;m,N的最小值为2，N取大于2的值也同样能够满足划分3个子网的需求，但是多“借”了主机位会使主机位减少造成每个子网中能够分配的主机数目减少。当N&#x3D;2时，2位二进制数字的组合为00，01，10，11，共有四个子网可以选择</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E5%AD%90%E7%BD%91%E5%9C%B0%E5%9D%80%E8%8C%83%E5%9B%B4.png" alt="IP子网地址范围"></p><p><strong>子网掩码</strong></p><p>出现IP子网后，任意给定一个IP，如<code>63.1.2.3</code>虽然是个A类的IP地址，但是可能划分了子网，仅从一个IP地址中无法获知“借”了多少位划分子网，所以子网号和主机号都无法确定，如何确定一个IP的网络部分（包括子网）和主机部分这时就需要使用子网掩码。</p><p>子网掩码是一个32比特的数字，与IP地址是一 一对应的，用来标识IP地址中哪些位是网络位，哪些位是主机位。</p><p>确定子网掩码的具体方法是：子网掩码中的1对应IP地址中的网络号和子网号，子网掩码中的0对应IP地址中的主机号。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png" alt="IP地址与子网掩码"></p><p>为了方便书写和记忆，子网掩码也采用点分十进制的表示方法。</p><p>例：B类网络<code>128.1.0.0</code>借用了2个主机位划分子网，而B类地址网络位本身有16位，所以子网主机的IP地址中网络部分共有16+2&#x3D;18位，因此对应的子网掩码为<code>11111111 11111111 11000000 00000000</code>，写成点分十进制的形式为<code>255.255.192.0</code></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81.png" alt="IP子网掩码"></p><p>计算网络号</p><p>有了IP地址和对应的子网掩码，就能确定这个IP地址的网络部分（包括子网）和主机部分。计算机的方法是将IP地址和子网掩码按位进行“与”运算（同1为1，1与其他等于其他本身）。</p><p>例：IP地址<code>128.1.34.1</code>的子网掩码为<code>255.255.224.0</code></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%BD%91%E7%BB%9C%E5%8F%B7%E7%9A%84%E8%AE%A1%E7%AE%97.png" alt="网络号的计算"></p><p>默认的子网掩码</p><p>对于任意一个IP，不论是否划分子网，都有一个子网掩码与之对应，都可以计算处这个IP中的网络号。</p><ul><li>A类：255.0.0.0</li><li>B类：255.255.0.0</li><li>C类：255.255.255.0</li></ul><p>变长子网掩码</p><p>实际的子网划分中，每个子网内的主机数常常是不同的。在变长子网掩码（Variable Length Subnet Mask，VLSM）划分中，每个子网的所“借”的主机位可以不同，每个子网的主机数可以不同，子网掩码也可以不同，VLSM使子网分配灵活高效，能进一步节省IP地址资源。</p><p>使用VLSM进行子网划分的基本方法是：</p><ol><li>先划分需要IP地址多的子网，再划分需要IP地址少的子网，依次递减。</li><li>划分每个子网时，先根据子网内IP地址数目，计算需要的主机位数，进一步得出子网需要借的位数和子网掩码。如果子网内需要k个IP地址，那么需要的主机位数N应该满足：2^N-2&gt;&#x3D;k（去掉全0和全1的两个IP地址）。</li></ol><h2 id="无分类编制CIDR"><a href="#无分类编制CIDR" class="headerlink" title="无分类编制CIDR"></a>无分类编制CIDR</h2><p>进入20世纪90年代后，接入Internet的网络和主机日益增多，Internet得到了迅速发展，分类的IP地址体系也带来两个主要 的问题。一个是IP地址日益匮乏，另一个是因特网主干路由表项目急剧膨胀，很快将达到其理论最大数量，从而限制Internet的继续发展和扩大。</p><ul><li>IP地址日益匮乏</li></ul><p>对于多数机构和团体，C类地址提供的数量太少，不能满足需要；而申请B类或A类地址，能提供的数量又会超出其需要，很多地址都闲着不用。使用IP子网能够在一定程度上减少IP地址的浪费，但浪费问题依然存在。</p><ul><li>路由表项目急剧膨胀</li></ul><p>每个路由器中都有一个路由表，路由表中记录了如何到达其他网络的信息，一个网络对应一个表项，路由器通过查找表来转发IP数据报。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%B7%AF%E7%94%B1%E8%A1%A8%E6%9D%A1%E7%9B%AE%E5%AF%B9%E5%BA%94%E5%9B%BE.png" alt="网络与路由表条目对应图"></p><p>网络数目越多，表象就会越多。一个路由器内的资源是有限的，路由表项不可能无限增大，并且路由表项的增大也会延长查找路由表的时间，降低路由器的工作效率。</p><p>基于以上的问题，提出了无类别域间路由（Classless Inter-Domain Routing，CIDR）。CIDR取消了原来IP地址A，B，C类的划分，使用13 ~ 27位不等的网络前缀代替原来的网络号。基于VLSM，CIDR能够更精细的分配IP地址，减少浪费，同时CIDR可以将多个网络号合并成一个超网，大大减小了路由表项的数目。CIDR相关的RFC文档是RFC1517~1520。</p><p><strong>CIDR地址块</strong></p><p>在CIDR中，一个IP地址由两部分组成：网络前缀和主机号。CIDR采用斜线记法来表示IP地址，例如<code>21.3.56.45/25</code>，其中的<code>/25</code>表示这个IP地址中前25位是网络前缀，代表网络号，后面七位代表主机号。</p><p>网络前缀相同的连续IP地址组成CIDR地址块，一个CIDR地址块中最少的地址数是32（前缀为27），最多的地址数可以到50万以上（前缀为13）。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%AF%8F%E4%B8%AACIDR%E5%89%8D%E7%BC%80%E6%89%80%E5%8C%85%E5%90%AB%E7%9A%84%E5%9C%B0%E5%9D%80%E6%95%B0%E7%9B%AE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%AF%8F%E4%B8%AACIDR%E5%89%8D%E7%BC%80%E6%89%80%E5%8C%85%E5%90%AB%E7%9A%84%E5%9C%B0%E5%9D%80%E6%95%B0%E7%9B%AE2.png" alt="每个CIDR前缀所包含的地址数目"></p><p>一个CIDR地址块用这个地址块的起始地址和网络前缀表示，如<code>133.24.32.0/20</code>表示CIDR地址块中，网络前缀部分20位，主机位12位，共有2^12个地址，最小的地址和最大的地址如下</p><p>最小地址：133.24.32.0  10000101 00011000 00100000 00000000</p><p>最大地址：133.24.47.255  10000101 00011000 00111111 11111111</p><p>在CIDR中，使用掩码来表示网络前缀的位数，如<code>133.24.32.0/20</code>的掩码为<code>255.255.240.0</code>(11111111 11111111 11110000 00000000)</p><p><strong>利用CIDR分配IP地址</strong></p><p><strong>超网</strong></p><h2 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h2><p>IP协议接收运输层的数据（UDP数据报或TCP数据报），添加自己的首部，形成IP数据报。IP数据报是IP协议的传输单元。</p><p><strong>IP数据报格式</strong></p><p>IP数据报分两大部分：首部和数据。数据来自高层协议，首部含有控制信息，IP协议利用这些控制信息来实现IP数据报的选路转发。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F.png" alt="IP数据报格式"></p><ul><li>版本：4bit，IP协议的版本，目前为4（即IPv4）</li><li>首部长度：4bit，以4字节为单位的IP首部长度，最大值15，首部最长60字节</li><li>服务类型：8bit，以表示IP数据报优先级，多在QoS中使用，默认情况下为全0</li><li>总长度：16bit，IP数据报的总长度（包括首部），最大值为65535</li><li>表示（ID）：16bit，IP数据报的编号</li><li>标志（Flag）：3bit，1bit为MF位，1bit为DF位，1bit保留未用。MD和DF位用于IP数据报分片</li><li>片偏移（Offset）：13bit，用于IP数据报分片时，指出分片第一字节在原数据报中的位置</li><li>生存时间（TTL）：8bit，表示IP数据报可以经过路由器的个数，每经过一个路由器，TTL值减1，当TTL值减为0时，路由器会丢弃IP数据报</li><li>协议：8bit，用来表示IP所封装的高层协议</li><li>首部校验和：16bit，用于检查IP首部的错误，计算方法类似于UDP校验和</li><li>源地址：32bit，IP数据报发生接口的IP地址</li><li>目的地址：32bit，IP数据报目的地接口的IP地址</li><li>可选字段：长度可变，最大40字节，用于IP协议的一些高级选项，如记录路径、源站选路等，多数情况下没有此字段</li><li>填充：全0，在有可选字段时，填充IP首部，确保IP首部为32bit整数倍</li></ul><p><strong>IP数据报分片与重组</strong></p><p>IP数据报需要被封装在下层的数据链路层帧中传递，数据链路层对于要运输的载荷通常会有大小的限制，这个限制称为最大传输单元（Max Transfer Unit，MTU），不同的链路层技术MTU不同，例如以太网的MUT是1500字节，FDDI的MTU是4352字节。MTU的大小限制了能够传送IP数据报的大小。</p><p>当IP数据报的大小超过了低层的MTU时，IP协议就需要将其划分成几个小的分片发生，当收到分片后，IP协议需要将分片重组成原来大的IP数据报，这个过程称为IP数据报的分片和重组。</p><p>IP使用标识、标志、片偏移字段来控制IP数据报的分片与重组。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%88%86%E7%89%87%E7%A4%BA%E4%BE%8B.png" alt="IP数据报分片示例"></p><p><strong>IP数据报的发送</strong></p><p>发送IP数据报是IP协议的核心功能，IP协议根据IP数据报首部中的目的IP地址，为IP数据报选择一条路线，将其送到目的地，主机和路由器都参与数据报的发送。</p><p><strong>直接发送和间接发送</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E7%9A%84%E5%8F%91%E9%80%81%E8%BF%87%E7%A8%8B.png" alt="IP数据报的发送过程"></p><p>直接发送：当源主机和目的主机位于同一个物理网络中时，IP数据报可以直接发送给目的地。如图中的主机B和主机C。</p><p>间接发送：源主机的主机在不同的物理网络中，不能直达，IP数据报需要经过路由器转发才能到达目的地。如图中的主机A和主机E，IP数据报必须经过路由器R1，R2，的转发才能到达接收方，即A到R1到R2到E。</p><p><strong>选路的基本原则</strong></p><ul><li>根据目的IP选路：每个IP数据报首部中都有目的IP地址，目的IP地址指明了IP数据报的目的地。主机和路由器都会读取目的IP地址，根据目的地选路。</li><li>下一站选路：在选路时，每个站点（主站或路由器）只能确定到达目的地路径上的下一站，而并不知道整条路径。</li></ul><p>下一站选路简化了网络设计，对站点隐藏了后面网络的细节，使得站点能够以最少的信息进行选择。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%80%89%E8%B7%AF%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99.png"></p><p><strong>路由器</strong></p><p>路由器是网络互联的核心设备，它连接不同的网络，在网络之间转发IP数据报。路由器实际上是一个专门执行IP数据报转发的专用计算机，包括控制部件（CPU，RAM，OS）、路由表、协议软件和网络接口（LAN，WAN，CONSOLE）几个基本组成部件。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E5%A4%96%E9%83%A8%E7%BB%93%E6%9E%84.png" alt="路由器的外部结构"></p><p>路由器有许多接口，比如以太网口、串口、光纤接口等，一个接口连接一个网络。IP数据报从路由器的一个接入进入，从另一个接口发出去。因为路由器能够识别和转发IP数据报，所以称路由器是工作在网络层的设备。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BD%AC%E5%8F%91IP%E6%95%B0%E6%8D%AE%E6%8A%A5.png" alt="路由器转发IP数据报"></p><p><strong>路由表</strong></p><p>在IP数据报转发的过程中，每个节点都需要确定IP数据报的下一站。主机和路由器根据IP数据报的目的IP地址，通过查找路由表确定下一站。主机和路由器都有路由表。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%B7%AF%E7%94%B1%E8%A1%A8%E4%BE%8B.png" alt="路由表列"></p><p>路由表记录了由本设备出发，到达目的网络路径上的下一站信息，不会记录达到目的网络的完整路径。路由表由目的网络，子网掩码和下一站三部分组成。不同设备的路由表，表项不同，但都包含到达所有网络的下一站信息。</p><p>关于路由表需要注意两点：</p><ol><li>路由表以网络号为目的地，而不是以主机IP地址为目的地，一个IP网络号可以代表这个网络中所有主机，因此可以大大缩小路由表的大小。</li><li>路由表记录的是到达目的网络路径上的下一站，不是全部路径。当数据报被送到下一站后，下一站的路由器也会检查字节的路由表，将数据报送到第二个下一站，就这样一站一站地传递，最终数据报到达目的地。</li></ol><p>Windows下查看本机的路由表</p><pre><code>netstat -r</code></pre><p>特定主机路由器</p><p>路由表中的表项通常是针对网络的，但有时为了方便网络管理人员控制、测试网络和安全问题考虑，会为某一个特定的目的主机指明一个路由，称为特定主机路由。</p><p>默认路由</p><p>路由器在查找路由表时，会根据IP数据报的目的IP地址，对照路由表项，查看目的IP属于哪个目的网络，找到匹配的条目时，就转发到对应的下一站，如果所有路由表项都不匹配，路由器应该如何处理？</p><p>可以设置默认路由，在其他路由表项都不匹配时，将IP数据报转发到默认路由上，默认路由的网络号和子网掩码都<code>0.0.0.0</code>，默认路由是IP数据报转发的最后一个选择，通常都要设置默认路由，使用默认路由可以简化路由表。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E8%B7%AF%E7%94%B1%E7%AE%80%E5%8C%96%E8%B7%AF%E7%94%B1%E8%A1%A8.png" alt="使用默认路由简化路由表"></p><p><strong>网关</strong></p><p>网关在主机的IP数据报的发送过程中起着重要作用。简单地讲，网关就是一个网络的关口，进入和流入这个网络的IP数据报都需要经过这个关口，网关通常由路由器担当。</p><p>路由器的一个接口连接一个物理网络，路由器的接口是物理网络内的主机访问其他的网络的必要接口，称为这个网络的网关。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%BD%91%E5%85%B3.png"></p><p>同一网络内部主机之间的通信，不需要网关参与可以直接通信；不同网络之间主机的通信，一定要发送给网关由网关转发。</p><p><strong>IP数据报的发送过程</strong></p><p>主机发送IP数据报</p><p>IP数据报多数是由计算机产生的，主机的IP协议发送IP数据报时，要首先判断目的IP地址与自己是否在同一网络。如果是，就直接发送给目的地；如果不是，就采用间接发送的方式，将IP数据报发送给网关，由网关转发。</p><p>判断目的IP地址与源IP地址是否在同一个网络的方法是：</p><ol><li>源主机将IP地址和自己的子网掩码按位与，得出自己的网络号</li><li>源主机将目的IP地址与自己的子网掩码按位相与，得出一个网络号</li><li>如果两个网络号相等，那么目的IP与源IP在同一个网络，否则就在不同的网络</li></ol><p>这样计算的理由是基于一种假设：如果目的的主机和源主机在同以网络，那么目的IP地址和源主机的子网掩码按位相与，结果应该和源主机的网络号相同，否则应不同。</p><p>路由器转发IP数据报</p><p>当路由器收到IP数据报后，转发的算法如下：</p><ol><li>从IP数据报首部中获取目的IP地址D</li><li>用各直连网络的子网掩码和D逐比特相“与”，看结果是否和直连网络的网络号匹配。若匹配，则将IP数据报直接发送给D，否则继续</li><li>查看路由表中是否由目的地是D的特定主机路由器，如果有，转发IP数据报到下一站；如果没有，继续</li><li>对路由表中其他表项，依次将每一行的子网掩码和D逐比特相“与”，若其结果与该行的目的地的网络号匹配，则将IP数据报转发到对应的下一站，否则继续</li><li>查看路由表中是否有默认路由器，如果有，将IP数据报转发到默认路由，如果没有，报错</li></ol><h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><p>路由器通过查找路由表来确定IP数据报的下一站。路由表项可以通过两种方式生成。</p><ul><li>手动配置</li></ul><p>当网络管理员配置了路由器接口的IP地址、子网掩码，启动接口后，路由表中就会出现直连网络的路由。网络管理员还可以手动配置到其他网络的路由，创建路由表项，这样的路由称为静态路由。配置静态路由要求管理员对网络拓扑结构网络状态有清晰的了解，并且当网络变化是，要手动重新配置。</p><ul><li>通过路由协议学习获得</li></ul><p>路由器之间可以通过路由协议，自主学习来获得路由信息，这样的路由器称为动态路由。使用路由协议动态构建路由表不需要人工参与，并能自动适应网络状态的变化更新路由表，大型网络或状态变化频繁的网络通常会采用动态路由协议。</p><p><strong>自治系统和分层次路由</strong></p><p>因特网的网络数目巨大，几百万各路由器互相连接在一起。要让一个路由器记录每个网络信息的是不可能的，而且许多机构并不愿意自己的网络内部细节对外暴露。基于以上的原因，因特网被划分成了许多个自治系统（autonomous system，AS）。一个自治系统由同一机构管理，比如一所大学、一家大公司的网络都可以构成自己的自治系统。自治系统由一个16位长度的自治系统号进行标识，该标识由InterNIC指定并具有唯一性，一个自治系统对外体现处一个统一的路由。整个因特网可以看成是由许多自治系统组成的</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%87%AA%E6%B2%BB%E7%B3%BB%E7%BB%9F.png" alt="自治系统"></p><p>因特网的路由可以分为两个层次</p><ul><li>自治系统内部的路由</li></ul><p>内部网关协议（Interior Gateway Protocol，IGP）：RIP，OSPF</p><ul><li>自治系统之间的路由</li></ul><p>外部网关协议（Exernal Gateway Protocol，EGP）：BGP</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%87%AA%E6%B2%BB%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%86%85%E9%83%A8%E5%A4%96%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE.png"></p><p><strong>内部网关协议</strong></p><p>自治系统内部的路由器使用内部网关协议交换路由信息，常用的内部网关协议由RIP和OSPF。</p><p><strong>RIP</strong></p><p>路由信息协议（Routing Information Protocol，RIP）是路由器生产厂商之间使用的第一个开发标准，是连接不同厂商设备使用最为广泛的公共协议，早期版本是RIP-v1(RFC1058)，最新版本是RIP-v2(RFC 2453)。RIP只适合于小型的网络，是基于距离矢量的路由协议。距离表示路由器离目的网络的远近。矢量表示数据报转发的方向或下一站。</p><p>路由器到直连网络的距离位1，路由器到非直连网络的距离每所经过路由器的数目加1，RIP中距离也称为“跳数（hop count）”，每经过一个路由器，跳数就加1，RIP中距离最大有效值为15，16表示不可达。例如路由器到达网络N的距离为d，可以表示为&lt;N,d&gt; 。</p><p>RIP认为到达目的的网络距离最小的路径就是最好的路。RIP报文被UDP封装，源端口和目的端口都是520。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/RIP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%B7%AF%E7%94%B1%E8%A1%A8.png" alt="RIP协议的路由表"></p><p>RIP的优缺点</p><ul><li>优点：简单、容易实现、开销小</li><li>缺点：支持网络规模有限（最多十五跳），收敛慢</li></ul><p>RIP协议的工作原理</p><ol><li>每个路由器每隔30s给自己所有的邻居路由广播RIP报文，报文内容是这个路由器当前的路由表信息。当两个路由器共享一条链路或在同一个物理网络中时，就称它们为邻居。RIP是应用层协议，RIP报文使用UDP数据报进行传送，端口号为520.</li><li>收到邻居路由器的路由表信息后，每个路由器都要更新自己的路由表，添加新的路由表项后更改旧的路由表项。这样下一次就可以将更新后的路由表告诉自己的邻居。</li><li>如果180s内没有收到某个路由器的路由表信息，就认为这个路由器出现故障，路由表中所有以这个路由器为下一站的表项中的距离改为16，表示目的网络不可达。</li></ol><p>路由表更新算法</p><p>当收到邻居路由器广播的RIP报文后，路由器要根据距离矢量算法来更新自己的路由表。</p><p>假设路由器A收到路由器B的路由信息，那么路由器A在以下情况下会修改自己的路由表。</p><ol><li>B的路由表中包含A所不知道的网络，那么A增加路由表项。</li><li>A的路由表中包含到达某个网络的路由信息，并且下一站为X，但B的路由表包含到达这个网络的更短的路由，那么A修改自己的路由表项。</li><li>如果A包含到达某个网络的路由信息，并且下一站为B，但B的路由表中到达这个网络的距离发生了变化，那么A修改自己的路由表项。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2020/07/16/ComputerNetwork/"/>
      <url>/2020/07/16/ComputerNetwork/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h2><h5 id="计算机网络是指自主计算机的互连集合"><a href="#计算机网络是指自主计算机的互连集合" class="headerlink" title="计算机网络是指自主计算机的互连集合"></a>计算机网络是指自主计算机的互连集合</h5><ol><li>自主是指每个计算机都是自治独立的，一台计算机的运行不依赖另外一台计算机。</li><li>互连是指计算机之间能够通信，交换数据。</li></ol><h5 id="计算机网络是网络硬件和网络协议的统一体"><a href="#计算机网络是网络硬件和网络协议的统一体" class="headerlink" title="计算机网络是网络硬件和网络协议的统一体"></a>计算机网络是网络硬件和网络协议的统一体</h5><h2 id="计算机网络的功能与应用"><a href="#计算机网络的功能与应用" class="headerlink" title="计算机网络的功能与应用"></a>计算机网络的功能与应用</h2><ol><li>数据通信</li><li>资源共享</li><li>信息服务</li><li>分布式计算</li></ol><h2 id="计算机网络的产生和发展"><a href="#计算机网络的产生和发展" class="headerlink" title="计算机网络的产生和发展"></a>计算机网络的产生和发展</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%BD%A2%E6%88%90.png"></p><h5 id="20世纪50至60年代-计算机网络产生"><a href="#20世纪50至60年代-计算机网络产生" class="headerlink" title="20世纪50至60年代-计算机网络产生"></a>20世纪50至60年代-计算机网络产生</h5><ul><li>第一个计算机网络：<strong>ARPANET</strong></li></ul><h5 id="20世纪70至80年代-因特网和局域网发展时期"><a href="#20世纪70至80年代-因特网和局域网发展时期" class="headerlink" title="20世纪70至80年代-因特网和局域网发展时期"></a>20世纪70至80年代-因特网和局域网发展时期</h5><ul><li>局域网技术的出现</li><li>ARPANET和NSFNET的发展</li><li>网络体系结构的形成和网络互连技术的发展</li></ul><h5 id="20世纪90年代-因特网大发展时期"><a href="#20世纪90年代-因特网大发展时期" class="headerlink" title="20世纪90年代-因特网大发展时期"></a>20世纪90年代-因特网大发展时期</h5><ul><li>WWW</li><li>美国：信息高速公路</li><li>欧共体：欧洲信息空间（EIS）计划</li><li>新加坡：智能岛</li><li>中国：1994年4月正式通过64Kb&#x2F;s的专线接入因特网；三金工程</li></ul><h5 id="20世纪-网络和信息化的社会"><a href="#20世纪-网络和信息化的社会" class="headerlink" title="20世纪-网络和信息化的社会"></a>20世纪-网络和信息化的社会</h5><ul><li>三网融合</li><li>下一代互联网技术：IPV6,NGI,CERNET2</li><li>物联网</li></ul><h2 id="计算机网络的组成和结构"><a href="#计算机网络的组成和结构" class="headerlink" title="计算机网络的组成和结构"></a>计算机网络的组成和结构</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="计算机网络结构图"></p><p>计算机网络可以看成由三部分组成：</p><ul><li>端系统：包括主机、服务器、手机等。端系统产生、接收和处理数据。</li><li>交换设备：包括路由器、交换机等。交换设备将端系统产生的数据从源端转发到目的端。</li><li>通信线路：包括光纤、铜缆、无线电等。通信线路将端系统、交换设备互相连接起来。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/ISP%E5%B1%82%E7%BA%A7%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="ISP层级结构图"></p><p>完成网络通信的认为，除了硬件设施外，还需要软件来控制消息的传递。在端系统和交换设备上都运行了特定的软件，这些软件称为网络协议。网络协议控制着网络中信息的传递，是计算机网络的核心内容。</p><h2 id="数据交换技术"><a href="#数据交换技术" class="headerlink" title="数据交换技术"></a>数据交换技术</h2><p>数据交换技术分为三类：电路交换、报文交换、分组交换。计算机网络采用都是分组交换技术，这是由计算机网络的通信特点和要求决定的。计算机网络的产生具有军事背景，因此要求网络具有较强的灵活性和适应能力，在部分受到破环后通信能够正常进行；同时计算机之间的通信还具有突发性，可能一段事件内都没有数据，而突然在短时间内会有大量数据发送。</p><h5 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h5><p>电路交换是在电话系统中使用的核心交换技术。电话系统中有许多交换机，这些交换机是分层次的，与用户直接相连的是本地交换机，本地交换机与上一级交换机相连，这样层层相连，构成一个庞大的电话网络。用户电话和本地交换机之间的线路称为用户线，交换机之间的线路称为干线。</p><p>特点：</p><ul><li>面向连接的特性</li><li>通信资源的独占性</li></ul><p>电路交换不适合计算机网络通信</p><ul><li>突发性</li><li>灵活性</li></ul><h5 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h5><p>报文交换起源于电报系统，传输的单位称为报文。报文包括正文和地址信息，报文可长可短，报文交换采用的是存储转发机制，不需要事先建立连接。</p><p>优点：</p><ul><li>报文交换不需要事先建立连接，可以直接发送数据，比较灵活。</li><li>每个报文分段占用线路，报文交换机也不用为报文预留资源，资源利用率比较高。</li></ul><p>缺点：</p><ul><li>时延要比电路交换大。</li><li>要完整地接收传来的整个报文，因此要求交换机有较大的缓存区。</li><li>报文长度没有限制，对于大的报文，延时和缓存占用会更大。</li></ul><h5 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h5><ul><li>分组交换原理</li></ul><p>分组交换技术起源于ARPANET网络，与报文交换类型，也采用存储转发机制，存储交换是分组交换的核心。与报文交换不同，分组交换会将一个大的报文分解成若干个小的数据块，每个数据块会添加一个首部，组成一个分组。分组是分组交换技术的传输单元。分组的首部中含有控制信息（包括目的地的信息）。在数据前添加首部就如同把一封信装入信封，有了信封的地址，信息能被送到目的地。</p><p>数据前面添加首部，首部中含有主机的地址等控制信息。数据和首部共同组成分组。分组进入交换设备，在交换设备内缓存、排队，交换设备根据首部内地址信息，查找转发表转发分组称为存储转发。</p><p>在分组交换网络中，有许多分组交换机，它们之间有高速的链路连接，主要作用是转发分组。每个主机都能连接到一台分组交换机上。</p><p>分组交换特点：</p><ul><li>分组分段的占用通信链路，通信资源利用率高。</li><li>每个分组独立传输，灵活性好，网络适应能力强。</li></ul><p>分组交换技术适合计算机网络</p><hr><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%B8%89%E7%A7%8D%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF%E6%AF%94%E8%BE%83.png" alt="三种交换技术的比较"></p><h5 id="分组交换技术分类"><a href="#分组交换技术分类" class="headerlink" title="分组交换技术分类"></a>分组交换技术分类</h5><p>分组交换在具体技术实现上，可以分为<strong>数据报</strong>和<strong>虚电路</strong>两种方式。</p><p><strong>数据报</strong></p><p>数据报是因特网所采用的交换技术。</p><ul><li>如果主机有数据发送，就生成分组直接交给交换设备转发。</li><li>每个分组的首部都包含目的地完整的地址，每个分组被独立的转发，到达同一台主机的分组可能会走不同的路。</li><li>Internet采用的是数据报方式。</li><li>数据报技术可以自适应网络变化，分组可能会走不同的路到达目的地。</li></ul><p><strong>虚电路</strong></p><ul><li>在虚电路方式中，发送数据前，发送方首先要呼叫接收方，呼叫的目的是为了确定一条从发送方到接收方的路。</li><li>主机和途径的交换设备都会记录这条路的信息，这条路叫做虚电路，使用虚电路号来表示。</li><li>虚电路建立完毕后，此后所有的分组都要走这条路，分组首部写入虚电路号，不需要写目的地的完整地址。</li><li>数据传输完毕后，还需要拆除虚电路。</li></ul><table><thead><tr><th></th><th align="center">虚电路</th><th align="center">数据报</th></tr></thead><tbody><tr><td>基本思路</td><td align="center">交换网络比较复杂，由网络处理传输中的大多数问题</td><td align="center">交换网络尽量简单，由主机处理传输中的大多数问题</td></tr><tr><td>连接建立</td><td align="center">需要建立连接</td><td align="center">不需要建立连接</td></tr><tr><td>目的地址</td><td align="center">建立连接时使用，以后分组使用虚电路号</td><td align="center">每个分组都要使用目的地的完整地址</td></tr><tr><td>灵活性</td><td align="center">出故障后，虚电路需要重建</td><td align="center">分组可以绕开故障点，灵活性好</td></tr><tr><td>分组的按序达到</td><td align="center">能够保证按序到达</td><td align="center">不能保证按序到达</td></tr></tbody></table><h2 id="计算机网络的主要性能指标"><a href="#计算机网络的主要性能指标" class="headerlink" title="计算机网络的主要性能指标"></a>计算机网络的主要性能指标</h2><p>计算机网络的性能指标包括带宽、时延、吞吐量、时延带宽积、往返时间等。</p><h5 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h5><ul><li>带宽原本是通信领域的概念，是指某个信号所具有的频带宽度，单位为赫兹（Hz），任何一个信号可以看成是由不同频率的正弦信号叠加组成的，这些正弦信号中，最高频率和最低频率的差称为信号的带宽。</li><li>计算机网络中借用了带宽的概念。用带宽表示数据的发送速率，单位为比特每秒（b&#x2F;s），意思是一秒钟能够发送的比特数，因此带宽又被称为比特率。更常用的带宽单位为kb&#x2F;s(10^3b&#x2F;s)，Mb&#x2F;s（10^6b&#x2F;s），Gb&#x2F;s（10^9&#x2F;bs）。</li></ul><h5 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h5><p>时延是指一个分组从一台主机经过分组交换网络到达目的地主机所需的时间。</p><p><strong>四种时延</strong></p><ul><li>发送时延</li></ul><p>发送时延是分组从主机或分组交换机内部到线路上所花的时间。</p><p>发送时延&#x3D;分组长度&#x2F;线路带宽。带宽越大，发送时延越小。</p><ul><li>传播时延</li></ul><p>传播时延是分组在线路上传播所用的时间</p><p>传播时延&#x3D;线路长度&#x2F;信号在线路上的传播速度。线路越长，传播时延越大。</p><p>如果线路为光纤，信号的传播速度为30万公里&#x2F;秒；如果为铜线，信号的传播速度约为20万公里每秒（光速的三分之二）。</p><ul><li>处理时延</li></ul><p>分组进入分组交换机，分组交换机要进行差错检测，读取分组首部信息，计算决定分组的下一站，这部分所花费的时间是处理时延。处理时延与分组交换机的性能有关。不能作定量的计算。</p><ul><li>排队时延</li></ul><p>在分组交换机内部，分组会按照到达的先后顺序进行转发，如果前面有分组还没有处理完，后面分组就要排队。在队列中等待的时间称为排队时延。排队时延与网络状况，队列长度，交换的处理能力都相关，也无法做定量的计算。</p><h5 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h5><p>时延带宽积是指传播时延和线路带宽的乘积</p><p>时延带宽积&#x3D;传播时延*速度</p><p>时延带宽积表示当线路充满比特时，线路上的比特数目。</p><p><strong>例</strong></p><p> 收发两端之间的传输距离为 10km，信号在媒体上传播速率为 2*108m&#x2F;s。试计算若数据块</p><p> 长度为 1500bit，带宽为 100Mb&#x2F;s 的情况下，它的传播时延和发送时延。</p><p> 答：传播时延&#x3D;10km&#x2F;2x10^8m&#x2F;s&#x3D;5x10^-5s</p><p>​         发送时延&#x3D;1500bit&#x2F;100Mb&#x2F;s&#x3D;1.5x10^-5s</p><h2 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h2><p><strong>传输技术分类</strong></p><ul><li>广播式网络</li><li>点对点式网络</li></ul><p><strong>网络规模分类</strong></p><ul><li>局域网</li><li>城域网</li><li>广域网</li></ul><p><strong>网络所有者分类</strong></p><ul><li>共有网</li><li>私有网</li></ul><h2 id="计算机网络的拓扑结构"><a href="#计算机网络的拓扑结构" class="headerlink" title="计算机网络的拓扑结构"></a>计算机网络的拓扑结构</h2><p>计算机网络的拓扑结构用来描述网络中结点与通信的连接关系，反映计算机网络的总体框架和结构。常见的计算机网络拓扑结构有：星型，环型，总线型，树型，网状型。</p><ul><li>星型拓扑</li></ul><p>在星型拓扑中，每个结点都通过通信线路与一个中心结点相连，中心结点控制全网的通信，任何两个结点的通信都需要经过中心结点。星型拓扑结构简单，易于管理和扩展，但是如果中心节点出现问题，则整个网络的通信就会瘫痪。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%98%9F%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="星型拓扑"></p><ul><li>环型拓扑</li></ul><p>在环型拓扑中，各个结点通过通信线路连接成一个封闭的环路，一个结点发出的信息会沿着换流动，到达每一个结点。环型拓扑结构简单，传输延时确定。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%8E%AF%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="环型拓扑"></p><ul><li>总线型拓扑</li></ul><p>在总线型拓扑中，所有的结点共享一条通信线路，一个结点发出的信息沿总线传播，可以被所有的结点接收到。当有两个结点同时发送数据时，就会发生冲突，因此需要对通信链路的使用权进行协调。如果总线发生故障，则所有的通信都不能进行。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%80%BB%E7%BA%BF%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="总线型拓扑"></p><ul><li>树型拓扑</li></ul><p>树型拓扑就像一个树根朝上的树，各个结点分层次地接入网络。树型拓扑比较容易扩展，故障也容易分离处理，但是如果根节点出现故障，则会影响整个网络的通信。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%A0%91%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="树型拓扑"></p><ul><li>网状型拓扑</li></ul><p>在网状型拓扑结构中，结点之间的连接是没有规律的，结点间的连线构成一张网。网状拓扑的特点是可靠性好，存在冗余路径，当一条线路损坏时整个网络仍然可以工作。单是网状型拓扑比较复杂，需要采用路由选择算法才能正确的传输数据。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%BD%91%E7%8A%B6%E5%9E%8B%E6%8B%93%E6%89%91.png" alt="网状型拓扑"></p><h2 id="网络标准化"><a href="#网络标准化" class="headerlink" title="网络标准化"></a>网络标准化</h2><ul><li>ITU：国际电信联盟</li><li>ISO：国际标准化组织</li><li>IEEE：电气和电子工程师协会</li><li>国际互联网协会</li><li>因特网体系结构委员会</li><li>因特网工程任务组：RFC文档</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 绪论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象设计七大原则</title>
      <link href="/2020/07/13/DesignPhilosophy/"/>
      <url>/2020/07/13/DesignPhilosophy/</url>
      
        <content type="html"><![CDATA[<blockquote><p>存在的根本原因是为了更好的复用代码增加代码的可维护性，这些原则并不是孤立存在的，他们相互依赖，相互补充。</p></blockquote><h2 id="开闭原则（Open-Close-Principle）"><a href="#开闭原则（Open-Close-Principle）" class="headerlink" title="开闭原则（Open Close Principle）"></a>开闭原则（Open Close Principle）</h2><p>软件实体（包括类、模块、功能等）应该对扩展开放，但是对修改关闭。 </p><p>对扩展开放，对修改关闭， 即在程序需要进行拓展的时候，不能去修改原有的代码，只能增加新的代码。即已经发生的已经不可以改变 ，我们只能改变那些事情对现在的影响。</p><h2 id="里氏转换原则（Liskov-Substitution-Principle）"><a href="#里氏转换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏转换原则（Liskov Substitution Principle）"></a>里氏转换原则（Liskov Substitution Principle）</h2><p>子类继承父类，任何基类出现的地方，一定可以用子类替代出现。子类可以扩展父类功能，但不能改变父类原有功能。核心思想是继承。 通过继承，引用基类的地方就可以使用其子类的对象了。即子类是对父类的完全复制，父类可以被子类完全替代，子类可以增加新的内容，而且不影响父类。</p><h2 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a>依赖倒转原则（Dependence Inversion Principle）</h2><p>引用一个对象，如果这个对象有底层类型，直接引用底层类型。依赖倒置原则的本质就是通过抽象(接口或抽象类)使各个类或模块的实现彼此独立，不互相影响，实现模块间的松耦合。</p><h2 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h2><p>使用多个隔离的接口，比使用单个接口要好，每一个接口应该是一种角色。不要在一个接口里面放很多的方法，这样会显得这个类很臃肿。接口应该尽量细化，一个接口对应一个功能模块，同时接口里面的方法应该尽可能的少，使接口更加灵活轻便。单一职责原则是在业务逻辑上的划分，注重的是职责。接口隔离原则是基于接口设计考虑。</p><h2 id="合成-x2F-聚合复用原则（Composite-Reuse-Principle）"><a href="#合成-x2F-聚合复用原则（Composite-Reuse-Principle）" class="headerlink" title="合成&#x2F;聚合复用原则（Composite Reuse Principle）"></a>合成&#x2F;聚合复用原则（Composite Reuse Principle）</h2><p>新的对象应使用一些已有的对象，使之成为对象的一部分。即用已经有的东西合成新的东西，使原来的东西成为新东西的一部分。</p><h2 id="迪米特原则（Demeter-Principle）"><a href="#迪米特原则（Demeter-Principle）" class="headerlink" title="迪米特原则（Demeter Principle）"></a>迪米特原则（Demeter Principle）</h2><p>也叫最少知识原则，一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立，即一个对象应对其他对象尽可能少的了解。多个对象之间应该尽量避免有任何关联。</p><h2 id="单一职责原则-Single-Responsibility-Principle"><a href="#单一职责原则-Single-Responsibility-Principle" class="headerlink" title="单一职责原则 ( Single Responsibility Principle)"></a>单一职责原则 ( Single Responsibility Principle)</h2><p>一个类被改变的原因不能超过一个，也就是说，一个类的职责只有一个，如果职责过多，代码就会臃肿，可读性更差，也就更难以维护事实上单一职责和原则和接口隔离原则有一定的关系，接口隔离之后，职责就单一了，实现这个接口的类的职责就单一了。但是接口隔离关注的是抽象层，单一职责关注的是两者兼而有之，偏重于实现。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2020/06/30/Maven/"/>
      <url>/2020/06/30/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MavenDownload.png"></p><p>下载完，直接解压，copy到一个无中文的目录，并且创建一个新的maven-repository目录。一下便是解压后的Maven目录结构。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/Maven.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.首先确保电脑JDK已经安装好，进入环境变量的系统变量新建变量名<code>MAVEN_HOME</code>，值为刚才解压的Maven文件的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MAVEN_HOME.png"></p><p>2.确认后再进入到系统变量的<code>Path</code>新建<code>%MAVEN_HOME%\bin</code></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MAVEN_Path.png"></p><p>3.在cmd窗口输入<code>mvn -v</code>显示出版本信息则说明已经配置成功。</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p><strong>修改localRepository</strong></p><p>进入<code>conf\settings.xml</code>文件在<localRepository>标签内修改它的默认存储路径。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MavenLocalRepository.png"></p><p><strong>阿里云镜像</strong></p><p>添加<mirrors>标签下<mirror>，添加国内镜像源，这样下载jar包速度很快。默认的中央仓库有时候甚至连接不通。一般使用阿里云镜像库即可。这里我就都加上了，Maven会默认从这几个开始下载，没有的话就会去中央仓库了。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MavenMirror.png"></p><pre class=" language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><h2 id="Intillij-IDEA"><a href="#Intillij-IDEA" class="headerlink" title="Intillij IDEA"></a>Intillij IDEA</h2><p>在settings种配置Maven</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MavenIDEA.png"></p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MavenProject.png"></p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li><p>Maven的库是由开源组织维护，不需要我们再花精力去管第三方库，即使自己维护，也比较方便。</p></li><li><p>Maven对jar包的版本管理有工具上的支持，比如将Release版本和Snapshot版本区分开，有利于SCM管理。</p></li><li><p>Maven的库下载是即用即下，不需要实现全部down下来。Maven的插件也是自动升级，可以方便的。</p></li><li><p>可以很方便的与eclipse, IDEA这样的主流的IDE集成。</p></li><li><p>仓库管理器：它的出现有两个目的：首先它的角色是一个高度可配置的介于你的组织与公开Maven仓库之间的代理，其次它为你的组织提供了一个可部署你组织内部生成的构件(第二方库)的地方。</p></li></ul><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><ul><li><p>本地仓库–存在本地的仓库 （使用）</p></li><li><p>中央仓库 –存在远程网上（使用）</p></li><li><p>镜像 – 在国内搭建的服务器 比较出名阿里云镜像（使用）</p></li><li><p>私服 – 公司自己搭建一个容器服务(私服) 所有的jar包放入到私服上面 ，公司内部人员下载jar包 就使用私服</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 项目管理 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC+JSP实现文件上传</title>
      <link href="/2020/06/10/SpringmvcLoadFile/"/>
      <url>/2020/06/10/SpringmvcLoadFile/</url>
      
        <content type="html"><![CDATA[<blockquote><p>eclipse以一个点餐系统添加新菜品为例来讲解文件上传，图片上传功能。</p></blockquote><h3 id="导入需要的jar包"><a href="#导入需要的jar包" class="headerlink" title="导入需要的jar包"></a>导入需要的jar包</h3><p>1、commons-fileupload-1.2.2.jar<br>2、commons-io-2.0.1.jar</p><h3 id="在springmvc-xml的配置文件中配置"><a href="#在springmvc-xml的配置文件中配置" class="headerlink" title="在springmvc.xml的配置文件中配置"></a>在springmvc.xml的配置文件中配置</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 文件上传 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 上传文件大小限制 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10485760<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 请求的编码格式, 和 jsp 页面一致 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="JSP页面代码"><a href="#JSP页面代码" class="headerlink" title="JSP页面代码"></a>JSP页面代码</h3><p>这里只是表单提交部分，注意<code>enctype=&quot;multipart/form-data&quot;</code>以及图片的<code>input</code>标签<code>type=&quot;file&quot;</code>，jsp中 input标签当type&#x3D;”file”的时候，浏览器会把文件的内容连同form的所有字段格式化后传递到服务器。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;pageContext.request.contextPath&amp;#125;/FoodAddDo.do<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group input-group-lg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜品名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foodname<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sizing example input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group input-group-lg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>特色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feature<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sizing example input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group input-group-lg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>食材<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>material<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sizing example input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group input-group-lg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>价格/元<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sizing example input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group mb-4<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-text<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroupSelect01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>custom-select<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>家常<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>凉菜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主食<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>饮品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group input-group-lg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pitcture<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pitcture<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sizing example input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认添加<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h3 id="Controller部分"><a href="#Controller部分" class="headerlink" title="Controller部分"></a>Controller部分</h3><p>用MultipartFile对象接收文件，然后使用file的transferTo方法上传文件。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/FoodAddDo"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span> <span class="token keyword">public</span> ModelAndView <span class="token function">foodAddDo</span><span class="token punctuation">(</span>     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pitcture"</span><span class="token punctuation">)</span> MultipartFile pitcture<span class="token punctuation">,</span>     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"foodname"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String foodname<span class="token punctuation">,</span>                  <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"feature"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String feature<span class="token punctuation">,</span>     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"material"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String material<span class="token punctuation">,</span>     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"price"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> price<span class="token punctuation">,</span>     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> ModelAndView model<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     String picturePath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>     String ext <span class="token operator">=</span> FilenameUtils<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>pitcture<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// System.out.println("isEmpty："+pitcture.isEmpty()); </span>    String oriPitctureNameString <span class="token operator">=</span> pitcture<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取后缀名</span>    String extPitctureNameString <span class="token operator">=</span> oriPitctureNameString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>oriPitctureNameString<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> oriPitctureNameString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加上点儿 </span>    picturePath <span class="token operator">=</span> <span class="token string">"images/newfood/"</span> <span class="token operator">+</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extPitctureNameString<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以时间点命名保证文件名称的唯一性 </span>    <span class="token comment" spellcheck="true">// System.out.println("picturePath:"+picturePath); </span>    <span class="token comment" spellcheck="true">// picturePath:/images/newfood/...... </span>    String pathString <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span>picturePath<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// System.out.println("pathString:"+pathString); </span>    <span class="token comment" spellcheck="true">// 这是上传后我们在Tomcate找图片的路径，pathString:D:\Program </span>    <span class="token comment" spellcheck="true">// Files\apache-tomcat-9.0.5\apache-tomcat-9.0.5\wtpwebapps\zhouhailin0506_MealSystem\images\newfood\...... </span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pitcture <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//文件上传 pitcture.transferTo(file);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//写入数据库，注意存入数据库的是字符串新式的路径，图片文件在pathString中 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fooddao<span class="token punctuation">.</span><span class="token function">addFood</span><span class="token punctuation">(</span>foodname<span class="token punctuation">,</span> feature<span class="token punctuation">,</span> material<span class="token punctuation">,</span> price<span class="token punctuation">,</span> type<span class="token punctuation">,</span> picturePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"admin/food_list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> model<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><blockquote><p>图片文件上传并显示</p></blockquote><p><strong>maven项目导入依赖</strong></p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>upload.jsp</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>图片上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>图片上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Content here --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;pageContext.request.contextPath&amp;#125;/doupload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>  <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailHelp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-text text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailHelp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailHelp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-text text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputPassword1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputPassword1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group input-group-lg<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-prepend<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-group-text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pitcture<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pitcture<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>               <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sizing example input<span class="token punctuation">"</span></span>               <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputGroup-sizing-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group form-check<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleCheck1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleCheck1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>检查<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确认<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>see_infor.jsp</strong></p><blockquote><p>注意这里第24行的请求地址</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>表单查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>展示账户数据列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学生id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学生姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学生年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;student&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>student.id<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>student.name<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>student.age<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;pageContext.request.contextPath&amp;#125;/studentPhoto?id<span class="token punctuation">=</span>$&amp;#123;student.id&amp;#125;&amp;photoPath<span class="token punctuation">=</span>$&amp;#123;student.photoPath&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img-thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>删除。修改。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>Student</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span>  String name<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span>  String photoPath<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Studnet&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", photoPath='"</span> <span class="token operator">+</span> photoPath <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getPhotoPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> photoPath<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhotoPath</span><span class="token punctuation">(</span>String photoPath<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>photoPath <span class="token operator">=</span> photoPath<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>Controller</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> zhouhailini506<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Controller</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">uploadPhoto</span><span class="token punctuation">(</span>ModelAndView model<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"uploadPhoto get in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> model<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/doupload"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">doupload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pitcture"</span><span class="token punctuation">)</span> MultipartFile uploadfile<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span>                                 ModelAndView model<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doupload mapping get in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletContext application<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String realPath<span class="token operator">=</span>application<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"upload/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span>uploadfile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String suffix<span class="token operator">=</span>uploadfile<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName<span class="token operator">=</span>realPath<span class="token operator">+</span>File<span class="token punctuation">.</span>separator<span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>suffix<span class="token punctuation">;</span>        uploadfile<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setPhotoPath</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student=>"</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"see_infor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  model<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/studentPhoto"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">studentPhoto</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String photoPath<span class="token punctuation">,</span> HttpServletRequest                             request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ServletContext application <span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String realPath<span class="token operator">=</span>application<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"upload/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName<span class="token operator">=</span>realPath<span class="token operator">+</span>File<span class="token punctuation">.</span>separator<span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>photoPath<span class="token punctuation">;</span>        File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            FileInputStream fis<span class="token operator">=</span>null<span class="token punctuation">;</span>            BufferedInputStream bis<span class="token operator">=</span>null<span class="token punctuation">;</span>            fis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            bis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            OutputStream os<span class="token operator">=</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token operator">=</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">=</span>bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub插件</title>
      <link href="/2020/05/29/GithubChromePlug/"/>
      <url>/2020/05/29/GithubChromePlug/</url>
      
        <content type="html"><![CDATA[<blockquote><p>GitHub作为从事编程人员的交友社区，GitHub的使用效率和使用体验非常重要，本文就分享几个实用的浏览器插件。</p></blockquote><h2 id="GitHub-Dark-Theme"><a href="#GitHub-Dark-Theme" class="headerlink" title="GitHub Dark Theme"></a>GitHub Dark Theme</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/GitHubDarkTheme.png"></p><p>这是一个黑暗主题（夜间模式）的插件，很多人为了增加代码的识别程度都会将编译器设置称暗色风格来增加代码亮度方便快速浏览，这款插件正是为此设计。</p><p>安装后进入主页效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/GitHubDarkTheme1.png"></p><p>同样代码也会有响应的配色</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/GitHubDarkTheme2.png"></p><h2 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a>Octotree</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/Octotree.png"></p><p>平常在GitHub浏览代码的时候都是直接一个文件一个文件的进去然后再依次出来，如果项目文件层级过多，这样寻找文件效率十分低，浏览代码就很不方便，并且梳理项目文件结构需要大量的时间。这款插件就很好的解决了这一问题，浏览GitHub时上的某个项目的代码时，左侧会出现一个按钮（Octotree），点击之后便是一个菜单，展示当前项目的目录结构。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/Octotree1.jpg"></p><h2 id="Sourcegraph"><a href="#Sourcegraph" class="headerlink" title="Sourcegraph"></a>Sourcegraph</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/Sourcegraph.png"></p><p>使用GitHub原生页面浏览代码时想看一下某个变量的引用情况或者一些方法定义很不方便，此插件可以解决这个问题，安装后会在repository同一行的地方出现一个“橙紫蓝”颜色的六角图标(View Reposotory)，点击后会进入新的浏览页面，查看某个文件，点击你要了解的代码便可显示相关定义等信息。这款插件可以作为Web IDE使用，不要将项目clone到本地就可以很方便的浏览。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/Sourcegraph1.jpg"><br><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/Sourcegraph2.jpg"></p><h2 id="Enhanced-GitHub"><a href="#Enhanced-GitHub" class="headerlink" title="Enhanced GitHub"></a>Enhanced GitHub</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/EnhancedGitHub.png">Enhanced GitHub插件可以显示仓库的大小，每个文件的大小，下载连接和复制问内容的选项。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/EnhancedGitHub1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2020/05/23/DataBase/"/>
      <url>/2020/05/23/DataBase/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL的发展"><a href="#SQL的发展" class="headerlink" title="SQL的发展"></a>SQL的发展</h2><p>1974年，由Boyce和Chamberlin提出<br>1975~1979，IBM San Jose Research Lab的关系数据库管理系统原型System R实施了这种语言<br>SQL-86是第一个SQL标准<br>SQL-89、SQL-92(SQL2)、SQL-99(SQL3)<br>最初叫做 Sequel（Structured English Query Language）结构化查询语言<br>DB 数据库 Datebase<br>DBS 数据库系统 Datebase System<br>DBMS 数据库管理系统 Database Management System<br>DBA 数据库管理人员 Datebase Administrator</p><p>主流产品<br> oracle（银行 大型企业）<br>    oracle公司产品<br>    产品免费，服务收费<br>SQL sever（Microsoft）<br>​    针对不同用户群体的多个版本<br>    易用性好<br>DB2（IBM）<br>   IBM公司产品<br>   支持多操作系统，多种类型的硬件和设备<br>MySQL（免费 成本最低）<br>   开放源代码<br>   网站应用广泛</p><h2 id="非过程化语言"><a href="#非过程化语言" class="headerlink" title="非过程化语言"></a>非过程化语言</h2><p> SQL语言进行数据库操作时，只需要提出“做什么”，不需要指明“怎么做”。“怎么做”是由DBMS来完成</p><h2 id="SQL的形式"><a href="#SQL的形式" class="headerlink" title="SQL的形式"></a>SQL的形式</h2><h3 id="交互式SQL"><a href="#交互式SQL" class="headerlink" title="交互式SQL"></a>交互式SQL</h3><ul><li>一般DBMS都提供联机交互工具</li><li>用户可直接键入SQL命令对数据库进行操作</li><li>由DBMS来进行解释<h3 id="嵌入式SQL"><a href="#嵌入式SQL" class="headerlink" title="嵌入式SQL"></a>嵌入式SQL</h3></li><li>能将SQL语句嵌入到高级语言（宿主语言）</li><li>使应用程序充分利用SQL访问数据库的能力、宿主语言的过程处理能力</li><li>一般需要预编译，将嵌入的SQL语句转化为宿主语言编译器能处理的语句</li></ul><h2 id="SQL语言主要组成部分"><a href="#SQL语言主要组成部分" class="headerlink" title="SQL语言主要组成部分"></a>SQL语言主要组成部分</h2><h3 id="数据定义语言（DDL，Data-Definition-Language）"><a href="#数据定义语言（DDL，Data-Definition-Language）" class="headerlink" title="数据定义语言（DDL，Data Definition Language）"></a>数据定义语言（DDL，Data Definition Language）</h3><p><strong>CREATE（创建） ALTER（更改） DROP（删除（群体））</strong></p><p>数据定义语言是指用来定义和管理数据库以及数据库中的各种对象的语句，这些语句包括CREATE、ALTER和DROP等语句。在SQL Server中，数据库对象包括表、视图、触发器、存储过程、规则、缺省、用户自定义的数据类型等。这些对象的创建、修改和删除等都可以通过使用CREATE、ALTER、DROP等语句来完成。</p><p>常见的数据类型</p><ul><li>字符型</li></ul><table><thead><tr><th><strong>SQL  Server</strong></th><th><strong>SQL99</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>char(n)</td><td>character</td><td>固定长度的字符串类型，n表示字符串的最大长度，不足则末尾空格补齐，取值范围为1～8000</td></tr><tr><td>varchar(n)</td><td>character  varying</td><td>可变长度的字符串类型，n表示字符串的最大长度，取值范围为1～8000</td></tr><tr><td>nchar(n)</td><td>national  characte</td><td>固定长度的Unicode数据，n表示字符串的最大长度，取值范围为1～4000</td></tr><tr><td>nvarchar(n)</td><td>national  character varying</td><td>可变长度的 Unicode 数据，n表示字符串的最大长度，取值范围为1～4000</td></tr><tr><td>ntext</td><td></td><td>最多可存储2^30-1 (1,073,741,823)个字符的统一字符编码文本</td></tr><tr><td>binary(n)</td><td>binary</td><td>固定长度的二进制字符数据，n表示最大长度，取值范围为1～8000</td></tr><tr><td>varbinary(n)</td><td>binary  varying</td><td>可变长度的二进制字符数据，n的取值范围为1～8000</td></tr></tbody></table><ul><li>数值型</li></ul><table><thead><tr><th align="center">SQL  Server</th><th align="center">SQL99</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Bigint</td><td align="center"></td><td align="center">8字节，存储从–2^63 (–  9223372036854775808)到2^63-1 (9223372036854775807) 范围的整数。</td></tr><tr><td align="center">Int</td><td align="center">Integer</td><td align="center">4字节，存储从–2^31(–2,147,483,648  ) 到2^31-1 (2,147,483,647 ) 范围的整数</td></tr><tr><td align="center">Smallint</td><td align="center">Smallint</td><td align="center">2字节，存储从–2^15(–32,768 ) 到2^15-1 (32,767 )范围的整数</td></tr><tr><td align="center">Tinyint</td><td align="center"></td><td align="center">存储从0 到 255 之间的整数</td></tr><tr><td align="center">Bit</td><td align="center">Bit</td><td align="center">存储1或0</td></tr><tr><td align="center">numeric(p,q)或decimal(p,q)</td><td align="center">decimal</td><td align="center">定点精度和小数位数。使用最大精度时，有效值从  –10^38 +1 到 10^38 -1。其中，p为精度，指定小数点左边和右边可以存储的十进制数字的最大个数。q为小数位数，指定小数点右边可以存储的十进制数字的最大个数,0 &lt;&#x3D; q &lt;&#x3D; p。q的默认值为0</td></tr><tr><td align="center">float</td><td align="center">float</td><td align="center">8字节，存储从–1.79E + 308到 1.79E + 308范围的浮点型数</td></tr><tr><td align="center">real</td><td align="center"></td><td align="center">4字节，存储从 –3.40E + 38到 3.40E + 38 范围的浮点型数</td></tr></tbody></table><ul><li>日期／时间型</li></ul><table><thead><tr><th align="center"><strong>SQL  Server</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">Datetime</td><td align="center">占用8字节空间，存储从1753年1月1日到9999年12月31日的日期和时间数据，精确到百分之三秒（或3.33 毫秒）</td></tr><tr><td align="center">Smalldatetime</td><td align="center">占用4字节空间，存储从1900年1月1日到2079年6月6日的日期和时间数据，精确到分钟</td></tr></tbody></table><ul><li><p>货币型</p><p>货币数据存在的精度固定为四位小数，用四位小数的DECIMAL类型</p></li></ul><table><thead><tr><th align="center"><strong>SQL  Server</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">money</td><td align="center">8字节，存储的货币数据值介于–263 (–922,337,203,685,477.5808) 与 263-1 (+922,337,203,685,477.5807) 之间，精确到货币单位的千分之十。最多可以包含19位数字</td></tr><tr><td align="center">Smallmoney</td><td align="center">4字节，存储的货币数据值介于–214,748.3648 <strong>与</strong> +214,748.3647 之间，精确到货币单位的千分之十</td></tr></tbody></table><ul><li>文本和图像型</li></ul><table><thead><tr><th align="center"><strong>SQL  Server</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">image</td><td align="center">大容量的、可变长度的二进制字符数据，可以存储多种格式的文件，最大约为2GB</td></tr><tr><td align="center">text</td><td align="center">可存储231-1 (2,147,483,647)个字符的大文本</td></tr></tbody></table><h3 id="数据操纵语言（DML，Data-Manipulation-Language）"><a href="#数据操纵语言（DML，Data-Manipulation-Language）" class="headerlink" title="数据操纵语言（DML，Data Manipulation Language）"></a>数据操纵语言（DML，Data Manipulation Language）</h3><p>**INSERT DELETE UPDATE SELECT(增删改查) **</p><p>数据操纵语言是指用来查询、添加、修改和删除数据库中数据的语句，这些语句包括SELECT、INSERT、UPDATE、DELETE等。在默认情况下，只有sysadmin、dbcreator、db_owner或db_datawriter等角色的成员才有权利执行数据操纵语言。</p><h3 id="数据控制语言（DCL，Data-Control-Language）"><a href="#数据控制语言（DCL，Data-Control-Language）" class="headerlink" title="数据控制语言（DCL，Data Control Language）"></a>数据控制语言（DCL，Data Control Language）</h3><p><strong>GRANT（授权） REVOKE（回收权限） COMMIT（提交） ROLLBACK（回滚）</strong></p><p>数据控制语言（DCL）是用来设置或者更改数据库用户或角色权限的语句，这些语句包括GRANT、REVOKE 、DENY等语句，在默认状态下，只有sysadmin、dbcreator、db_owner或db_securityadmin等角色的成员才有权利执行数据控制语言。</p><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><h3 id="建立表结构-Create"><a href="#建立表结构-Create" class="headerlink" title="建立表结构 Create"></a>建立表结构 Create</h3><p>语法：CREATE DATABASE 数据库名</p><ul><li>定义基本表的语句格式：</li><li>CREATE TABLE &lt;表名&gt;(&lt;列定义&gt;[{,&lt;列定义&gt;,&lt;表约束&gt;}])</li><li>表名：</li><li>列定义：列名、列数据类型、长度、是否允许空值等。</li><li>定义完整性约束：列约束和表约束</li><li>[CONSTRAINT&lt;约束名&gt;] &lt;约束定义&gt;</li></ul><p>约束</p><ul><li>主码 primary key</li><li>非空 not null</li><li>检查 check()</li><li>唯一 unique</li><li>默认值 default</li><li>补码  foreign key</li><li>外键  reference</li></ul><p><strong>例</strong></p><p>Student表要求</p><table><thead><tr><th>列名</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>学号</td><td>CHAR(8)</td><td>主码</td><td>每个学生学号应当非空且唯一</td></tr><tr><td>姓名</td><td>CHAR(10)</td><td>非空</td><td>姓名信息必须要保存</td></tr><tr><td>性别</td><td>CHAR(2)</td><td>检查</td><td>取“男”或者“女”</td></tr><tr><td>年龄</td><td>INT</td><td>检查</td><td>小于10，大于60 的学生年龄无意义</td></tr><tr><td>系别</td><td>VARCHAR(26)</td><td>default</td><td>默认值为“计算机系”</td></tr><tr><td>身份证号</td><td>CHAR(18)</td><td>唯一值</td><td>每个人的身份证号是唯一</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Studet<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>   s_number char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>   s_name char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>   s_sex  char<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>s_sex<span class="token operator">=</span><span class="token string">'男'</span> <span class="token operator">or</span> s_sex<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   s_age  <span class="token keyword">int</span>  <span class="token keyword">check</span><span class="token punctuation">(</span>s_age<span class="token operator">></span><span class="token number">10</span> <span class="token operator">and</span> s_age<span class="token operator">&lt;</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   s_classity <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">'计算机系'</span><span class="token punctuation">,</span>   s_ID   char<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>  <span class="token keyword">unique</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="删除表结构-Drop"><a href="#删除表结构-Drop" class="headerlink" title="删除表结构 Drop"></a>删除表结构 Drop</h3><p>语法：DROP DATABASE 数据库名 [ , … n ]</p><ul><li><p>用SQL删除关系（表）</p><ul><li>将整个关系模式（表结构）彻底删除</li><li>表中的数据也将被删除<h3 id="修改表结构-Alter"><a href="#修改表结构-Alter" class="headerlink" title="修改表结构 Alter"></a>修改表结构 Alter</h3></li></ul></li><li><p>增加表中的属性</p><p>  语法：alter table 表名 add 增加内容 数据类型</p><ul><li>向已经存在的表中添加属性</li><li>allow null （新添加的属性要允许为空）</li><li>已有的元组中该属性的值被置为Null</li></ul></li><li><p>修改表中的某属性(某列)</p><p>  语法：alter table 表名 alter column 增加内容 修改的数据类型</p><ul><li>修改属性类型或精度</li></ul></li><li><p>删除表中的某属性(某列)</p><ul><li>去除属性及相应的数据</li></ul></li></ul><h3 id="向表中添加数据-Insert"><a href="#向表中添加数据-Insert" class="headerlink" title="向表中添加数据(Insert)"></a>向表中添加数据(Insert)</h3><p>语法：INSERT INTO  table_name VALUES (<em>value1</em>,<em>value2</em>,<em>value3</em>,…)</p><ul><li>数据添加<ul><li>用SQL的插入语句，向数据库表中添加数据</li><li>按关系模式的属性顺序</li><li>按指定的属性顺序，也可以只添加部分属性（非Null属性为必需）</li></ul></li></ul><h3 id="数据删除（Delete）"><a href="#数据删除（Delete）" class="headerlink" title="数据删除（Delete）"></a>数据删除（Delete）</h3><p>语法：DELETE FROM table_name WHERE <em>some_column</em>&#x3D;<em>some_value</em></p><ul><li>只能对整个元组操作，不能只删除某些属性上的值</li><li>只能对一个关系起作用，若要从多个关系中删除元组，则必须对每个关系分别执行删除命令</li><li>删除单个元组</li><li>删除多个元组</li><li>删除整个关系中的所有数据</li></ul><h3 id="数据更新（Update）"><a href="#数据更新（Update）" class="headerlink" title="数据更新（Update）"></a>数据更新（Update）</h3><p>语法：UPDATE table_name SET <em>column1</em>&#x3D;<em>value1</em>,<em>column2</em>&#x3D;<em>value2</em>,… WHERE <em>some_column</em>&#x3D;<em>some_value</em></p><p>改变符合条件的某个（某些）元组的属性值</p><h2 id="视图-VIEW"><a href="#视图-VIEW" class="headerlink" title="视图   (VIEW)"></a>视图   (VIEW)</h2><p> 视图是从一个或者多个表或视图中导出的表，其结构和数据是建立在对表的查询基础上的。和真实的表一样，视图也包括几个被定义的数据列和多个数据行，但从本质上讲，这些数据列和数据行来源于其所引用的表。因此，视图不是真实存在的基础表而是一个虚拟表，视图所对应的数据并不实际地以视图结构存储在数据库中，而是存储在视图所引用的表中。</p><p>创建视图</p><p>语法：</p><p>CREATE VIEW &lt;视图名&gt; [(视图列名表)]</p><p>AS</p><p>SELECT查询子句</p><p>[WITH CHECK OPTION]</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> BookView1<span class="token keyword">AS</span><span class="token keyword">SELECT</span> book_ id<span class="token punctuation">,</span> name，author<span class="token punctuation">,</span> publish， price<span class="token keyword">FROM</span> Book<span class="token keyword">WHERE</span> price<span class="token operator">></span><span class="token number">30</span></code></pre><p>视图的更新</p><h2 id="数据查询（Select）"><a href="#数据查询（Select）" class="headerlink" title="数据查询（Select）"></a>数据查询（Select）</h2><h3 id="数据查询是数据库应用的核心功能"><a href="#数据查询是数据库应用的核心功能" class="headerlink" title="数据查询是数据库应用的核心功能"></a>数据查询是数据库应用的核心功能</h3><p>SELECT 的基本结构</p><p>​    select&lt;目标列名序列&gt;        –&gt;需要哪些列</p><p>​     from &lt;数据源&gt;           –&gt;来自那些表</p><p>​     [where&lt;检索0条件表达式&gt;]   –&gt;根据什么条件</p><p>​     [group by&lt;分组依据列&gt;]</p><p>​     [having&lt;组提取条件&gt;]</p><p>​      [order by&lt;排序依据列&gt;]</p><h3 id="Select子句——重复元组"><a href="#Select子句——重复元组" class="headerlink" title="Select子句——重复元组"></a>Select子句——重复元组</h3><ul><li><p>SQL具有包的特性</p></li><li><p>Select 子句的缺省情况是保留重复元组（ ALL ），可用 Distinct 去除重复元组</p></li><li><p>去除重复元组:费时</p></li><li><p>需要临时表的支持</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> publish <span class="token keyword">from</span> BOOK <span class="token comment" spellcheck="true">-->去重查询</span></code></pre><h3 id="Select子句——-与属性列表"><a href="#Select子句——-与属性列表" class="headerlink" title="Select子句—— *与属性列表"></a>Select子句—— *与属性列表</h3></li><li><p>星号 * 表示所有属性</p><ul><li>星号 * ：按关系模式中属性的顺序排列</li><li>显式列出属性名：按用户顺序排列<pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token operator">*</span>  <span class="token keyword">from</span> Book</code></pre><h3 id="Select子句——更名"><a href="#Select子句——更名" class="headerlink" title="Select子句——更名"></a>Select子句——更名</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">as</span> 姓名 <span class="token keyword">from</span> BOOK        <span class="token comment" spellcheck="true">-->改名</span></code></pre></li></ul></li><li><p>为结果集中的某个属性改名</p></li><li><p>使结果集更具可读性</p><h3 id="Where-子句"><a href="#Where-子句" class="headerlink" title="Where 子句"></a>Where 子句</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span>  <span class="token operator">*</span> <span class="token keyword">from</span> Book <span class="token keyword">where</span> price<span class="token operator">></span><span class="token number">30</span><span class="token keyword">select</span> name <span class="token keyword">from</span> BOOK <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%数学'</span>  <span class="token comment" spellcheck="true">-->模糊查询</span><span class="token keyword">Select</span>  <span class="token operator">*</span> <span class="token keyword">from</span> Book <span class="token keyword">where</span> publish <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'清华大学出版社'</span>，<span class="token string">'高等教育出版社'</span><span class="token punctuation">,</span><span class="token string">'机械工业出版社'</span><span class="token punctuation">)</span>        </code></pre></li><li><p>查询满足指定条件的元组可以通过Where子句来实现</p></li><li><p>使where子句中的逻辑表达式返回True值的元组，是符合要求的元组，将被选择出来</p></li><li><p>Where 子句——运算符</p><ul><li>比较：&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、&#x3D;、&lt;&gt; 等</li><li>确定范围：<ul><li>Between  A  and  B、Not Between A and B</li></ul></li><li>确定集合：IN、NOT IN</li><li>字符匹配：LIKE，NOT LIKE</li><li>空值：IS NULL、IS NOT NULL</li><li>多重条件：AND、OR、NOT</li></ul></li><li><p>Where 子句——Like</p><ul><li>字符匹配：Like、Not Like</li><li>通配符</li><li>% —— 匹配任意字符串</li><li>_   —— 匹配任意一个字符</li><li>大小写敏感</li></ul></li><li><p>Where 子句——转义符 escape </p><h3 id="From-子句"><a href="#From-子句" class="headerlink" title="From 子句"></a>From 子句</h3></li><li><p>列出将被查询的关系（表）</p></li><li><p>From 子句——元组变量</p><ul><li>为 From 子句中的关系定义元组变量</li><li>方便关系名的引用</li></ul></li><li><p>连接子句</p><ul><li>内连接<ul><li>内连接是指包括符合条件的每个表的记录，也称之为全记录操作。</li></ul></li><li>外连接<ul><li>外连接是指把两个表分为左右两个表。右外连接是指连接满足条件右侧表的全部记录。左外连接是指连接满足条件左侧表的全部记录。全外连接是指连接满足条件表的全部记录。</li><li>左外连接</li><li>右外连接</li><li>全外连接<pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-->多表连接查询</span><span class="token keyword">select</span> Student_Course<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> Student_Course <span class="token keyword">join</span> Student <span class="token keyword">on</span>Student_Course<span class="token punctuation">.</span>student_number <span class="token operator">=</span> Student<span class="token punctuation">.</span>student_number<span class="token keyword">where</span> student_name<span class="token operator">=</span><span class="token string">'张三'</span></code></pre></li></ul></li></ul></li></ul><h3 id="Order-By子句"><a href="#Order-By子句" class="headerlink" title="Order By子句"></a>Order By子句</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> price <span class="token keyword">from</span> BOOK <span class="token keyword">order</span> <span class="token keyword">by</span> price <span class="token keyword">ASC</span> <span class="token comment" spellcheck="true">-->排序 ASC 升序 不写默认为升序  DESE 降序</span></code></pre><ul><li>指定结果集中元组的排列次序</li><li>耗时</li><li>ASC升序（缺省）、DESC降序</li></ul><h3 id="子查询（Subquery-）"><a href="#子查询（Subquery-）" class="headerlink" title="子查询（Subquery ）"></a>子查询（Subquery ）</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> sc_score <span class="token keyword">from</span> Student_Course<span class="token keyword">where</span> student_number <span class="token operator">in</span><span class="token punctuation">(</span>     <span class="token keyword">select</span> student_number <span class="token keyword">from</span> Student     <span class="token keyword">where</span> student_name<span class="token operator">=</span><span class="token string">'张三'</span>     <span class="token punctuation">)</span>     <span class="token operator">and</span>     course_name <span class="token operator">in</span><span class="token punctuation">(</span>     <span class="token keyword">select</span> course_name <span class="token keyword">from</span> Course     <span class="token keyword">where</span> course_name<span class="token operator">=</span><span class="token string">'近代史'</span> <span class="token punctuation">)</span></code></pre><ul><li>子查询是嵌套在另一查询中的 Select-From-Where 表达式（Where&#x2F;Having）</li><li>SQL允许多层嵌套，由内而外地进行分析，子查询的结果作为父查询的查找条件</li><li>可以用多个简单查询来构成复杂查询，以增强SQL的查询能力</li><li>子查询中不使用 Order By 子句，Order By子句只能对最终查询结果进行排序</li><li>子查询——单值比较<ul><li>返回单值的子查询，只返回一行一列</li><li>父查询与单值子查询之间用比较运算符进行连接<ul><li>运算符：&gt;、&gt;&#x3D;、&#x3D;、&lt;&#x3D;、&lt;、 &lt;&gt;</li></ul></li></ul></li><li>子查询——多值<ul><li>子查询返回多行一列</li><li>运算符：In、All、Some(或Any)、Exists<ul><li>子查询——多值成员In<ul><li>若值与子查询返回集中的某一个相等，则返回true<ul><li>IN 被用来测试多值中的成员</li></ul></li></ul></li><li>子查询——多值比较 ALL<ul><li>父查询与多值子查询之间的比较用All来连接</li><li>值s比子查询返回集R中的每个都大时，s&gt;All R 为True </li><li>All表示所有</li><li>all、&lt; all、&lt;&#x3D;all、&gt;&#x3D;all、&lt;&gt; all</li><li>&lt;&gt; all 等价于 not in</li></ul></li><li>子查询——多值比较Some&#x2F;Any<ul><li>父查询与多值子查询之间的比较需用Some&#x2F;Any来连接</li><li>值s比子查询返回集R中的某一个都大时返回 Ture<ul><li>s &gt; Some R为True  或 </li><li>s &gt; Any R为True</li></ul></li><li>Some(早期用Any)表示某一个（任意一个）</li><li>some、&lt; some、&lt;&#x3D;some、&gt;&#x3D;some、&lt;&gt; some</li><li>&#x3D; some 等价于 in、&lt;&gt; some 不等价于 not in</li></ul></li></ul></li></ul></li><li>子查询——存在判断Exists<ul><li>Exists + 子查询用来判断该子查询是否返回元组</li><li>当子查询的结果集非空时，Exists为True</li><li>当子查询的结果集为空时，Exists为False</li><li>不关心子查询的具体内容，因此用 Select *</li><li>具有外部引用的子查询，称为相关子查询（Correlated Queries）</li><li>外层元组的属性作为内层子查询的条件<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3></li></ul></li><li>把一列中的值进行聚合运算，返回单值的函数</li><li>五个预定义的聚合函数<ul><li>平均值：Avg( )</li><li>总和：  Sum( )</li><li>最小值：Min( )</li><li>最大值：Max( )</li><li>计数：  Count( )  返回所选列中不为NULL的数</li></ul></li><li>Group By<ul><li>将查询结果集按某一列或多列的值分组，值相等的为一组，一个分组以一个元组的形式出现</li><li>只有出现在Group By子句中的属性，才可出现在Select子句中</li></ul></li><li>Having<ul><li>针对聚合函数的结果值进行筛选（选择），它作用于分组计算结果集</li><li>跟在Group By子句的后面。</li></ul></li><li>Having 与 Where的区别<ul><li>Where 决定哪些元组被选择参加运算，作用于关系中的元组</li><li>Having 决定哪些分组符合要求，作用于分组</li><li>聚合函数的条件关系必须用Having，Where中不应出现聚合函数</li></ul></li><li>聚合函数对Null的处理<ul><li>Count：不计</li><li>Sum：不将其计入</li><li>Avg：具有 Null 的元组不参与</li><li>Max &#x2F; Min：不参与<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2> 数据库中的索引与书籍中的索引类似，在一本书中，利用索引可以快速查找所需信息，无须阅读整本书。在数据库中，索引使数据库程序无须对整个表进行扫描，就可以在其中找到所需数据。书中的索引是一个词语列表，其中注明了包含各个词的页码。而数据库中的索引是某个表中一列或者若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单</li></ul></li></ul><h3 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h3><ul><li>通过创建唯一索引，可以保证数据记录的唯一性。</li><li>可以大大加快数据检索速度。</li><li>可以加速表与表之间的连接，这一点在实现数据的参照完整性方面有特别的意义。</li><li>在使用ORDER BY和GROUP BY子句中进行检索数据时，可以显著减少查询中分组和排序的时间。</li><li>使用索引可以在检索数据的过程中使用优化隐藏器，提高系统性能<h3 id="聚集索引与非聚集索引"><a href="#聚集索引与非聚集索引" class="headerlink" title="聚集索引与非聚集索引"></a>聚集索引与非聚集索引</h3></li><li>聚集索引对表的物理数据页中的数据按列进行排序，然后再重新存储到磁盘上，即聚集索引与数据是混为一体的，它的叶节点中存储的是实际的数据</li><li>非聚集索引具有完全独立于数据行的结构，使用非聚集索引不用将物理数据页中的数据按列排序。非聚集索引的叶节点存储了组成非聚集索引的关键字值和行定位器<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2></li></ul><ul><li>主键约束（primary key constraint）</li><li>唯一性约束（unique constraint）</li><li>检查约束（check constraint）</li><li>缺省约束（default constraint）</li><li>外部键约束（foreign key constraint）</li></ul><h2 id="SQL-SERVER权限管理"><a href="#SQL-SERVER权限管理" class="headerlink" title="SQL SERVER权限管理"></a>SQL SERVER权限管理</h2><h3 id="SQL-Server权限管理策略"><a href="#SQL-Server权限管理策略" class="headerlink" title="SQL Server权限管理策略"></a>SQL Server权限管理策略</h3><ul><li>安全帐户认证 <ul><li>安全帐户认证是用来确认登录SQL Server的用户的登录帐号和密码的正确性，由此来验证其是否具有连接SQL Server的权限。 SQL Server 2000提供了两种确认用户的认证模式：<ul><li>（一）Windows NT认证模式。<ul><li>SQL Server数据库系统通常运行在Windows NT服务器平台上，而NT作为网络操作系统，本身就具备管理登录、验证用户合法性的能力，因此Windows NT认证模式正是利用了这一用户安全性和帐号管理的机制，允许SQL Server也可以使用NT的用户名和口令。在这种模式下，用户只需要通过Windows NT的认证，就可以连接到SQL Server，而SQL Server本身也就不需要管理一套登录数据。</li></ul></li><li>（二）混合认证模式。<ul><li>混合认证模式允许用户使用Windows NT安全性或SQL Server安全性连接到SQL Server，这就意味着用户可以使用他的帐号登录到Windows NT，或者使用他的登录名登录到SQL Server系统。NT的用户既可以使用NT认证，也可以使用SQL Server认证</li></ul></li></ul></li></ul></li><li>访问许可确认 <ul><li>但是通过认证阶段并不代表用户能够访问SQL Server中的数据，同时他还必须通过许可确认。用户只有在具有访问数据库的权限之后，才能够对服务器上的数据库进行权限许可下的各种操作，这种用户访问数据库权限的设置是通过用户帐号来实现的。<h3 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h3></li></ul></li><li>服务器登录帐号和用户帐号管理 <ul><li>1.利用企业管理器创建、管理SQL Server登录帐号<ul><li>（１）打开企业管理器，单击需要登录的服务器左边的“+”号，然后展开安全性文件夹。 </li><li>（２）用右键单击登录（login）图标，从快捷菜单中选择新建登录（new login）选项，则出现SQL Server登录属性—新建登录对话框，如图6-2所示。</li><li>（3）在名称编辑框中输入登录名，在身份验证选项栏中选择新建的用户帐号是Windows NT认证模式，还是SQL Server认证模式。 </li><li>（４）选择服务器角色页框。在服务器角色列表框中，列出了系统的固定服务器角色。 </li><li>（５）选择用户映射页框。上面的列表框列出了该帐号可以访问的数据库，单击数据库左边的复选框，表示该用户可以访问相应的数据库以及该帐号在数据库中的用户名。 </li><li>（６）设置完成后，单击“确定”按钮即可完成登录帐号的创建。</li></ul></li><li>使用SQL 语句创建登录帐号</li><li>2.用户帐号管理 <ul><li>在数据库中，一个用户或工作组取得合法的登录帐号，只表明该帐号通过了Windows NT认证或者SQL Server认证，但不能表明其可以对数据库数据和数据库对象进行某种或者某些操作，只有当他同时拥有了用户权限后，才能够访问数据库。 </li><li>利用企业管理器可以授予SQL Server登录访问数据库的许可权限。使用它可创建一个新数据库用户帐号</li></ul></li></ul></li><li>许可（权限）管理 <ul><li>许可用来指定授权用户可以使用的数据库对象和这些授权用户可以对这些数据库对象执行的操作。用户在登录到SQL Server之后，其用户帐号所归属的NT组或角色所被赋予的许可（权限）决定了该用户能够对哪些数据库对象执行哪种操作以及能够访问、修改哪些数据。在每个数据库中用户的许可独立于用户帐号和用户在数据库中的角色，每个数据库都有自己独立的许可系统，在SQL Server中包括三种类型的许可：即对象许可、语句许可和预定义许可。 <ul><li>三种许可类型<ul><li>1、对象许可<ul><li>表示对特定的数据库对象，即表、视图、字段和存储过程的操作许可，它决定了能对表、视图等数据库对象执行哪些操作。</li></ul></li><li>2、语句许可<ul><li>表示对数据库的操作许可，也就是说，创建数据库或者创建数据库中的其它内容所需要的许可类型称为语句许可。</li></ul></li><li>3、预定义许可<ul><li>是指系统安装以后有些用户和角色不必授权就有的许可。</li></ul></li></ul></li></ul></li></ul></li><li>角色管理<ul><li>角色是SQL Server 7.0版本引进的新概念，它代替了以前版本中组的概念。利用角色，SQL Server管理者可以将某些用户设置为某一角色，这样只对角色进行权限设置便可以实现对所有用户权限的设置，大大减少了管理员的工作量。SQL Server提供了用户通常管理工作的预定义服务器角色和数据库角色。<ul><li>1、服务器角色<ul><li>服务器角色是指根据SQL Server的管理任务，以及这些任务相对的重要性等级来把具有SQL Server管理职能的用户划分为不同的用户组，每一组所具有的管理SQL Server的权限都是SQL Server内置的，即不能对其进行添加、修改和删除，只能向其中加入用户或者其他角色。 </li><li>几种常用的固定服务器角色 <ul><li>系统管理员：拥有SQL Server所有的权限许可。</li><li>服务器管理员：管理SQL Server服务器端的设置。</li><li>磁盘管理员：管理磁盘文件。</li><li>进程管理员：管理SQL Server系统进程。</li><li>安全管理员：管理和审核SQL Server系统登录。</li><li>安装管理员：增加、删除连接服务器，建立数据库复制以及管理扩展存储过程。</li><li>数据库创建者：创建数据库，并对数据库进行修改。</li></ul></li></ul></li><li>2、数据库角色 <ul><li>数据库角色是为某一用户或某一组用户授予不同级别的管理或访问数据库以及数据库对象的权限，这些权限是数据库专有的，并且还可以使一个用户具有属于同一数据库的多个角色。SQL Server提供了两种类型的数据库角色：即固定的数据库角色和用户自定义的数据库角色。 </li><li>（１）固定的数据库角色<ul><li>public：维护全部默认许可。</li><li>db_owner：数据库的所有者，可以对所拥有的数据库执行任何操作。</li><li>db_accessadmin：可以增加或者删除数据库用户、工作组和角色。</li><li>db_addladmin：可以增加、删除和修改数据库中的任何对象。</li><li>db_securityadmin：执行语句许可和对象许可。</li><li>db_backupoperator：可以备份和恢复数据库。</li><li>db_datareader：能且仅能对数据库中的任何表执行select操作，从而读取所有表的信息。</li><li>db_datawriter：能够增加、修改和删除表中的数据，但不能进行select操作。</li><li>db_denydatareader：不能读取数据库中任何表中的数据。</li><li>db_denydatawriter：不能对数据库中的任何表执行增加、修改和删除数据操作。</li></ul></li><li>（２）用户自定义角色 <ul><li>创建用户定义的数据库角色就是创建一组用户，这些用户具有相同的一组许可。如果一组用户需要执行在SQL Server中指定的一组操作并且不存在对应的Windows NT组，或者没有管理Windows NT用户帐号的许可，就可以在数据库中建立一个用户自定义的数据库角色。用户自定义的数据库角色有两种类型：即标准角色和应用程序角色。<h3 id="Transaction-SQL-语句"><a href="#Transaction-SQL-语句" class="headerlink" title="Transaction_SQL 语句"></a>Transaction_SQL 语句</h3></li></ul></li></ul></li></ul></li></ul></li></ul><ul><li>赋权语句——Grant</li><li>收回权限——Revoke </li><li>收回权限——Deny</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理层</title>
      <link href="/2020/05/22/PhysicalLayer/"/>
      <url>/2020/05/22/PhysicalLayer/</url>
      
        <content type="html"><![CDATA[<h2 id="物理层的服务和功能"><a href="#物理层的服务和功能" class="headerlink" title="物理层的服务和功能"></a>物理层的服务和功能</h2><blockquote><p>物理层位于网络体系结构中的最低层，为数据链路层提供服务，数据链路层将帧交给物理层发送，在物理层看来，它收到的是一长串0，1比特，物理层的任务就是在传输介质传输0，1比特流。物理层的传输单位是比特，即一个二进制单位（0或1），当0，1比特串通过传输介质到达接收端，接收端的物理层收到后再交给上面的数据链路层。</p></blockquote><p><strong>四个特性</strong></p><ol><li>机械特性：物理层要定义接口的形状、尺寸、插头的针和插座孔的数量，以及针的排列方式等。</li><li>电气特性：用什么样的信号表示1，什么样的信号表示0，每个比特占用多少时间等。</li><li>功能特性：接口上会连接多根导线，物理层需要定义每根导线的功能，以及导线上出现某个特定信号的含义。</li><li>规程特性：物理层需要定义数据传输的操作过程，也就是再完成通信的过程中各线路上的动作规则或动作序列。</li></ol><h2 id="数据通信基础"><a href="#数据通信基础" class="headerlink" title="数据通信基础"></a>数据通信基础</h2><p><strong>信息、数据和信号</strong></p><p>信息发送前要编码成数据，数据要用信号表示才能发送到对方。对方从信号中还原出数据，进而得到信息。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE%E5%92%8C%E4%BF%A1%E5%8F%B7.png"></p><p>数据分为模拟数据和数字数据。数字数据是指离散（不连续）的量，指有限的几个值。模拟数据是指连续的量，包括某个范围内的所有可能的数据。</p><p>信号，与数据类似，信号也分为模拟信号和数字信号。模拟信号是连续的，取遍某个区间内的所有值。数字信号是离散的，只包含几个值。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%A8%A1%E6%8B%9F%E5%91%A8%E6%9C%9F%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%95%B0%E5%AD%97%E5%91%A8%E6%9C%9F%E4%BF%A1%E5%8F%B7.png"></p><p>一个信号可以分解成一系列正弦波的组合，这些正弦波都有着不同的频率，组成这个信号的所有正弦波的频率构成一个集合，称为信号频谱。</p><p>在信号频谱中最高频率和最低频率的差称为信号的带宽。</p><p>信道是信号从一端到达另一端所走的通道，信道是建立在传输介质之上的。一条传输介质上可以有多条信道，一条信道值允许传输一路信号。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%BF%A1%E9%81%93.png"></p><p>信道可分为有线信道和无线信道</p><ul><li>有线信道：包括双绞线、同轴电缆和光纤</li><li>无线信道：地波传播、短波电离层反射、超短波或微波视距中继、人造卫星中继以及各种散射信道等。</li></ul><p>根据传输信号的不同，信道可以分为模拟信道和数字信道</p><ul><li>模拟信道用来传输模拟信号</li><li>数字信道用来传输数字信号</li></ul><p>每个信道都有其能够传输信号的频率范围，这个范围称为信道的带宽，信道的带宽越大，数据的传输速率就越高。信道的带宽是由信道的物理特性决定的。信道带宽是限定允许通过信道的信号的下限频率和上限频率，也就是限制一个频率带通。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%A6%99%E5%86%9C%E5%85%AC%E5%BC%8F.png"></p><h2 id="波特率和比特率"><a href="#波特率和比特率" class="headerlink" title="波特率和比特率"></a>波特率和比特率</h2><p><strong>波特率</strong>指的是每秒钟通过信道传输的信号码元的个数，又称调制速率，码元速率或信号传输速率，单位为波特（Baud）。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%B3%A2%E7%89%B9%E7%8E%87.png"></p><p><strong>比特率</strong>指的是每秒传输比特数，又称数据信号速率，单位为比特&#x2F;秒（bit&#x2F;s或bps）、千比特&#x2F;秒（Kbit&#x2F;s或者Kbps,K&#x3D;10^3）、兆比特&#x2F;秒（Mbit&#x2F;s或者Mbps,K&#x3D;10^6）。比特率越高，表示单位时间传送的数据就越多。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%B3%A2%E7%89%B9%E7%8E%87%E5%92%8C%E6%AF%94%E7%89%B9%E7%8E%87.png"></p><h2 id="数据通信系统"><a href="#数据通信系统" class="headerlink" title="数据通信系统"></a>数据通信系统</h2><p>数据通信系统是以计算机为中心，利用通信线路连接远端的数据设备，从一个系统向另一个系统进行数据传输的系统。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F.png"></p><p><strong>DTE</strong></p><p>DTE称为数据终端设备（Data Terminal Equipment,DTE）DTE是产生、接收和处理二进制数字数据的设备。DTE最典型的代表是计算机，还可以是打印机、传真机、终端等。</p><p><strong>DCE</strong></p><p>DCE称为数据电路终端设备（Data Circuit Terminal Equipment，DCE）DCE主要功能是进行信号转换。</p><h2 id="数据表示和信号转换"><a href="#数据表示和信号转换" class="headerlink" title="数据表示和信号转换"></a>数据表示和信号转换</h2><p>数据要从一端发送到另一端，必须先被转换成信号，用信号来表示数据。数字数据可以用数字信号表示，也可以用模拟信号来表示；同样，模拟数据可以用模拟信号表示，也可以用数字信号表示。数字信号能够在数字信道上传递，当数字信号要在模拟信道上传递时，就需要将其转换为模拟信号。有时为了提高抗干扰能力，也需要将模拟信号转换成数字信号。模拟信号和数字信号只间可以相互转换，转换的目的是让信号能够更好的传输，能够传输更远的距离或提供好的抗干扰性能。但模拟信号和数字信号不论怎么转换，只是改变了信号的表现形式而言，并不会改变信号所代表的数据。</p><p><strong>数字-数字</strong></p><p>用数字信号表示数字数据称为数字-数字编码，常用的编码方式：非归零码NRZ，曼彻斯特编码和差分曼彻斯特编码。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%95%B0%E5%AD%97-%E6%95%B0%E5%AD%97.png"></p><p><strong>数字-模拟</strong></p><p>数字信号调制成模拟信号，所谓调制就是进行波形转换是进行频谱变换，将带基数字信号的频谱变成适合于在模拟信道中传输的频谱。将数字信号调制成模拟信号的三种基本方法是：幅移键控（Amplitude Shift Keying,ASK）、频移键控（Frequency Shift Keying,FSK）、相移键控（Phase Shift Keying,PSK）。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%95%B0%E5%AD%97-%E6%A8%A1%E6%8B%9F.png"></p><p><strong>模拟-模拟</strong></p><p>模拟数据用模拟信号来表示，称为模拟-模拟调制。用来表示模拟数据的模拟信号称为载波，无线电波就是利用模拟-模拟调制的例子，模拟-模拟调制又三种方法：调幅（Amplitude Modulation,AM）、调频（Frequency Modulation,FM）、调相（Phase Modulation,PM）。</p><ul><li>调幅</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%B0%83%E5%B9%85.png"></p><ul><li>调频</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%B0%83%E9%A2%91.png"></p><ul><li>调相</li></ul><p>在调相中，载波的相位根据调制信号的振幅变化而变化，载波的振幅和频率不发生变化。调制的过程和结果与调频、调幅类似。</p><p><strong>模拟-数字</strong></p><p>模拟信号直接通过模拟信道传输，主要缺点是效率低和通信质量差。在现代通信中，采用的是通信质量高、处理效率高、保密性好的数字通信网络。</p><p>模拟信号转换为数字信号的技术称为脉码调制（Pulse Code Modulation,PCM）,PCM由四个过程组成：采样、量化、进行编码、数字-数字编码。</p><p><strong>PCM：采样</strong></p><p>采样就是每隔一段相等的时间测量一次模拟信号的振幅。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%87%87%E6%A0%B7.png"></p><p><strong>PCM：量化</strong></p><p>量化实际上把采样后的结果划分为若干个等级，每个等级用一个数字来表示。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%87%8F%E5%8C%96.png"></p><p><strong>PCM：二进制编码</strong></p><p>二进制编码是将量化的结果用二进制数来表示，量化时划分的等级数目越多，需要的二进制位数也就越多。</p><p>例如：量化结果在-127~127之间，则需要的二进制比特数为8位，最高位的1位比特代表符合位，0代表正，1代表负，其余的7个比特代表数值的大小。</p><p><strong>PCM：数字-数字编码</strong></p><p>采用数字-数字的编码方式，将二进制编码得到0、1比特串转换位数字信号，通过通信链路发送出去。在接收端收到数字信号后，依次进行相反的逆过程，就可以得到原始的模拟信号。</p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><p>数据用信号表示完毕后，就可以开始传播了。根据传输信号的类型，数据传输可以分为基带传输和宽带传输；根据依次传输的比特数目，可以分为串行传输和并行传输；根据传输的方向和时间，可以分为单工、半双工、全双工传输。</p><ul><li>基带传输</li></ul><p>在数据通信中，由于计算机或终端等数字设备直接发出的二进制数字信号形式称为方波，即0或者1，分别用高电平或者低电平表示。</p><p>方波电信号称为基带信号，在信道中直接传输基带信号称为基带传输。</p><ul><li>宽带传输</li></ul><p>宽带是比音频带宽更宽的频带，它包括大部分电磁波频谱。宽带传输中的所有信道都可以同时发送信号，宽带是传输模拟信号，数字信号需要经过调制才能进行宽带传输。</p><p>传输模拟信号；将信道分为多个子信道，分别传送音频、视频和数字信号。</p><ul><li>并行传输</li></ul><p>指在两点之间的适当数量的并行路径上，一组信号元的同时传输。并行传输通信效率高，一次可以传输多个比特，速度快但是并行传输费用较高，如果一次传输一个字节就需要八根导线，因此它只适合近距离传输。</p><p>传输数据时，可以使用多根导线，一次传输一组比特，这种方式称为并行传输。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%B9%B6%E8%A1%8C%E4%BC%A0%E8%BE%93.png"></p><ul><li>串行传输</li></ul><p>指信号元在两点之间的单一路径上的顺序传输。</p><p>传输数据时，只使用一根导线，比特是一个接着一个发送。串行传输一次只传输一个比特，速度较慢，但只使用一条线路，因此价格低廉，支持距离传输。计算机网站多使用串行传输，串行传输由分为同步传输和异步传输两类。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%B8%B2%E8%A1%8C%E4%BC%A0%E8%BE%93.png"></p><p><strong>异步传输</strong></p><p>在异步传输中，对于一个字节内部的每个比特，接收方和发送方要保存同步；而字节和字节之间是异步的，接收到起始位后，接收方就开始重新同步。异步传输中每个字节都附加开始和停止位，字节和字节之间间隙不定，所以速度较慢，适合于低俗通信</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%BC%82%E6%AD%A5%E4%BC%A0%E8%BE%93.png"></p><p><strong>同步传输</strong></p><p>同步传输速度快，效率高，不仅要求建立帧同步，在一个帧内的每一个比特也都要求同步，要求比较高。同步传输常用在计算机之间的数据传输上。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%90%8C%E6%AD%A5%E4%BC%A0%E8%BE%93.png"></p><ul><li>单工传输</li></ul><p>信息只能由一方A传熬另一方B，则称为单工</p><ul><li>半双工传输</li></ul><p>信息既可以由A到B，又能由B传A，但只能由一个方向上的传输存在，称为半双工传输。</p><ul><li>全双工传输</li></ul><p>线路上存在A到B和B到A双向信号传输，则称为全双工。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%8D%95%E5%B7%A5%E5%8D%8A%E5%8F%8C%E5%B7%A5%E5%85%A8%E5%8F%8C%E5%B7%A5%E4%BC%A0%E8%BE%93.png"></p><h2 id="复用技术"><a href="#复用技术" class="headerlink" title="复用技术"></a>复用技术</h2><p>信号从一个设备传输到另一个设备，需要通过传输介质。如果任意两点间都使用单独的线路连接，那么对于几百个，上千个站点的连接，投入将是巨大的，因为需要Cn^2根线连接。而且也不利于维护，为此提出了多路复用技术。多路复用技术是在一个传输介质上传输多路通信的方法。多路复用技术可用在计算机网络上，特别是适用于广域网的信息交换。在计算机网络中，可以让不同的载波频率通过同一传输介质，同时进行多个通信。不同的载波频率在传送不同的信号时，它们在同一传输中不会互相干扰。</p><p>当物理链路的传输能力大于信号传输的需求时，这条链路上就可以传输多路信号，进行复用。复用时一个复合信号发送出去；在接收端，多路分解器将信号一一分解出来。</p><p>复用技术可以分为频分复用、时分复用、波分复用、码分复用。</p><p><strong>频分复用</strong></p><p>频分复用（Frequency Division Multiplexing，FDM）主要用来传输模拟信号。频分复用将传输信道的总带宽划分成若干个子频带（子信道），每个子信道传输1路信号。所有子信道传输的信号以并行的方式工作，每一路信号传输时可不考虑传输时延，因而频分复用技术取得了非常广泛的应用。在频分复用中，用户在分盘到一定的频带之后，在通信过程中始终都要占用这个频带，并且不同的用户所占的带宽资源可能是不同的。</p><p><strong>时分复用</strong></p><p>时分复用（Time Division Multiplexing，TDM）用于一条线路传输多路数字信号。时分复用将链路分成了许多个时间片，没路信号分配一个小时间片，各路数字信号轮流占用链路。时分复用又可以分为同步时分复用和异步时分复用。</p><ul><li>同步时分复用中，复用器给每个站点都预先分配一个或多个时间片，每个站点只有在自己的时间片才能发送数据。时间片的一个循环组成一帧，在一帧中包括所有站点发送的数据。在接收端，分解器要和复用器保持相同的速率，双方都要保证严格同步，才能正确地取出没一路中的信息。</li><li>异步时分复用（也名统计时分复用）中，是对同步时分复用的改进提高了链路的利用率，但是附加的地址信息也带来了额外的处理开销。异步时分复用，时间片不进行预分配，每个时间片可以被任何一个有数据发送的站点适用，每个站点发送的数据在一帧中的位置是不固定的，因此在发送数据时要附加地址信息。</li></ul><p><strong>波分复用</strong></p><p>波分复用（Wavelength Division Multiplexing，WDM）就是逛的频分复用</p><p><strong>码分复用</strong></p><p>码分复用（Code Division Multiplexing，CDM）是靠不同的编码来区分各路原始信号的一种复用方式，现在人们更常用的名词是码分多址（Code Division Multiplexing Access，CDMA）</p><p>码片序列（chip sequence）</p><p>每个站被指派一个唯一的m bit码片（chip）序列</p><ul><li>如果发送比特1，则发送自己的m bit码片序列</li><li>如果发送比特0，则发送该码片序列的二进制反码</li></ul><p>例如，S站8 bit码片序列是00011011</p><ul><li>发送比特1时，就发送序列00011011，</li><li>发送比特0时，就发送序列11100100.</li></ul><p>S站的码片序列：（-1-1-1+1+1-1+1+1）</p><p>每个站点的码片序列都是经过仔细选择的，具有以下三个特点：</p><ol><li>任意两个站点的码片序列正交，即规格化内积为0.</li><li>任何码片和自己的规格化内积为1.</li><li>任何码片和自己反码的规格化内积为-1.</li></ol><p>系统中的站点必然处于三种状态之一：</p><ol><li>发送比特1，发送码片序列</li><li>发送比特0，发送反码序列</li><li>不发送数据，不发送任序列</li></ol><p>各个站点可以同时发送数据，码片序列会在空中叠加。</p><p>在接收站点，收到的是所有站点码片序列的叠加，接收站适用某个源站的码片序列于接收到的向量做内积，必有：</p><ol><li>所有其他站的信号都被滤掉（内积为0）</li><li>运算结果为+1：源站发送1</li><li>运算结果为-1：源站发送0</li><li>运算结果为0：源站没有发送数据</li></ol><p>根据结果的不同就可以指定某个源站所发送的数据了。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%A0%81%E5%88%86%E5%A4%8D%E7%94%A8.png"></p><h2 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h2><p>传输介质是发送端和接受端之间信号传输的物理通道。常用的传输介质分为有线传输介质和无线传输介质。常见的有线传输介质有双绞线，同轴电缆，光纤。无线传输是指两个通信设备之间无需通过物理连接，而是通过空间传输，如微波，红外线和短波。</p><p><strong>双绞线</strong></p><p>双绞线是有两条相互绝缘的导线按照一定的密度相互缠绕在一起而制成的一种通用配线。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%8F%8C%E7%BB%9E%E7%BA%BF.png" alt="屏蔽双绞线（左）和非屏蔽双绞线（右）"></p><p>​                                                    </p><table><thead><tr><th align="center">双绞线类型</th><th>传输带宽</th><th>应用类型</th></tr></thead><tbody><tr><td align="center">3类</td><td>16MHZ</td><td>低俗网络；语音传输</td></tr><tr><td align="center">4类</td><td>20MHZ</td><td>语音传输；10BASE-T以太网</td></tr><tr><td align="center">5类</td><td>100MHZ</td><td>10BASE-T以太网；100BASE-T以太网</td></tr><tr><td align="center">超5类</td><td>100MHZ</td><td>100BASE-T以太网；1000BASE-T吉比特以太网</td></tr><tr><td align="center">6类</td><td>250MHZ</td><td>万兆以太网（10Gbit&#x2F;s）;ATM网络</td></tr><tr><td align="center">7类</td><td>600MHZ</td><td>可用于今后的10吉比特以太网</td></tr></tbody></table><p><strong>同轴电缆</strong></p><p>同轴电缆（Coaxtal CabLe）是指有两个同心导体，而导体和屏蔽层又公用同一轴心的电缆。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%90%8C%E8%BD%B4%E7%94%B5%E7%BC%86.png"></p><p>同轴电缆分为细缆（RG-58）和粗缆（RG-11）两种</p><ol><li>细缆：直径为0.26厘米，最大传输距离为185米。线缆价格和连接头的价格都比较便宜，十分适合架构中小型以太网络。细缆的阻抗是50Ω。</li><li>粗缆：直径为1.27厘米，最大传输距离达到500米。粗缆比较适用于比较大型的局部网络，它的传输距离长，可靠性高，安装难度大，故总体成本高。粗缆的阻抗是75Ω。</li></ol><p><strong>光纤</strong></p><p>广纤是一种传输光束的细而柔韧的媒质。光缆是由一捆光纤组成。广缆是数据传输中最有效的一种传输介质，广纤通常是由石英玻璃制成，其横截面积很小的双层同心圆柱体，也称纤芯，它质地脆，易断裂，由于这一点，需要外加保护层。</p><p><strong>无线介质</strong></p><p>在自由空间利用电磁波发送和接收信号进行通信就是无线传输。无线电技术的原理在于，导体中电流强弱的改变会产生无线电波。利用这一现象，通过调制可将信息加载于无线电波之上。当电波通过空间传播到达收收信端，电波引起的电磁场变化又会在导体中产生电流。通过解调将信息从电流变化中提取出来，就达到了信息传递的目的。</p><table><thead><tr><th>类型</th><th>用途</th><th>优缺点</th></tr></thead><tbody><tr><td>无线电波</td><td>无线广播、电视节目、移动电话</td><td>不需要直接的物理连接，但是信号会比较弱</td></tr><tr><td>卫星</td><td>在军用、民用、科研邓领域中发挥着巨大的作用</td><td>长距离通信，信号好。但是搭建成本高</td></tr><tr><td>微波</td><td>长途电话</td><td>通信信道大，但是不能穿过金属物质</td></tr><tr><td>红外线</td><td>导弹制导</td><td>连接方便，但是距离有限</td></tr></tbody></table><h2 id="物理层标准"><a href="#物理层标准" class="headerlink" title="物理层标准"></a>物理层标准</h2><p>物理接口协议实际上是DTE和DCE或其他通信设备信道之间的一组约定，主要解决网络结点于物理信道如何连接的问题。物理层协议规定了标志接口的机械连接特性、电气信号特性、信号功能特性以及交换电路的规程特性。</p><p><strong>物理层标志举例——EIA-232</strong></p><p>EIA-232是美国电子协会EIA制定的著名物理层异步通信接口标准，它最早是1962年制订的标准RS-232。RS表示EIA的一种“推荐标准”，232是编号。RS-232标准提供了一个利用公用电话网络作为传输介质，并通过调制解调器将远程设备连接起来的技术规定。</p><p>机械特性：EIA-232适用ISO 2110关于插头座的标准，就是使用23根引脚的DB-25插头座。引脚分为上线两排，分别有13根和12根引脚，其编号为1至13和14至15，都从左到右。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/EIA232.png"></p><p>电气特性： EIA-232 与CCITT的V.28建议书一致，但要注意EIA-232采用负逻辑，逻辑0相当于对信号地线有+3V或更高的电压，而逻辑1相当于对信号地线有-3V或更负的电压。逻辑0相当于数据“0”(空号)或控制线的“接通”状态，而逻辑1则相当于数据“1”(传号)或控制线“断开”。</p><p>功能特性：与CCIT的V.24建议书–致。规定了什么电路应当连接到25根引脚的哪一根以及该引脚的作用。</p><p>规程特性：与CCITT的V.24建议书- -致。规定了DTE和DCE之间所发生的事件的合法序列。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运输层</title>
      <link href="/2020/05/18/TransportLayer/"/>
      <url>/2020/05/18/TransportLayer/</url>
      
        <content type="html"><![CDATA[<h2 id="运输层的功能和服务"><a href="#运输层的功能和服务" class="headerlink" title="运输层的功能和服务"></a>运输层的功能和服务</h2><p><strong>运输层提供的服务</strong></p><p>运输层要为应用层建立一个“端到端”的逻辑连接，这个连接是跨网络的。从应用层的角度看，运输层为其提供了一条端到端的数据通道，通过这个通道，数据可以从一方到达另一方。</p><p>应用层数据要从一端的应用层到达另一端的应用层，需要使用下层协议的服务，下层协议要把应用层数据从一个进程发送到另一进程，运输层就为应用层提供这样数据传输的服务。运输层为应用层提供了一条端到端的逻辑通道，通过这个通道，应用层报文可以从一个应用进程到达另一个应用进程。所谓端到端的逻辑通道是指从一端的应用进程到达另一端的应用进程，而忽略网络中间节点。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%BF%90%E8%BE%93%E5%B1%82%E6%8F%90%E4%BE%9B%E7%9A%84%E6%9C%8D%E5%8A%A1.png"></p><p><strong>可靠的服务</strong></p><p>在可靠的服务中，发送进程的应用层报文交给运输层后，运输层能够保证将数据顺序的、无差错的、无丢失的交给接收方应用进程。运输层在完成这个任务时，需要使用下面层次（网络层）的服务，当网络层不能保证可靠性时，交给网络层的数据可能会丢失，但运输层要采取重传等的方式，对应用层屏蔽这些处理细节，为应用层提供一条无差错、可靠的数据通道。</p><p><strong>不可靠的服务</strong></p><p>在不可靠的服务中，运输层不能保证数据的有序、可靠的投递，应用层报文可能会丢失、乱序和出错。</p><p><strong>运输层的功能</strong></p><p>运输层要为应用层提供一条端到端的数据传输通道，主要实现四个功能</p><ul><li>应用进程寻址</li></ul><p>运输层同时要为多个应用进程提供服务，需要确保数据交给正确的应用进程。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%E5%AF%BB%E5%9D%80.png"></p><ul><li>提供数据的可靠传递</li></ul><p>运输层报文段要到达目的地，需要使用下面网络层的服务，当网络层不能提供可靠服务时，运输层报文段就可能丢失、乱序、出错。由于运输层报文段中封装的是应用层报文，所以应用层报文可能也会丢失、乱序、出错。运输层负责检测出这些错误，并且纠正错误。对应用层屏蔽下面网络的不可靠性，为应用层提供一条可靠的数据通道。</p><ul><li>流量控制</li></ul><p>如果应用进程取走数据的速度小于对方发送的速度，那么缓存很快就会被充满，当再有数据到达时，就会产生溢出，后面的数据就不得不丢弃了。所以，运输层需要有一种机制来控制发送方发送数据的速度，保证接收缓存不溢出，确保接收进程能够及时的处理所有的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.png"></p><ul><li>拥塞控制</li></ul><p>运输层要依靠低层的分组交换网络来传递数据，分组交换的核心是存储转发，如果分组网络中拥入大量的数据，加载到网络上的负载超过网络的存储和处理能力，就会出现分组传递时延增加，分组丢失，服务质量下降情况，这种现象称为拥塞。如果不采取有序的检测和控制手段，则拥塞情况就会加重，最终导致网络崩溃，因此运输层需要能够检测拥塞并控制拥塞。</p><h2 id="TCP-x2F-IP的运输层"><a href="#TCP-x2F-IP的运输层" class="headerlink" title="TCP&#x2F;IP的运输层"></a>TCP&#x2F;IP的运输层</h2><p>TCP&#x2F;IP体系中，运输层有两个协议：TCP和UDP</p><p>UDP只提供应用进程寻址和简单的差错检测功能，它不向应用层提供数据的可靠性传输，但实时性好，效率高。</p><p>TCP除了具有应用进程寻址的功能，TCP还能为应用层提供可靠的数据传输服务，能将应用层报文顺序的、无差错的、不丢失的交给对端的应用进程，同时TCP还具有流量控制和拥塞控制的能力。</p><table><thead><tr><th align="center">应用</th><th align="center">应用层协议</th><th align="center">运输层协议</th></tr></thead><tbody><tr><td align="center">网页浏览</td><td align="center">HTTP</td><td align="center">TCP</td></tr><tr><td align="center">文件传输</td><td align="center">FTP</td><td align="center">TCP</td></tr><tr><td align="center">电子邮件</td><td align="center">SMTP,POP3</td><td align="center">TCP</td></tr><tr><td align="center">远程登录</td><td align="center">Telnet</td><td align="center">TCP</td></tr><tr><td align="center">动态获取IP</td><td align="center">DHCP</td><td align="center">UDP</td></tr><tr><td align="center">域名解析</td><td align="center">DNS</td><td align="center">UDP</td></tr><tr><td align="center">网络管理</td><td align="center">SNMP</td><td align="center">UDP</td></tr><tr><td align="center">路由信息交换</td><td align="center">RIP</td><td align="center">UDP</td></tr><tr><td align="center">简单文件传输</td><td align="center">TFTP</td><td align="center">UDP</td></tr><tr><td align="center">网络文件系统</td><td align="center">NFS</td><td align="center">UDP</td></tr><tr><td align="center">IP电话</td><td align="center">专有协议</td><td align="center">UDP</td></tr><tr><td align="center">流式多媒体</td><td align="center">专有协议</td><td align="center">UDP</td></tr></tbody></table><h2 id="应用进程寻址"><a href="#应用进程寻址" class="headerlink" title="应用进程寻址"></a>应用进程寻址</h2><ul><li>TCP&#x2F;IP提供端口机制来进行应用进程寻址。</li><li>TCP&#x2F;IP的运输层通过端口来实现<strong>多路复用</strong>和<strong>多路分解</strong>。</li><li>端口是运输层协议和应用层协议交互的接口，每个端口有本地唯一的端口号。</li><li>应用进程通过系统调用可以绑定到运输层协议(UDP或TCP)的一个端口上，这样通过端口号就能确定对应的应用进程。</li><li>端口号占16比特，TCP和UDP端口相互独立。</li><li>端口号只具有本地意义，不同主机相同端口号的应用进程没有特定联系。</li></ul><p>随着各种各样的应用不断增多，应用层协议也会不断增多（例如用户使用FTP协议下载文件的同时也能使用HTTP协议浏览网页）。而在TCP&#x2F;IP协议体系中命运输出协议只有两个，这样会出现多个应用层协议使用同一个运输层协议的情况。这就涉及到了应用进程寻址的问题。</p><p>TCP&#x2F;IP的运输层提供了多路复用和多路分解来解决应用进程寻址问题。这里的<strong>复用</strong>是指在发送方不同的应用进程可以使用同一个运输层协议传输数据，而<strong>分解</strong>是指接收方的运输层在剥去报文的首部后能够把应用层报文交付给正确的目的应用进程。</p><p>TCP&#x2F;IP的运输层通过端口来实现多路复用和多路分解。端口是一种软件结构，每个端口有唯一的端口号，并且有相应的输入和输出缓存。一个应用进程通过系统调用可以绑定到运输层协议（UDO或TCP）的一个端口上，这样通过端口号就能确定对应的应用进程，端口和应用进程是一 一对应的。当应用进程有数据需要运输传递时，它将数据放入对应的端口中；运输层协议会将其取走，并在数据前面添加运输层的首部，在首部里写入发送方的端口号（源端口）和接收方的端口号（目的端口）。这样当对方的运输层协议收到时，就可以根据目的端口号将数据交给正确的应用进程。</p><table><thead><tr><th align="center">应用</th><th align="center">应用层协议</th><th align="center">运输层协议</th><th align="center">服务器熟知端口</th></tr></thead><tbody><tr><td align="center">网页浏览</td><td align="center">HTTP</td><td align="center">TCP</td><td align="center">80</td></tr><tr><td align="center">文件传输</td><td align="center">FTP</td><td align="center">TCP</td><td align="center">21</td></tr><tr><td align="center">电子邮件</td><td align="center">SMTP,POP3</td><td align="center">TCP</td><td align="center">25，110</td></tr><tr><td align="center">远程登录</td><td align="center">Telnet</td><td align="center">TCP</td><td align="center">23</td></tr><tr><td align="center">动态获取IP</td><td align="center">DHCP</td><td align="center">UDP</td><td align="center">67</td></tr><tr><td align="center">域名解析</td><td align="center">DNS</td><td align="center">UDP</td><td align="center">53</td></tr><tr><td align="center">网络管理</td><td align="center">SNMP</td><td align="center">UDP</td><td align="center">161</td></tr></tbody></table><p>当客户端向这些服务器发起通信时，需要使用的运输层协议和服务其端口都是已知的，对于客户端进程，操作系统通常会随机给他分配一个大于1024的端口号，由于服务器端口是已知的，客户端可以首先向服务器发送给信息，服务器收到信息后，根据运输层首部中的源端口，可以知道客户端进程的端口号，这样也就可以向客户端发送数据了。</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>用户数据协议（User Datagram Protocol）是TCP&#x2F;IP协议体系中运输层协议之一，UDP协议只是提供应用进程寻址和简单的差错检测，并不提供其他功能。UDP接收应用层报文，加上UDP首部后封装成UDP数据报。</p><p>UDP协议的特点</p><ul><li>UDP是无连接的，即发送数据之前不需要建立连接</li></ul><p>UDP发送数据之前不需要与对端建立连接（当然发送数据结束时也没有连接可释放），因此减少了开销和发送数据之前的时延。数据被封装成UDP数据报后直接发送，每个数据报都是独立的，双方的UDP都不去记录发送数据报和接收数据报的情况。UDP的工作方式与现实生活中的寄信和类似。</p><ul><li>UDP使用尽力而为的服务方式，也就是不能保证可靠的传输</li></ul><p>UDP不提供可靠的数据传输服务，UDP数据报在传输过程中可能会出现丢失、重复、乱序的情况，但UDP并不纠正这错误，而是直接将负载数据上交应用层。UDP提供了差错检测的功能（可选），一旦检测出UDP数据报出现错误，就将其丢弃，不向应用层传递。</p><ul><li>UDP是高效的传输协议，UDP对应用层交下来的报文，既不合并，也不拆分，这可使应用层的数据被迅速、及时的发送出去。</li></ul><p>UDP在收到上层应用报文后，既不合并也不拆分，添加首部后就直接发送，这使应用层的数据可以被迅速、及时地发送出去。在收到UDP报文后，如果没有选差错检测，UDP能将数据立即上传到应用层。因此UDP的效率比较高，适合于对实时性要求高，但能够容忍部分数据丢失的应用，如视频会议、在线音频等。在数据传输可靠性比较高的网络里（如局域网），UDP往往会工作得很好。</p><ul><li>UDP没有拥塞控制和流量控制</li></ul><p>网络出现的拥塞不会使源主机的发送速率降低。很多的实时应用（如IP电话、实时视频会议等）要求源主机以恒定的速率发送数据，并且允许在网络发生拥塞时丢失一些数据，但却不允许数据又太大的时延，UDP正好适合这种要求。</p><table><thead><tr><th align="center">应用</th><th align="center">应用层协议</th><th align="center">运输层协议</th></tr></thead><tbody><tr><td align="center">动态获取IP</td><td align="center">DHCP</td><td align="center">UDP</td></tr><tr><td align="center">域名解析</td><td align="center">DNS</td><td align="center">UDP</td></tr><tr><td align="center">网络管理</td><td align="center">SNMP</td><td align="center">UDP</td></tr><tr><td align="center">路由信息交换</td><td align="center">RIP</td><td align="center">UDP</td></tr><tr><td align="center">简单文件传输</td><td align="center">TFTP</td><td align="center">UDP</td></tr><tr><td align="center">网络文件系统</td><td align="center">NFS</td><td align="center">UDP</td></tr><tr><td align="center">IP电话</td><td align="center">专有协议</td><td align="center">UDP</td></tr><tr><td align="center">流式多媒体</td><td align="center">专有协议</td><td align="center">UD</td></tr></tbody></table><p><strong>UDP对应用层交下来的报文，不合并，不拆分，封装后直接发送</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/UDP%E4%BC%A0%E8%BE%93%E5%BA%94%E7%94%A8%E5%B1%82%E6%95%B0%E6%8D%AE.png"></p><h2 id="UDP数据报"><a href="#UDP数据报" class="headerlink" title="UDP数据报"></a>UDP数据报</h2><p>UDP数据报由UDP首部和其封装的应用层数据组成，是UDP协议的传输单元。UDP的首部比较简单，只有8个字节。UDP首部中的8个字节由4个字段组成，每个字段的长度都是2个字节。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/UDP%E6%95%B0%E6%8D%AE%E6%8A%A5.png"></p><p>UDP首部封装应用层报文，生成UDP数据报</p><ul><li>源端口：发送数据应用进程的端口号，在需要对方回复选用，不需要时可用全0。</li><li>目的端口：接收数据应用进程的端口号，利用源端口和目的端口可以实现多路复用和多路分解。</li><li>长度：UDP首部和应用层报文的总长度，单位是字节，理论上UDP数据报的长度可以达到2^16字节，但实际上受下面数据链路层的限制，UDP数据报的长度要远远小于这个值。</li><li>检验和：检测首部和应用层报文的错误，有错误就丢弃UDP数据报。</li></ul><p><strong>例子</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/UDP%E6%95%B0%E6%8D%AE%E6%8A%A5%E4%BE%8B%E5%AD%90.png"></p><p><strong>UDP校验和</strong></p><p>UDP提供首部检验和字段来检测UDP数据报在传输过程中的错误，一旦检测出错误，UDP会丢弃收到UDP数据报。UDP计算检验和时，需要添加一个伪首部一起进行计算，计算校验和的范围包括伪首部，UDP首部和数据<img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/UDP%E6%A0%A1%E9%AA%8C%E5%92%8C.png"></p><h2 id="UDP的差错检测"><a href="#UDP的差错检测" class="headerlink" title="UDP的差错检测"></a>UDP的差错检测</h2><p>从发送发到达目的地，UDP数据报可能会经过许多条链路，在这些链路上可能会出现差错，而有些链路可能不提供差错检测的功能。同时在转发IP报文时，在内存中可能也会产生比特差错，从而影响到IP报文中所封装的UDP数据报。因此，提供发送方和接收方之间端到端的差错检测是必要的。UDP提供首部检验和字段来检测UDP数据报在传输过程中的错误。一旦检测出错误，UDP会丢弃出错的UDP数据报。但UDP的校验是可选的，当首部校验和为0时，表示没有校验。</p><p>UDP用户数据报首部中校验和的计算方法有些特殊，在计算时要在UDP用户数据之前增加12个字节的伪首部。“伪首部”只是在计算检验时，临时添加在UDP用户数据报前面，得到一个临时的UDP用户数据报。伪首部既不向下传送也不向上递交，而仅仅是为了计算检验和。伪首部和UDP数据报作为一个整体一起来计算校验和，伪首部中含有源IP地址和目的IP地址，这样可以检测出数据报被送到错误目的地的情况。因为校验和字段包含在UDP报文首部内，所以在计算时，校验和字段会先置0并参与计算，计算完毕后再将结果填入校验和字段。伪首部的17是分配给UDP的协议编号（TCP的协议编号是6），UDP长度是指UDP报文的长度（包括首部和数据）。</p><p><strong>发送方计算校验和过程</strong></p><ol><li>在校验和字段放入0（为了完成计算过程）</li><li>以16比特为一个单位，把伪首部及UDP用户数据报分成许多个16位字符。如果UDP用户数据报的数据部分不是偶数个字节，则要添加一个全0的字节（但此字节不发送）</li><li>按照二进制反码算数运算求和来计算这些16位字的和</li><li>将第三步的结果按位取反，即得到校验和，写入校验和字段，去掉伪首部</li></ol><p>在接收方，运输层收到UDP数据报后，添加伪首部（与发送发添加的伪首部相同）进行校验。按二进制反码求这些16位字的和。当无差错时，其结果应全为1，否则就表明有差错出现，接收方就丢弃这个UDP用户数据报。</p><p>UDP差错检测是可选的</p><ul><li>如果不需要校验，发送方会将校验和字段置为全，接收方看到校验和全为，不对数据进行检验</li><li>如果需要检验，发送方在校验和字段写入非零的校验和，接收方收到后，要进行校验</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP（传输控制协议）是专门为了在不可靠的互联网络中提供一个可靠的端到端的通信而设计的，是TCP&#x2F;IP协议体系中运输层的重要协议。TCP为应用层提供面向连接的、可靠的数据传递服务。发送方应用进程将数据交给TCP，TCP保证将这些数据有序地、无差错地、完整地送达目的应用进程。TCP为应用进程构建了一个可靠的比特流管道，发送发应用进程报文从一端流入，无差错地、完整地从另一端流出，交给接收方应用进程。因此TCP适用于对数据可靠性有要求的应用。</p><table><thead><tr><th align="center">应用</th><th align="center">应用层协议</th><th align="center">运输层协议</th></tr></thead><tbody><tr><td align="center">网页浏览</td><td align="center">HTTP</td><td align="center">TCP</td></tr><tr><td align="center">文件传输</td><td align="center">FTP</td><td align="center">TCP</td></tr><tr><td align="center">电子邮件</td><td align="center">SMTP,POP3</td><td align="center">TCP</td></tr><tr><td align="center">远程登录</td><td align="center">Telnet</td><td align="center">TCP</td></tr></tbody></table><p><strong>TCP协议的最主要特点</strong></p><ul><li>TCP是面向连接的运输层协议</li></ul><p>TCP协议在运输层应用层报文前，两端的TCP协议必须建立一个TCP连接，在传送数据完毕后，再释放已经建立的TCP连接。这就好像应用进程的通信是在“打电话”，通话前要先拨号接通，通话结束后要挂机。每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的通信。</p><ul><li>TCP提供可靠的数据传输服务</li></ul><p>TCP在传输数据时要使用下面层次的服务。如果下层网络是不可靠的，TCP要屏蔽掉下层网络的不可靠性，为上面的应用层提供一条可靠的数据传输通道。</p><ul><li>TCP提供流量控制</li></ul><p>TCP能够控制进程发送数据的速率，保证另一端不被大量的数据”淹没“而出现溢出。</p><ul><li>TCP提供拥塞控制</li></ul><p>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。</p><ul><li>TCP提供全双工通信</li></ul><p>TCP提供双向的数据传输服务，TCP允许通信双方的应用进程同时发送数据，TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。在发送时，应用进程在把报文传送给TCP后，就可以做字节的事，而TCP在合适的时候把数据发送出去，在接收时，TCP把收到的报文放入缓存，上层的应用进程在合适的时候读取。</p><ul><li>TCP是面向字节流的</li></ul><p>TCP中的“流是指流入到进程或从进程流出的字节序列。“面向字节流”的含义是:虽然应用程序和TCP的交互是一次一个数据块(数据块的大小可能不等)，但是TCP把应用程序交下来的所有数据块看成是一连串的无结构的字节流, TCP并不知道所传输的字节流的含义。TCP要对传输的每个字节都进行编号，封装在TCP报文段中传递，应用进程收到的字节流和对方应用进程发出的字节流完全一样。</p><h2 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h2><p>TCP在应用层数据前添加TCP首部，形成TCP报文段，TCP报文段是TCP的传输单元。一个TCP报文段分为首部和数据两部分，TCP协议的主要功能都体现在首部的各个字段中。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png"></p><ul><li>源端口和目的端口字段各占两个字节，源端口是发送方的端口号，目的端口是接收方的端口号</li><li>序号字段（seq），占四个字节，TCP连接种传送的数据流种的每一个字节都编上一个序号，序号字段的值则指的是本报文段所发送的数据的第一个字节在整个字节流种的编号</li><li>确认号字段（ack），占四个字节，是期望收到对方的下一个报文的数据的第一个字节的编号，期望实际上是隐含确认，ack n表示编号n以前的字节都收到</li><li>数据偏移，占四bit，它指出TCP报文段的实际起始处距离TCP报文段的起始处有多远。数据偏移的单位不是字节而是三十二bit字（四字节为计算单位）</li><li>保留字段，占六bit，保留为今后使用，但目前应置为零</li><li>标准字段，占6比特，每个比特都代表特定的含义，当其值为1时称为置位<ol><li>紧急比特URG，当URG&#x3D;1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应当尽快传送（相当于优先级的数据）</li><li>确认比特ACK，只有当ACK&#x3D;1时确认号字段才有效。当ACK&#x3D;0时，确认号无效</li><li>推送比特PSH（Push）,接收TCP收到推送比特置1的报文段，就尽快地交付给接收应用进程，而不再等到整个缓存都填满了再向上交付</li><li>复位比特RST(Reset)，当RST&#x3D;1时，表明TCP连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接</li><li>同步比特SYN，同步比特SYN置为1，就表示这时一个连接请求或连接接收报文</li><li>终止比特Fin(Final)，用来释放一个连接，当FIN&#x3D;1时，表明此报文段的发送端的数据已发送完毕，并要求释放运输连接</li></ol></li><li>窗口字段，占两个字节。窗口字段用来控制对方发送的数据量，单位为字节，TCP连接的一段根据设置的缓存空间大小确定字节的接收窗口大小，然后通知对方以确定对方的发送窗口的上限</li><li>检验和，占两个字节，检验和字段检验的范围包括首部和数据这两部分，在计算检验和时，要在TCP报文段的前面加上十二字节的伪首部</li><li>紧急指针字段，占16bit，紧急指针指出在本报文段中紧急数据的最后一个字节的序号</li><li>选项字段，长度可变，TCP只规定了一种选项，即最大报文段长度MSS（Maximum Segment Size）,MSS告诉对方TCP：“我的缓存所能接收的报文段的数据字段的最大长度是MSS个字节。”</li><li>填充字段，这是为了使整个首部长度是四个字节的整数倍</li></ul><p><strong>TCP报文段例子</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E4%BE%8B%E5%AD%90.png"></p><h2 id="TCP数据传输过程"><a href="#TCP数据传输过程" class="headerlink" title="TCP数据传输过程"></a>TCP数据传输过程</h2><p>三个阶段依次是建立连接，数据传输和关闭连接。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.png"></p><p>建立连接：目的是使通信双方在开始传输数据前建立联系，使双方都确定对方愿意与之通信；同时在建立连接的过程中还要相互传递和协商一些必要的参数（如发送字节的起始编号、窗口大小等），为后面的数据传输打下基础。</p><p>数据传输：连接建立后，开始传输数据，TCP的数据传输是双向的，在数据传输阶段TCP要纠正数据传输中的丢失、错误、乱序等问题，并要进行流量控制和拥塞控制。</p><p>关闭连接：在两个通信的应用进程之间的数据传输完毕后，就要关闭它们之间的连接，释放资源。</p><h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><p>TCP连接不是实际的物理连接，是在通信的两个端点建立的虚拟形式上的连接。</p><p>TCP为应用层提供面向连接（connection-oriented）的服务，在传递应用层数据前，TCP要首先为两个应用进程之间建立一个连接。连接建立后，TCP才能传输应用层报文，应用层数据传输完毕，需要关闭连接。</p><p>TCP连接是为通信的两个应用进程建立的虚拟形式上的连接，由操作系统软件实现。TCP连接的端点称为套接字（socket），(IP地址：端口号)可以用来表示一个套接字。</p><p>一个TCP连接可以用连接两端的套接字来表示</p><ul><li>（IP地址1：端口号1）———————————（IP地址2：端口号2）</li><li>（192.16.23.5：1035）———————————（10.153.16.54：80）</li></ul><p>TCP连接通常是由客户端发起建立的，建立连接的过程称为“三次握手”（three-way handshake）</p><p><strong>为什么要建立连接？</strong></p><ul><li>TCP需要确认双方应用进程都准备就绪</li><li>TCP需要为连接分配输入缓冲区、输出缓冲区；初始化TCP连接的控制变量（如序列号、接收窗口大小等）；交换连接控制参数</li></ul><p><strong>TCP建立连接是要为后续的数据传输做好准备</strong></p><p>TCP连接的建立采用客户&#x2F;服务器方式。主动发起连接建立的应用进程叫做客户（client）而被动等待连接建立的应用进程叫做服务器（sever）。最初两端的TCP连接都处于关闭状态（closed）。三次握手的过程首先由客户端发起，客户端主动打开连接，服务器端收到连接请求后被动打开连接。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B.png" alt="TCP的三次握手过程"></p><p><strong>三次握手的过程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8F%A1%E6%89%8B.png"></p><p><strong>第一次握手</strong></p><p>根据客户—服务器模型，通信首先由客户端发起。第一个TCP报文段由客户端发出，这报文端只有TCP首部，没有封装应用层报文（因为连接尚未建立，不能发送数据）。标志位SYN置1，表示客户端想和服务器建立连接。另外，客户端还要告诉服务器它所发送字节流的起始编号，这个编号对于TCP提供可靠性是一个重要的参数，在首部的序号（seq）字段中给出。起始编号是随机的，这里用x代替。</p><p>A的TCP向B发出连接请求报文段，其首部中的同步位SYN&#x3D;1，并选择序号seq&#x3D;x，表明传送数据时的第一个数据字节的序号是x。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%8F%A1%E6%89%8B.png"></p><p><strong>第二次握手</strong></p><p>服务器的TCP收到客户端的TCP报文后会回应一个TCP报文段。标志SYN和ACK均置1.序号字段的值为y，表示服务器告诉客户端字节发送的字节流起始编号为y（因为通信是双向的，服务器也会给客户端发送数据）。另外，将确认号（ack）字段的值置为x+1，表示对客户端上一个TCP报文的确认。注意这里的确认号是x+1，而不是x，隐含的意思是告诉客户端收到了编号为x的报文，现在期望客户端发送编号为x+1的报文。</p><p>B的TCP收到连接请求报文段后，如同意则发回确认。B在确认报文段中应使SYN&#x3D;1，使ACK&#x3D;1，去确认号ack&#x3D;x+1,自己选择的序号seq&#x3D;y。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png"></p><p><strong>第三次握手</strong></p><p>客户端的TCP收到服务器的应答后，需要再发送一个TCP报文。其中，标志ACK置1，序号seq的值为x+1（正是服务器TCP所期望的），确认号ack的值置为y+1表示服务器编号为y的报文的确认。</p><p>A收到此报文段后向B给出确认，其ACK&#x3D;1,确认号ack&#x3D;y+1。A的TCP通知上层应用进程，连接已经建立。B的TCP收到主机A的确认后，也通知其上层应用进程：TCP连接已经建立。</p><p>在三次握手建立连接的过程中，双方通常还会在TCP报文段的选项字段（Option）中向对方通告自己的最大报文段长度，称为MSS（Maximum Segment Size）。MSS描述的是本方TCP段中数据部分可以承载的最大字节数。</p><p><strong>三次握手建立TCP连接的各种状态</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%94%A8%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%90%84%E7%8A%B6%E6%80%81.png"></p><p><strong>TCP三次握手报文</strong></p><p>客户端—&gt;服务器：SYN&#x3D;1,seq&#x3D;x</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%8A%A5%E6%96%87%E4%B8%80.png"></p><p>服务器—&gt;客户端：SYN&#x3D;1,ACK&#x3D;1,seq&#x3D;y,ack&#x3D;x+1</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%8A%A5%E6%96%87%E4%B8%89.png"></p><p>服务器—&gt;客户端：ACK&#x3D;1,seq&#x3D;x+1,ack&#x3D;y+1</p><p><strong>关闭连接</strong></p><p>在两个通信的应用进程之间的数据传输完毕后，就要关闭它们之间的连接。需要四步，客户端和服务器都可以提出关闭连接的请求。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%E7%9A%84%E8%BF%87%E7%A8%8B.png"></p><ol><li>当客户端应用进程关闭时，客户端的TCP会向服务器发出一个特殊的TCP报文段，其中FIN标为位置为1，用来告诉服务器：客户端的数据发送完毕，要关闭连接。</li><li>服务器的TCP收到这个报文段后，会通知服务器进程，同时发送一个确认的TCP报文段，在这个报文段中ACK标志位置为1.到此为止，从客户端到服务器这个方向上的连接就释放了。因为TCP提供的是双向的数据通信，所以这时只关闭了从客户端到服务器，这一个方向上的连接，TCP连接处于半关闭（half-close）状态。</li><li>服务器还需要关闭另一个方向的连接。于是，服务器发出一个TCP报文段，在这个报文段中FIN标志位置为1，通知客户端关闭连接。</li><li>客户端的TCP收到后，通知客户端进程，同时向服务器发送确认的TCP报文段，此时连接就全部关闭了。双方的TCP都会释放掉这个连接所占的全部资源。</li></ol><p><strong>时间等待计时器</strong></p><p>关闭连接中，在第四步完成之后，TCP连接并没有真正释放掉，而是启动一个时间等待计时器（TIME-WAIT timer）,使客户端进入“TIME-WAIT”状态。</p><p>在TIME-WAIT timer到时候，才真正关闭客户端连接，释放资源。</p><p>时间等待计时器设置的时长是两个最长报文寿命（Maximum Segment Lifetime,MSL），客户端是在等待2MSL时间后，才真正关闭客户端的连接，释放资源。</p><p><strong>为什么必须等待2MSL的时间？</strong></p><ul><li>为了保证A发送的最后一个ACK报文段能够到达B</li><li>保证本地连接持续时间内所产生的所以文段都从网络中消失</li></ul><p><strong>保活定时器</strong></p><p>一个TCP连接建立后，可能会长时间处于空闲状态，没有任何数据交互。造成这种情况的原因是多种多样的。也许双方确实没有数据交换，也许是因为客户端崩溃了（死机或其他原因）。但服务器并不知道这个情况，他会长时间为这个连接保留缓存和其他资源。因此服务器需要知道客户端是否已经关闭或是重启，需要确认是否有必要继续保留这个连接。服务器通过设置“保活定时器（keepalive timer）”来达到这个目的。保活定时器的时间一般设为两个小手，如果服务器在两个小时内收到客户端的信息，那么定时器就复位，重新计时；如果两个小时内没有收到任何数据，那么服务器TCP就会给客户端发送一个探测报文。</p><p>此时客户端可能处于以下四个状态。</p><ol><li>客户端依然活跃，并且收到服务器的探测报文。此时客户端的TCP便发出响应报文，使服务器知道自己仍然处于活动状态。服务器的TCP会将保活定时器复位，保持这个连接。</li><li>客户端已经崩溃，并且已经关机。此时服务器的TCP不会收到任何响应。然后服务器TCP每隔75s发送一个探测报文，如果发送10个探测报文后仍然没有回应，那么服务器就关闭连接，释放相应的资源。</li><li>客户端已经重启，这时客户端的TCP不会保留原来的连接信息。当收到服务器的探测报文后，客户端TCP会发送一个复位（RST）的响应，服务器收到后便会关闭连接。</li><li>客户端依然活跃，但是始终都无法收到服务器的探测报文（可能是由于网络拥塞造成的）。这种情况同第二种类似，服务器收不到响应，也会关闭连接。</li></ol><h2 id="数据的可靠性传输"><a href="#数据的可靠性传输" class="headerlink" title="数据的可靠性传输"></a>数据的可靠性传输</h2><p>运输层TCP的一个重要任务就是能够把发送方数据可靠地传给接收方。在TCP通信过程中，一旦建立连接后，客户端的应用进程和服务器的应用进程就可以使用这个连接进行数据传输了，应用层将应用层报文交给TCP，TCP添加TCP首部形成TCP报文段，TCP报文段要发送到对方的TCP，需要使用IP协议的服务，TCP报文段要被封装成IP报文发送到目的地主机。在传输过程中，TCP会遇到以下问题。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E7%9A%84%E4%BC%A0%E8%BE%93.png" alt="TCP报文段的传输"></p><ul><li>数据丢失问题</li><li>数据乱序问题</li><li>重复数据问题</li><li>数据错误问题</li></ul><p>TCP面临面临着数据在的丢失、乱序、重复和出错问题。TCP要对应用层屏蔽并纠正这些错误，在一个不可靠的IP协议上，为应用层构建一个可靠的数据传输通道。</p><p><strong>可靠传输原理</strong></p><p>为了给应用层提供可靠数据传输服务，TCP采取了以下措施</p><ul><li>对发送的每个字节进行编号</li><li>对收到的字节进行确认</li><li>设定重传定时器</li></ul><p><strong>可靠传输实现</strong></p><p>基于以上的三个措施，TCP采取了带有定时器的确认和重传机制实现了数据的可靠性。</p><ul><li>TCP报文段丢失</li></ul><p>如发送方共发送三个报文段，前两个都正确到达了，第三个报文段中途丢失了。因此，发送方在定时器时间内没有收到对第三个报文的确认。于是，发送方重传第三个报文段，这次接收方收到了，并发送会确认报文。</p><ul><li>TCP报文段里的数据出错</li></ul><p>每收到一个TCP报文段，接收端的TCP首先要验证报文段首部的校验和。TCP首部校验和的计算过程与UDP类似，也要加上一个伪首部。如果报文校验有错，直接将其丢弃，因此也不会给对方发送任何确认报文。对于发送方而言，相当于报文段丢失了。这样当发送发的定时器超时后，发送方便会重传这个TCP报文段。</p><ul><li>报文段的重复问题</li></ul><p>可以考虑这样一种情况：接收方收到正确的报文段，于是发送确认报文，但是确认报文在中途丢失了；于是，发送方没有收到确认报文，定时器超时后又会重传，这样接收方就会收到重复的报文段。对于重置的报文段，接收方的处理是直接将其丢弃，同时发送确认报文。</p><ul><li>TCP报文段的乱序问题</li></ul><p>TCP报文段是封装在IP报文中传递的，而IP网络采用数据报技术，IP报文不能保证顺序地到达，所有TCP报文段可能会乱序到达。例如，在收到字节序号为1<del>400的数据后，接着收到字节序号为801</del>1200的数据，缺少序号为401<del>800的数据。此时TCP通常会选择缓存这些乱序的报文，等序号为401</del>800的数据到达后，将其排序再上传给应用进程。</p><ul><li>快速上传</li></ul><p>超时重传机制能够重传丢失的数据包，但有时超时计时器的时间设定会比较长，这样会导致发送方要在很长的时间后才能重传数据，从而增加端到端之间的时延。TCP通过发现冗余确认来较快的检测丢包的情况，从而实现快速重传。</p><h2 id="重传定时器"><a href="#重传定时器" class="headerlink" title="重传定时器"></a>重传定时器</h2><p>在确认和重传的机制中，重传定时器用来对报文确认与等待重传时间的计时。在发送一个TCP报文段后，就会启动定时器。如果在定时器截止时间之前收到确认报文，就撤销这个定时器。如果定时器时间到了，确认报文还没有收到，就重传该报文并将重新设置定时器。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%87%8D%E4%BC%A0%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8.png" alt="重传定时器"></p><p>重传定时器的原理比较简单，但具体实现上有两个问题需要考虑：</p><ul><li>重传定时器的时间</li></ul><p>设定重传定时器适当的时间值对于TCP协议是很重要的。如果值设置的过低，可恩能出现被接收方正确接收的报文，再次被重复传输的问题。如果设置的值过高，可能造成报文已经丢失，而发送方处于长时间等待的问题，降低了传输效率。由于互联网在不同时间段的用户数量、流量与传输延迟变化也很大，因此重传定时器的时间设置应该是一个动态的值，根据网络状况的不同而变化。</p><ul><li>重传定时器的管理</li></ul><p>不同的连接应该使用不同的重传定时器，一个主机同时与其他两个主机建立两条TCP连接，那么TCP就需要分别为每个TCP连接启动单独的重传计时器，不可能对不同的TCP连接使用同一个重传计时器。对于同一个连接，是否要为每个发送的TCP报文段都启动一个定时器？一个报文段一个定时器在原理上比较简单，但实现和管理上会比较复杂。如果一个连接只使用一个定时器，合适使用定时器，定时器超时要如何处理？</p><p><strong>重传定时器计算</strong></p><p>重传定时器的时间定义为TRO（Retransmission Timeout）。RTO应该比连接上的往返时间长一些。</p><ul><li><p>RTT（Round-Trip Time）：RTT代表一个TCP报文段从发出后到收到确认报文的往返时间。TCP需要不断测量RTT的样本值</p></li><li><p>SRTT（Smoothed Round-Trip Time）：因为网络的状况经常发生变化，所有RTT的值不是固定的，是动态变化的，这里使用SRTT代表RTT的均值。TCP需要不断对RTT值进行测量，获取样本值，来动态调整SRTT。</p></li><li><p>RTTVAR（Round-Trip Time Variation）：表示本次测量的RTT样本值与SRTT的偏差。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/RTO%E8%AE%A1%E7%AE%97.png" alt="RTO计算过程"></p><p>由于RTT样本会随着网络的状况发生变化，所以SRTT和RTTVAR也是一个变化值。因此RTO也是动态变化值。RTTVAR反映的是当前的RTT样本和SRTT估计之间的偏差，偏差越大，RTO就越大，反之就越小。这样才能比较正常的反映网络的真是状况，不会因为时间设置过短，造成不必要的重传；也不会因为时间设置过长，而给应用层带来很大的数据时延。</p><p><strong>样本值的测量</strong></p><p>理论上，TCP应该为每一个发出的报文段测量RTT样本，但实际上多数的TCP实现每次仅为一个报文段测量样本RTT。当发生一个报文段时，如果定时器已经被使用，该报文段不计时。</p><p>并且对于重传的报文，TCP不计算其样本RTT。因为对于重传的TCP报文段，如果收到确认，无法判定是对前一个报文段的确认还是对重传报文段的确认，所以TCP仅为传输一次的报文测量样本的RTT值。</p><p><strong>定时器管理</strong></p><p>理论上假定为每个传输的报文段都设置定时器，但是定时器管理会有很大的开销，所以RFC2988推荐使用单一的重传定时器。定时器启动遵循以下原则</p><ol><li><p>当要有数据（包括重传）发生时，如果定时器没有启动，就启动定时器</p></li><li><p>当所有的数据都被确认，关闭定时器</p></li><li><p>当收到确认ACK后，重新启动定时器</p></li><li><p>当定时器超时时，作以下处理：</p><p>重传未被确认的报文</p><p>设置RTO&lt;—RTO*2</p><p>重启定时器</p></li></ol><p><strong>具体算法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%8F%91%E7%94%9F%E6%96%B9%E7%AE%97%E6%B3%95.png" alt="发送方算法"></p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>在建立连接时，TCP连接的每一端都会为这个连接分配一定数量的接收缓存，当收到正确的应用层报文后，就将其放入缓存，等待应用进程取走。如果发送进程发送数据的速度超过了接收进程取走数据的速度，那么接收缓存很快就会被充满，最后溢出，导致数据丢失。所以，需要一种机制来控制发送进程发送数据的速度，保证接收缓存不会溢出，这种机制称为流量控制。</p><p><strong>滑动窗口机制</strong></p><p>流量控制的基本原理是接收方告诉发送方还可以发送多少字节的数据，由接收方来控制发送方发送数据量，这样接收缓存就不会溢出了。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.png" alt="TCP滑动窗口"></p><p>发送窗口左侧边界的初始值在建立连接时确定，由TCP要发送的第一个字节编号确定。在收到对方确认后，发送窗口左边界向右移，移动的位置取决于对方TCP报文段中确认号ack字段的值。发送窗口的大小取决于收到对方TCP报文段中的窗口大小字段的值，窗口大小win字段的值反映了对方接收缓存的空余空间。窗口大小的初始值由建立连接时对方TCP报文段的窗口大小字段通告确定。</p><p>当收到正确数据后，数据放入缓存，接收缓存容量变小。新的确认号和新的窗口大小会放在确认报文段的TCP首部中发送给对方，对方的发送窗口会据此向右移动，并调整大小，从而将后续的字节不断发送出去。在整个通信过程中，TCP接收缓存的大小是在不断变化的，通信双方不断将字节当前接收缓存大小通告给对方，从而达到流量控制的目的。</p><p><strong>流量控制中的两个问题</strong></p><ul><li>零窗口通告的问题</li></ul><p>接收方窗口原先为0，发送方不能发送数据。后来接收方窗口增大，但没有通知发送方，双方死锁。</p><p>解决方案：坚持定时器</p><ul><li>糊涂窗口症状</li></ul><p>接收方窗口每次只增大1，通告给发送方，发送方每次只能发送1字节数据，效率低。</p><p>解决方案：暂不发送窗口更新，等缓存有了合适的空余（如一半空闲），在发送窗口更新。</p><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>拥塞的产生：大量的数据涌入网络时，超出了网络的容纳和处理能力，网络中的部分路由器就会因为过载而被迫丢弃一些分组，产生“拥塞”。甚至使整个网络陷入瘫痪。</p><p>TCP拥塞控制的主要任务是按照中间网络的接收和处理能力，来决定向网络中发送数据的大小和速度，尽力避免拥塞的产生。</p><p>流量控制关注接收端处理能力，拥塞控制关注网络传输能力。</p><p><strong>如何判断产生拥塞</strong></p><p>网络中的路由器没有直接的办法通知TCP产生的拥塞，TCP需要自己去“感知”网络拥塞状况。</p><p>当TCP检测到数据包丢失时，就认为产生了拥塞。</p><ul><li>重传定时器超时：发生了比较严重的拥塞</li><li>收到重复确认：出现了一定程度的拥塞</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%88%A4%E6%96%AD%E4%BA%A7%E7%94%9F%E6%8B%A5%E5%A1%9E.png" alt="产生拥塞"></p><p><strong>如何处理拥塞</strong></p><p>TCP处理拥塞时，使用了两个控制变量和两个算法。两个控制变量是拥塞窗口和门限值。两个算法是慢启动算法和拥塞避免算法。</p><p>TCP连接维持的一个控制变量，称为拥塞窗口cwnd（congestion window），TCP向网络注入数据的量不能超过拥塞窗口的大小。拥塞窗口大小的初始值为1个MSS。</p><p>拥塞窗口变化的基本思想</p><ul><li>当网络的状况很好，每个确认报文都能及时回来时，就增大拥塞窗口，增加注入网络的数据，这样可以充分利用网络带宽。</li><li>如果产生了拥塞，确认报文没有及时回来，就主动减小拥塞窗口，以缓解中间网络的压力。</li></ul><p><strong>拥塞窗口大小如何变化</strong></p><ul><li>慢启动算法</li></ul><p>拥塞窗口初始值为1MSS（最大报文段长度），每经过1个RTT，拥塞窗口cwnd加倍。</p><ul><li>拥塞避免算法</li></ul><p>拥塞窗口cwnd达到门限值ssthresh后，每个RTT，拥塞窗口最多增加一个MSS。</p><ul><li>门限值（ssthresh）</li></ul><p>门限值 ssthresh是一个动态变化的值，用来确定当前采用慢启动还是拥塞避免算法。</p><p>拥塞窗口cwnd&lt;ssthresh时，采用慢启动算法</p><p>拥塞窗口cwnd&gt;&#x3D;ssthresh时，采用拥塞避免算法</p><p>门限值初值为65535字节，发生拥塞（收到重复确认或超时），门限值降为发生拥塞时拥塞窗口的一半。</p><p><strong>拥塞控制</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E4%B8%AD%E6%8B%A5%E5%A1%9E%E7%AA%97%E5%8F%A3%E7%9A%84%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4.png" alt="TCP拥塞控制中拥塞窗口的动态调整"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据链路层</title>
      <link href="/2020/05/13/DataLinkLayer/"/>
      <url>/2020/05/13/DataLinkLayer/</url>
      
        <content type="html"><![CDATA[<p>数据链路层是OSI参考模型中的第二层，介乎于<strong>物理层</strong>和<strong>网络层</strong>之间。数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源机网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧(frame)，帧是数据链路层的传送单位；如何控制帧物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。</p><h2 id="数据链路层服务和功能"><a href="#数据链路层服务和功能" class="headerlink" title="数据链路层服务和功能"></a>数据链路层服务和功能</h2><p><strong>数据链路层为网络层提供服务在相邻结点间传递网络层报文</strong></p><p>网络层要为IP数据报选路，确定IP数据报传递的下一站。下一站确定后，IP数据报要从一个站点到下一个站点，这时需要使用下一层的服务。数据链路层为网络层提供这样的服务，在相邻结点间传递IP数据报。所谓相邻节点是指两个节点在同一个物理网络或者两者间有直接的链路，数据可以从一个站点直接到达另一站点，不需要经过转发。</p><p>数据链路层是OSI&#x2F;RM模型的第二层，为网络层提供数据传输服务。网络层将IP数据报交给数据链路层，数据链路层添加自己的首部H2和尾部T2，封装成帧，将帧发送给相邻结点。帧到达接收方数据链路层后，去掉首部H2和尾部T2，将IP数据报上传，完成数据的传递。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E9%B1%BC%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9A%84%E5%85%B3%E7%B3%BB.png"></p><p>如果IP数据报的源结点和目的结点是相邻的，只需要封装一次就可以把IP数据报送到目的地。如果IP数据报的源结点和目的结点不是相邻结点，之间相隔有其他网络，就需要将IP数据报一段一段的发送，每一段都封装成一个新的帧。IP数据报经过三段链路才到达目的地，每经过一段链路，就要被封装一次，这三段链路中可能采用了不同的链路层协议，因此封装时首部和尾部可能各不相同，但IP数据报在传递过程中保持不变。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E5%B8%A7%E4%BC%A0%E9%80%92%E7%BD%91%E7%BB%9C%E5%B1%82%E5%88%86%E7%BB%84.png"></p><p>对于主机而言，通常只有一个网络接口，所以只有一个数据链路层协议。而路由器有多个网络接口，不同的接口连接不同的网络，所以路由器的不同接口会运行不同的数据链路层协议。</p><h2 id="链路和数据链路"><a href="#链路和数据链路" class="headerlink" title="链路和数据链路"></a>链路和数据链路</h2><p><strong>链路：</strong>一条无源的点对点的物理线路，中间没有任何结点，链路也称为数据电路、物理链路。</p><p><strong>数据链路：</strong>物理链路和他上面运行的链路层协议一起组成了数据链路。</p><p><strong>两类链路</strong></p><p><strong>点对点的链路：</strong>由两个结点之间相连的链路，是这两个结点之间的唯一的一条通路，多用于远程网上。</p><p> <img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%82%B9%E5%AF%B9%E7%82%B9%E7%9A%84%E9%93%BE%E8%B7%AF.png"></p><p><strong>共享链路：</strong>共享链路指多个结点共用一条链路，多用于局域网。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%85%B1%E4%BA%AB%E9%93%BE%E8%B7%AF.png"></p><h2 id="链路层的主要功能"><a href="#链路层的主要功能" class="headerlink" title="链路层的主要功能"></a>链路层的主要功能</h2><p><strong>1.成帧</strong></p><p>数据链路层需要把数据组成一定大小的数据块——帧，以帧为单位发送、接收和校验。</p><p><strong>2.差错控制</strong></p><p>在数据传输过程可能会因物理链路性能和网络通信环境等因素，难免会出现一些传送错误，数据链路层上需要有差错控制的功能，能够检测到这些错误，并采取措施进行纠正。</p><p><strong>3.流量控制</strong></p><p>在数据传输中，流量控制同样非常重要，数据的发送与接收必须遵循一定的传送速率，可以使得接收方能及时的接收发送发送方的数据。当接收方来不及接收时，就必须及时控制发送方数据的发送速率，使两方面的速率匹配。</p><p><strong>4.链路管理</strong></p><p>当网络中的两个结点要进行通信时，数据的发送方需要知道接收方是否已处在准备接受的状态。为此通信双方必须先交换一些必要的信息，以建立一条基本的数据链路，在传输数据时要维持数据链路，而在通信完毕时要释放数据链路。数据链路的建立、维持和释放称为链路管理。</p><p><strong>5.MAC寻址</strong></p><p>在数据链路层的帧中，通常要包含目的地的地址，这个地址称为MAC地址。数据链路层要能够根据帧中的MAC地址，保证每一帧都能送到正确的目的地，特别是在共享式的链路中。</p><p><strong>6.区分数据与控制信息</strong></p><p>在许多情况下，数据和控制信息处于同一帧中，因此一定要有相应的措施使接收方能够将它们区分开来，以便向上层传送的是真正需要的数据信息。</p><p><strong>透明传输</strong></p><p>透明传输是指无论网络层交给数据链路层是什么样比特组合的数据，都可以在数据链路上进行有效传输。有的时候，网络层交给数据链路层的数据中恰好包含了链路层的控制信息，这时需要采取相应的技术措施，使接收方不将这样的数据误认为是某种控制信息。</p><h2 id="成帧"><a href="#成帧" class="headerlink" title="成帧"></a>成帧</h2><p>数据链路层要在网络层报文前面添加首部和尾部，封装成帧，帧是数据链路层的传输单位。</p><p>数据链路层使用帧同步技术来区分每一帧的开始和结束</p><p><strong>1.字节计数法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%AD%97%E8%8A%82%E8%AE%A1%E6%95%B0%E6%B3%95.png"></p><p><strong>2.含字节填充的分界符法</strong></p><p>使用特殊字符标记帧的开始和结束</p><p>数据中如出现标记字符，需要使用转义字符ESC</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%90%AB%E5%AD%97%E8%8A%82%E5%A1%AB%E5%85%85%E7%9A%84%E5%88%86%E7%95%8C%E7%AC%A6%E6%B3%95.png"></p><p><strong>3.含位填充的分界标志法</strong></p><p>使用特殊的比特组合表示帧的开始和结束，例如01111110，称为F</p><p>为避免数据部分出现01111110，造成接收方错误判断帧结束，数据部分使用零比特填充法</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%90%AB%E4%BD%8D%E5%A1%AB%E5%85%85%E7%9A%84%E5%88%86%E7%95%8C%E6%A0%87%E5%87%86%E6%B3%95.png"></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%9B%B6%E6%AF%94%E7%89%B9%E7%9A%84%E5%A1%AB%E5%85%85%E4%B8%8E%E5%88%A0%E9%99%A4.png"></p><p><strong>4.物理层编码违例法</strong></p><p>将数据比特“1”编码成“高-低”电平对，将数据比特“0”编码成“低-高”电平对。</p><p>“高-高”电平对和“低-低”电平对在数据比特中是违法的，可以借用这些违法编码序列来界定帧的起始与终止。</p><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><p>在数据链路层中另外一个需要解决的问题是，如果发送方发送帧的速度超过了接收方能够接收这些帧的速度，该怎么去处理？这种情况是经常出现的，因为无法保证发送方和接收方所使用的计算机速度是相同或相近的。当发送方持续的以很高的速度向接收方发送帧，但接收方不能及时处理时，会造成接收方数据“溢出”，前面来不及接收的帧会被后面发送来的帧“淹没”，从而造成数据帧出错或丢失。要解决这个问题，就需要对发送方发送数据帧的速度进行限制，在数据链路层一般是使用基于反馈的流控制机制来进行控制，接收方给发送方送回信息，允许它发送更多的数据，或者告诉发送方它的情况是怎么样的。</p><p><strong>停止等待</strong></p><p>停止等待是最简单的流量控制方法。发送方每发完一帧后要等待接收方的确认，收到确认后才能发下一帧。如果没有收到确认，发送方必须一直等待，这样可以保证发送速率不会超过接收方处理数据的速率。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85.png"></p><p>考虑情况</p><ul><li>数据帧出错，接收方如何向发送方反馈</li><li>数据帧丢失，接收方没有收到数据帧，因此不会发送确认，而发送方会一直等待确认，双方死锁。</li><li>确认帧丢失，发送方没有收到确认，会一直等待确认，而接收方已经发出确认，会一直等待新的数据帧，双发死锁。</li></ul><p>使用的停等协议（针对数据传输中的出错和丢失情况）</p><ul><li>如果数据帧出错，就发送否定帧NAK，通知对方重传</li><li>发送方发送数据帧后，启动一个定时器，定时器时间到了，如果没有收到确认，就重传该数据，这样可以避免因数据帧丢失或确认帧丢失而造成的死锁。</li><li>当确认帧丢失后，发送方会重传对方已经收到的帧，因此接收方必须要能够区分每个帧，所以需要对帧进行编号，因为每次只发送一个帧，只有区分前一帧和后一帧就可以了，所以对数据帧0、1交替编号即可。</li></ul><p>停止等待的方法很简单，但是效率低。在发出数据帧后的一段时间内，发送方必须等待接收方确认，而此时链路一直空闲。在任何时刻，线路上只有一个帧，线路利用率不高，通信链路越长，等待的时间就会越长。</p><p><strong>滑动窗口</strong></p><p>数据链路层常用的是滑动窗口协议来控制数据帧的连续发送，滑动窗口协议在发送方保持一个连续的序号表，表示允许发送的数据帧的序号，称为发送窗口，在接收方也保持一个连续的序号表，对应于允许接收的帧的序号，称为接收窗口。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%8F%91%E9%80%81%E7%AA%97%E5%8F%A3.png"></p><p>只有落在发送窗口的帧才允许发送，窗口左侧是已发送并收到确认的帧，窗口右侧是暂时还不能发送的帧。在窗口内的帧可以分为两种情况：一是已经发送但是还没有收到确认的帧；二是还没有发送的帧，但马上可以发送。</p><p>接收窗口的帧是接收方当前期望接收到的帧。如果收到帧的编号落入接收窗口内，就接收到这个帧，否则将其丢弃。</p><p><strong>窗口的最大值</strong></p><p>发送窗口</p><p>如果帧中编号所占的比特位数为n，那么发送窗口Wt&lt;&#x3D;2∧n-1</p><p>接收窗口</p><p>Wr&lt;&#x3D;Wt</p><p>当帧中编号所占的比特位数为n时，接收窗口Wr&lt;&#x3D;2∧n-1</p><p><strong>等待停止是特殊滑动窗口发送窗口和接收窗口大小都是1</strong></p><h2 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h2><p>在数据链路层中，除了要解决成帧问题，流量控制，还需要解决数据传输中的差错问题，在物理传输线路上存在着各种噪声和干扰，传输数据信号可能有差错。如何能保证数据完整性和正确的顺序，这是差错控制的问题。差错控制包括两个方面，一是要检测差错，二是要对差错进行处理。</p><p><strong>检测差错</strong></p><p>数据的传输过程中，会出现两种情况的错误，一种是帧损坏，一种是帧丢失。</p><p><strong>帧损坏</strong></p><p>帧传输过程中，可能会受到干扰，造成接收到数据帧同发送时的数据帧不一样，这种情况称为帧损坏，使用CRC冗余校验检测帧损坏。</p><p><strong>CRC冗余校验</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/CRC%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C.png"></p><p><strong>CRC校验</strong></p><p>使用位数足够的G(x)，能够使检测不到的差错概率非常小，目前CRC校验中常用的生成多项式有CRC-16,CRC-CCITT和CRC-32。</p><p>CRC校验值通常作为帧的尾部添加在数据后面，在数据后面添加上的冗余码称为帧检验序列（Frame,Check Sequence,FCS）。CRC校验值是最常用的FCS。</p><p><strong>帧丢失</strong></p><p>在传输中一个帧被噪声破坏了，造成接收方不将其视为一个帧，就发生了帧丢失。使用帧编号、确认帧和定时器检测帧丢失。</p><p>检测帧丢失</p><ul><li>发送方要对帧进行编号，而接收方每收到一个帧，就向发送方发送一个确认帧。</li><li>发送方每发送一个帧，就启动一个定时器，如果定时器时间到了，确认帧仍未收到，就认为该帧丢失了。</li></ul><p><strong>差错处理</strong></p><p>当检测到错误，不论是帧损坏或帧丢失，数据链路层通常不去修正错误，而是简单的重新传输对应的帧，这个过程称为自动重复请求（Automatic Repeat reQuest,ARQ）</p><p>差错控制和流量控制是结合在一起的。因此停止等待常以停等ARQ来实现，而滑动窗口常以连续ARQ和选择重传ARQ来实现。</p><h2 id="ARQ"><a href="#ARQ" class="headerlink" title="ARQ"></a>ARQ</h2><p><strong>停等ARQ</strong></p><p>停等ARQ在每发一帧后就等待确认的返回，收到确认后才发送下一帧，为了区分重复帧，在帧的首部设有序号字段。因为是停止等待，所以只要能区分前后两帧即可，因此采用一个比特编号，帧的序号依次未0，1，0，1，0，1……..。收到正确的帧要发送确认帧，对于0号帧的确认为ACK1，表示0号帧已收到，期望接收的下一帧是1号帧；对于1号帧的确认为ACK0，表示1号帧已收到，期望接收的下一帧是0号帧。通常不发送否认帧NAK。</p><p><strong>连续ARQ</strong></p><p>连续ARQ基于滑动窗口技术，对数据帧模n进行编号。发送窗口大于1.所以在发送完一帧后，不是停下来等确认信息的到来，而是可以连续发送若干帧，整个通信的吞吐量和信道利用率得到提高。连续ARQ中，接收方窗口大小固定为1，因此接收方只按顺序接收数据帧。连续ARQ协议一方面利用滑动窗口连续发送数据帧而提高了效率；另一方面，又会重传那些已经正确送到过的帧（帧出错），这种做法又降低了传送效率。连续ARQ协议比较简单，实现起来比较容易。</p><p><strong>选择重传ARQ</strong></p><p>发送窗口大于1，一次可以发送多个帧；</p><p>接收窗口大于1，可以非顺序接收帧;</p><p>n比特进行编号：0，1，2….2∧n-1,0，1，2；</p><p>不必回退N帧重传，可以只重传出错的帧但算法很复杂需要大的缓冲区；</p><h2 id="数据链路层协议"><a href="#数据链路层协议" class="headerlink" title="数据链路层协议"></a>数据链路层协议</h2><p><strong>异步协议</strong></p><p>异步协议中以一个字符为一个传输单位，每个字符的开始和结尾都有特殊的标记，字符和字符之间的间隔是不确定的，所以字符之间是异步的。</p><p><strong>同步协议</strong></p><p>同步协议以一个数据块为一个传输单位，在整个数据块内部都是同步的。</p><ul><li>面向字符的协议</li></ul><p>每个数据帧都是由若干个字符组成的，每个字符通常用一个字节（8比特）表示。在协议中定义一些特殊的字符表示特殊含义（帧开始结束、数据开始结束）。最著名的是IBM公司的二进制同步通信协议（Binary Synchronous Communication,BSC）。面向字符的协议由一个很大的缺陷就是强烈的依赖字符集，使用不同的字符集的机器不能利用字符协议进行通信，扩展性差。</p><ul><li>面向比特的协议</li></ul><p>每一个帧由若干个比特组成，不依赖特定的字符集。一个帧分为若干个字段，每个字段在帧中都有固定的位置，都有特殊的功能和含义，同时使用一些特殊的比特组合来代表特殊的含义（帧的开始和结束）。代码性的是高级数据链路控制协议（High-level Data Link Control,HDLC）和点对点协议（Point-Point Protocol,PPP）。目前数据链路层协议主要是面向比特的协议。</p><h2 id="HDLC协议"><a href="#HDLC协议" class="headerlink" title="HDLC协议"></a>HDLC协议</h2><p>HDLC（High-level Data Link Control）协议是面向比特协议中最具代表性的一个协议。HDLC协议起源于1974年IBM公司推出的SDLC协议。1979年在SDLC协议的基础上提出高级数据链路控制协议——HDLC协议。后来基于HDLC协议，又提出一系列链路层协议，如LAP系协议、PPP协议、帧中继协议等。局域网协议也是基于HDLC协议发展起来的。</p><p>HDLC具有透明性，数据和控制信息完全独立，不受任何位式样和字符宽度的限制：能适应多种应用、多种网络配置，可用于点到点链路，也可用于多点链路；可采用交换线路，也可采用非交换线路；控制信息所占比例小，传输效率高；可靠性高；吞吐率高等优点。因此HDLC已经成为广受欢迎的数据链路控制规程。</p><p>HDLC涉及三种类型的站：主站、从站、复合站</p><p><strong>主站：</strong>主要功能是发送命令（包括数据信息）帧、接收响应帧、并负责对整个链路的控制系统的初启、流程的控制、差错检测或恢复等。</p><p><strong>从站：</strong>主要控制接收由主站发来的命令帧，向主站发送响应帧，并且配合主站参与差错恢复链路控制。</p><p><strong>复合站：</strong>主要功能是既能发送又能接收命令帧和响应帧，并且负责整个链路的控制。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/HDCL%E9%93%BE%E8%B7%AF%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B.png"></p><p>根据通信双方的链路结构和传输响应类型，HDLC提供了三种操作方式：正常响应（NRM）、异步响应（ARM）、异步平衡（ABM）。</p><p><strong>HDLC帧格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/HDLC%E5%B8%A7%E6%A0%BC%E5%BC%8F.png"></p><ul><li>标志字段F（Flag）为01111110，共8bit。在接收端只有找到标志字段就可以确定一个帧的位置。</li><li>地址字段表示链路上站的地址。</li><li>信息字段内包含了用户的数据信息和来自上层的各种控制信息，使用零比特填充法避免信息字段内出现标志F（01111110）</li><li>帧校验序列FCS占16比特，采用CRC校验，它生成多项式G（x）&#x3D;X^16+X^12+X^5+1</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/HDLC%E5%B8%A7%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6.png"></p><ul><li>信息帧用于信息发送，信息（Info）部分存放高层协议报文，N(S)表示所发送帧的编号， N(R)表示希望收到的下一帧编号。</li><li>监督帧用于监视和控制数据链路，完成信息帧的接收确认、重新请求、暂停发送请求等功能，监督帧不具有信息字段。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%9B%91%E7%9D%A3%E5%B8%A7.png"></p><ul><li>无编号帧用于数据链路的控制，用5个比特位（即M1、M2）的组合来表示不同功能的无编号帧。</li></ul><p><strong>HDLC协议工作过程</strong></p><p>多点链路的建立和释放</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%A4%9A%E7%82%B9%E9%93%BE%E8%B7%AF%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%92%8C%E9%87%8A%E6%94%BE.png"></p><p>复合站的链路建立和释放</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%A4%8D%E5%90%88%E7%AB%99%E7%9A%84%E9%93%BE%E8%B7%AF%E5%BB%BA%E7%AB%8B%E5%92%8C%E9%87%8A%E6%94%BE.png"></p><h2 id="PPP"><a href="#PPP" class="headerlink" title="PPP"></a>PPP</h2><p>点对点协议（Point-to-Point Protocol,PPP）是因特网上广泛使用的数据链路层协议，用于点对点的链路，所谓点对点链路是指一条链路直接连接两个结点，每端各有一个结点。PPP协议在RC1661中定义和描述。PPP能够控制数据链路的建立、配置和测试，PPP支持身份认证，PPP能够对网络层地址和数据进行协商。</p><p><strong>PPP帧格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/PPP%E5%B8%A7%E6%A0%BC%E5%BC%8F.png"></p><p>标志字段表示帧的开始和结束，为了防止在帧的内部出现0111110，同样也要采取零比特填充的方法，在接收端再将多余的0去掉。</p><p>由于PPP协议用于点对点通信，不存在寻址的问题。所以地址字段的值固定为11111111.</p><p>控制字段采用HDLC的无编号帧格式，值固定为11000000，没有序列号和确认号，所以协议不提供数据传输的可靠性，同时也没有流量控制和差错控制的功能。</p><p>PPP帧内可以封装多个协议的数据包，每个协议都有一个编号，当封装某个协议的数据包时，协议字段就填写这个协议的编号。这样，接收方可以根据协议的编号将数据交给正确的协议去处理。</p><ul><li>LCP协议完成数据链路的建立、配置、维护和终止</li><li>PAP和CHAP协议都可以用来完成用户的身份认证</li><li>IPCP协议用来协商网络层配置，为用户分配IP地址</li><li>IP协议用来发送和接收用户的数据</li><li>FCS是帧校验字段，PPP采用CRC校验，当CRC校验错误时，PPP就丢弃数据帧</li></ul><p><strong>LCP</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/LCP%E5%8D%8F%E8%AE%AE.png"></p><p>数据链路层的建立、配置、维护和终止都是由链路控制协议（Link Control Protocol,LCP）来完成的。</p><p>编码字段占一个字节，用来说明LCP包类型。标识字段相当于LCP包的编号，用来匹配请求和应答的LCP包。长度字段给出LCP包的长度。LCP数据部分通常包含LCP协议的一些选项，如最大接受单元、所采用的认证协议等。在发送数据前，通信双方要建立链路，建立链路时无论哪一方都需要发送Config-request报文并携带每一端自己所希望协商的配置参数选项</p><p><strong>LCP包类型和编码</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/LCP%E5%8C%85%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BC%96%E7%A0%81.png"></p><p><strong>认证协议</strong></p><p>PPP中使用身份认证协议</p><ul><li>口令认证协议（Password Authentication Protocol,PAP）</li></ul><p>PAP协议非常简单，用户向系统发送用户名和口令，系统验证用户名和口令，如果正确就接受连接，否则就拒绝连接。PAP直接发送用户名和口令，是不安全的。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/PAP%E5%8D%8F%E8%AE%AE.png"></p><p><strong>PAP包类型和编码</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/PAP%E5%8C%85%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BC%96%E7%A0%81.png"></p><p><strong>PAP工作过程</strong></p><ol><li>用户首先向系统发送PAP包，编码字段置为1，代表Authenticate-request,数据部分存放用户名和口令。</li><li>系统对收到的用户名和口令进行验证，并向用户返回PAP包。如果用户名和口令正确，PAP包中的编码值置为2，表示Authenticate-ack,通过认证；否则编码的值置为3，表示Authenticate-nak ,拒绝用户接入。</li></ol><ul><li>挑战握手协议（Challenge-Handshake Authentication Protocol,CHAP）</li></ul><p>CHAP协议对PAP协议作了改进，不直接发送用户的密码，提高了安全性。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/PAP%E5%8D%8F%E8%AE%AE.png"></p><p><strong>CHAP包类型和编码</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/CHAP%E5%8C%85%E7%B1%BB%E5%9E%8B.png"></p><p><strong>CHAP工作过程</strong></p><ol><li>系统首先向用户发送一个CHAP包，包中编码字段值为1，表示Challenge,数据部分包含一个随机数，这个随机数称为查问值。</li><li>用户收到后，使用事先定义号的函数作用域查问值和自己的口令，生成一个值，将这个值和用户名放入CHAP包发给系统。在这个CHAP包中，编码字段值为2.表示Response。</li><li>系统收到用户的Response后，根据其中的用户名查到对应的口令，用一个函数对查到的口令和查问值进行运算。如果计算结果域用户Response包中的值相同，说明是合法用户，并且口令正确，那么就给用户发送CHAP包，编码值设为3，表示Success,通过认证；否则发送的CHAP包的编码值设为4，表示Failure，未通过认证。</li></ol><p><strong>网络控制协议</strong></p><p>用户认证通过后，PPP使用网络控制协议（NCP）来建立两端网络层的连接，协商网络层的选项和传递网络层数据。NCP不是一个协议，而是一组谢谢，包括IPCP,IP,IPX等。互联网协议控制协议（Internet Protocol Control,IPCP）主要用来协商网络层选项，设置用户的IP地址，IPCP报文在PPP帧中封装。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IPCP%E5%8D%8F%E8%AE%AE.png"></p><p>编码字段有七个值，分别定义七种IPCP包</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IPCP%E5%8C%85%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BC%96%E7%A0%81.png"></p><h2 id="PPP协议的工作过程"><a href="#PPP协议的工作过程" class="headerlink" title="PPP协议的工作过程"></a>PPP协议的工作过程</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/PPP%E5%8D%8F%E8%AE%AE%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B.png"></p><p>拨号上网的例子来描述PPP协议的工作过程（采用PAP认证）</p><ol><li>建立物理连接。用户家中的计算机通过调制解调器呼叫ISP（例如电信）的路由器，路由器的调制解调器给予应答，双方建立物理连接。</li><li>建立数据链路。进入数据链路创建阶段，此时用到的协议是LCP，用户首先向ISP发出PPP帧，帧中封装LCP配置请求包（Configure-request）,协商数据链路选项（最大传输单元，所采用的认证协议等），JSP端如果接受选项，就给用户发送LCP配置确认包（Configure-ack）。数据链路创建完毕。</li><li>用户认证阶段。进入用户认证阶段，用户向JSP发出PAP协议的Authenticate-request,请求认证，如果通过，ISP回应Authenticate-ack。认证的方式是在建立数据链路阶段协商确定的。</li><li>进入网络层配置阶段，此时用到的协议是IPCP。用户向ISP发出IPCP协议的Configure-request，协商网络层参数，ISP如果接受选项，回应Configure-ack。用户分配到了IP地址，网络层配置完毕，用户接入因特网。</li><li>数据传输阶段，此时用到的协议是IP。用户将自己的数据封装在IP报文中，通过PPP链路发送出去，同时通过PPP链路接收因特网中的数据。</li><li>数据传输完毕，用户断开网络连接，用户端向JSP发送IPCP的Terminate-request，请求断开网络层连接；JSP端回应Terminate-ack，同意断开并收回IP地址。</li><li>断开数据链路。用户端向JSP发送LCP的Terminate-request,请求断开数据链路；ISP端回应Terminate-ack，链路断开。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/2020/05/12/ApplicationLayer/"/>
      <url>/2020/05/12/ApplicationLayer/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>应用层的目的是要为人们提供具体的网络应用（如网页浏览，文件下载，电子邮件等）。通信两端的应用层遵循特定的应用层协议，交换特定的应用层报文，实现特定的网络应用。</p><p>在实际的网络通信中，应用层报文的传输需要使用下面的运输层、网络层、数据链路层、物理层的服务，要被层层向下传递、封装，经过网络到达目的地后再层层向上传递、去封装，最终到达目的地的应用层。</p><p>网络应用程序通过交换应用层报文实现应用的功能</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%BA%94%E7%94%A8%E5%B1%82%E6%8A%A5%E6%96%87.png"></p><p>应用层实体实现具体的应用层协议，提供网络应用。网络通信是在两个正在运行着的程序之间进行的，应用层实体是实现并遵循特定网络协议的应用进程。两个进程通过交换应用层报文，为用户提供特定的网络应用。</p><h2 id="应用层工作模型"><a href="#应用层工作模型" class="headerlink" title="应用层工作模型"></a>应用层工作模型</h2><p><strong>应用进程</strong></p><p>应用层之间的通信是在两个正在运行着的程序之间进行的。正在运行的程序称为进程，应用进程是应用层的通信主体，实现了网络应用。</p><p><strong>应用层协议</strong></p><p>网络应用需要通过应用层协议来实现，应用进程内包含了应用层协议的实现代码，应用进程按照协议的要求解读和生成应用报文，按照协议的要求进行报文交换，实现网络应用。</p><p>应用层的工作模型主要有三种：客户-服务器模型、P2P模型和混合模型。客户-服务器模型是最主要、最基本的模型。</p><hr><p><strong>1.客户-服务器模型</strong></p><p>服务器要先运行并处于等待状态，时刻准备好接收客户的请求。可会只在需要时向服务器发出请求，服务器收到请求后给客户做出应答，然后客户再次发出请求，服务器再次给与应答。目前客户-服务器模型是网络中多数应用的工作模型（如WWW，FTP，DNS等）。</p><p><strong>服务器如何处理多个客户端请求的？</strong></p><ol><li><strong>重复型服务程序</strong> 在处理完成一个客户请求之前，不会为其他客户提供服务，重复型服务器包含一个请求队列，客户请求到达后，首先进入队列中，服务器按先进先出的原则对请求做出逐一响应。</li><li><strong>并发型服务器</strong>，在启动一个主机服务器，主服务器任务实时等待客户请求，一旦客户请求到达，主服务器立即产生一个子进程（又称重服务器），由从服务器来响应客户请求，主服务器再次等待客户端请求状态，如果还有客户请求，主服务器再次产生一个从服务器来响应新的客户请求，就是说每个客户都有自己的服务器。</li></ol><hr><p><strong>2.P2P模型</strong></p><p>在P2P（Peer TO Peer）模型中，网络中没有一个中心服务器，网络中的每个结点是对等的。网络中的结点能够自动发现别的节点，每个结点既是客户端，也是服务器（如Gnutella）。</p><hr><p><strong>3.混合模型</strong></p><p>许多应用采用的客户-服务器模型和P2P模型的混合方式。从服务器获取必要信息，客户端之间P2P方式通信（如QQ，Skype）.</p><hr><h2 id="应用进程的地址"><a href="#应用进程的地址" class="headerlink" title="应用进程的地址"></a>应用进程的地址</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%E5%AF%BB%E5%9D%80.png"></p><p>在TCP&#x2F;IP体系中，应用进程的地址是通过&lt;IP地址，运输端口号&gt;来确定的，一个IP地址可以标识网络中的一台主机，为了区分一台主机内的不同的通信进程，每个通信进程会对应一个端口号，端口号只在本地主机有效，不具有全局性。&lt;IP地址1，端口号1&gt;——&lt;IP地址2，端口号2&gt;能确定通信的两个应用进程。</p><p>对于一些常用的服务（如web服务、FTP服务），其服务器进程对应的端口号是固定的，这些端口称为<strong>熟知端口（well-know port）</strong>其值的范围一般为0~1023，而客户进程的端口号是由操作系统随机分配的它的值一般大于1024.</p><p>查看端口号的命令（windows）:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -an</code></pre><p><strong>常用的服务及其默认端口号</strong></p><table><thead><tr><th align="center">服务</th><th align="center">运输层协议</th><th align="center">默认端口号</th></tr></thead><tbody><tr><td align="center">Web</td><td align="center">TCP</td><td align="center">80</td></tr><tr><td align="center">FTP</td><td align="center">TCP</td><td align="center">21</td></tr><tr><td align="center">DNS</td><td align="center">UDP</td><td align="center">53</td></tr><tr><td align="center">SMTP</td><td align="center">TCP</td><td align="center">25</td></tr><tr><td align="center">POP3</td><td align="center">TCP</td><td align="center">110</td></tr><tr><td align="center">Telnet</td><td align="center">TCP</td><td align="center">23</td></tr></tbody></table><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>统一资源定位符（Unified Resource Location,URL）表示服务器上可以访问的资源。URL是对Internet上资源的位置和访问方法的一种表示形式，其中资源可以是多种类型（文件，目录，图像，声音等）</p><p><strong>URL的表示形式：&lt;访问方式&gt;：&#x2F;&#x2F;&lt;主机&gt;：&lt;端口&gt;&#x2F;&lt;路径&gt;</strong></p><p>访问方式是指所采用的应用层协议，主机给出服务器的主机地址，端口给出服务器内服务进程的端口号，路径给出要访问的具体资源。</p><p><strong>例</strong></p><ul><li><a href="http://220.108.9.38/music/song.html">http://220.108.9.38:80/music/song.html</a></li><li><a href="ftp://ftp.cdut.edu.cn/pub/">ftp://ftp.cdut.edu.cn/pub/</a></li></ul><h2 id="DNS域名系统"><a href="#DNS域名系统" class="headerlink" title="DNS域名系统"></a>DNS域名系统</h2><p>Internet中标识一台主机的两种方式</p><ul><li>域名（Domain Name）:<a href="http://www.baidu.com/">www.baidu.com</a></li><li>IP:220.181.111.188</li></ul><p><strong>域名和IP地址存在对应关系，一个域名对应一个或多个IP地址</strong></p><p>域名容易书写，记忆，人们喜欢使用域名,但网络通信最终还是要使用IP地址。向具有域名的主机发送数据包时，需要先得到其域名对应的IP地址，域名系统（Domain Name System,DNS）提供了域名与IP之间的映射服务。</p><p>域名系统（DNS）是用分布式数据库来管理全球域名的系统，将计算机名字解析成IP地址，主机通过DNS转换成主机或路由器能够识别的IP地址。</p><p><strong>域名系统的特点</strong></p><p>允许区域自治在域名系统的设计过程中运行每个域的管理单位设计和定义本域下的子域、子域名、主机名，不必通知上级管理结构，由本域的DNS服务器进行管理和解析。</p><p><strong>层次域名空间</strong></p><p>域名采用分层次的命名方式</p><p><strong>…….三级域名.二级域名.顶级域名</strong>   例（<a href="http://www.baidu.com)/">www.baidu.com）</a></p><p>三类顶级域名</p><ul><li>地理顶级域名：<code>.CN(中国</code>，<code> .UK(英国)</code>，<code>.JP(日本)</code></li><li>类别顶级域名: <code>.COM(公司)</code>，<code>.NET(网络机构)</code>，<code>.ORG(组织机构)</code></li><li>新增顶级域名：<code>.BIZ(商业)</code>，<code>.COOP(合作公司)</code>，<code>.NAME(个人)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%9F%9F%E5%90%8D.png"></p><h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p>网络通信不能通过域名来进行，必须将域名转换为对应的IP地址。将域名转换为对应IP地址的过程称为域名解析，域名解析由域名服务器来完成，域名服务器的默认端口号为53，使用UDP协议作为运输层协议。一台服务器无法提供Internet上所有的域名和IP地址的映射，Internet上的域名服务器采用层次化分布式的模型，构成一个分布式的数据库系统，共同提供域名解析服务，这个系统称为域名系统。</p><p>域名系统的三个层级：根域名服务器、顶级域名服务器、授权域名服务器。（上一级维护下一级）</p><ul><li>根域名服务器维护顶级域名服务器（.com，.cn)的地址信息，接收顶级域名服务器和本地域名服务器的查询请求。</li><li>顶级域名服务器（.com，.cn）维护下级域名服务器（.edu.cn，.163.cn）的信息，接受下级域名服务器的查询请求。</li><li>授权域名服务器负责解析某个区域内所有的域名（baid.com授权域名服务器负责解析所有以baidu.com结尾的域名如<a href="http://www.baidu.com,music.baidu.com等/">www.baidu.com，music.baidu.com等</a> ）</li></ul><p>全球有十三台根逻辑域名服务器。名字分别为“A”~“M”</p><p><strong>本地域名服务器</strong></p><p>本地域名服务器是用户访问域名系统的接入点，将用户的DNS请求转发到DNS系统中，将DNS应答发送给客户。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%9C%AC%E5%9C%B0%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8.png"></p><p>如何查看本地域名服务器(windows)</p><pre class=" language-bash"><code class="language-bash">ipconfig/all</code></pre><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><p><strong>迭代方式与递归方式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%BF%AD%E4%BB%A3%E6%96%B9%E5%BC%8F.png"></p><p>整过程中，本地域名服务器对于用户而言是服务器，而对于其他的域名服务器来说，则是客户。因此，本地域名服务器有着双重的身份，每收到进一步的信息后，本地域名服务器就会向新的服务器发出查询请求，直到最终得到结果，返回给用户。</p><hr><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%80%92%E5%BD%92%E6%96%B9%E5%BC%8F.png">在这种方式中，主机向本地的域名服务器发出DNS请求，如果在本地域名服务中有其IP地址，就做出正确的回答，如果服务器不知道该域名的IP地址，就以DNS客户的方式向其他服务器发出请求，其他域名服务器要么知道该域名的IP地址给出正确回答，要么再以客户身份发出DNS请求，重复(递归).上述过程，直到找到正确的服务器为止，将域名对应的IP地址再反向回传给开始发出DNS请求的主机。请求一级一级地传递，结果一级一级地返回。根域名服务器要负责返回结果，因此负担比较重。实践中，域名查询常采取递归方式。</p><h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><p>为了减少网络上DNS报文的数量和查询所花费的时间，DNS系统广泛使用缓存技术。在用户端操作系统通常会缓存曾经查询过的DNS域名和其对应的IP。在DNS服务器端，每当收到来自其他服务器的DNS应答时，DNS服务器就会将其缓存起来。</p><p><strong>客户端缓存</strong></p><p>在用户端操作系统通常会缓存曾经查询过的DNS域名和其对应的IP地址，当下一次要访问同一个域名时，查询缓存就可以得到结果，不必再向本地域名服务器发出请求了。</p><p>在Windows XP系统下</p><p>查看DNS缓存</p><pre class=" language-bash"><code class="language-bash">ipconfig/displaydns</code></pre><p>清空DNS缓存</p><pre class=" language-bash"><code class="language-bash">ipconfig/flushdns</code></pre><p><strong>服务器缓存</strong></p><p>在DNS服务器端，每当收到来自其他服务器的DNS应答时，DNS服务器就会将其缓存起来，当有同样的请求到来时，本地域名服务器就能直接给出应答了。但是，因为主机名和IP地址的映射关系可能会发生变化，因此DNS缓存通常会在一段时间内（通常为两天）被丢弃，这样能保证适应情况的变化而不至于做出错误的域名解析。</p><h2 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h2><p>DNS报文分为DNS<strong>请求报文</strong>和DNS<strong>应答报文</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DNS%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png"><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DNS%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87.png"></p><p><strong>常用命令</strong></p><p>查看本地域名服务器</p><pre class=" language-bash"><code class="language-bash">ipconfig/all</code></pre><p>查询域名与IP地址的对应关系</p><p> 正向解析</p><pre class=" language-bash"><code class="language-bash"><span class="token function">nslookup</span> www.163.com</code></pre><p>逆向解析</p><pre class=" language-bash"><code class="language-bash"><span class="token function">nslookup</span> -qt<span class="token operator">=</span>ptr 192.168.1.1</code></pre><h2 id="WWW"><a href="#WWW" class="headerlink" title="WWW"></a>WWW</h2><p>万维网(World Wide Web，WWW)是最广泛的网络应用，是一个大规模的、联机的信息存藏所，是Time Berners-Lee于20世纪90年代初在欧洲粒子物理实验室发明的。WWW用链接的方法能非常方便地从因特网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。</p><p>WWW的主要功能组件：HTML语言，HTTP协议，Web浏览器和Web服务器。</p><p><strong>HTML语言</strong></p><p>称为超文本标记语言（Hyper Text Markup Language ,HTML),写出来的文档称为超文本文档，俗称网页。</p><p><strong>Web浏览器和Web服务器</strong></p><p>Web服务器是运行在服务端应用的应用进程，默认的端口号是80，它接收Web浏览器的请求，向其传输网页和其他文件。</p><p>Web浏览器是运行在客户端的应用进程，用于访问Web服务器上的HTML文档，接收服务器传来的HTML文档并显示其内容。</p><p><strong>HTTP协议</strong></p><p>Web浏览器和Web服务器程序在进行数据交换，发送请求和应答时，要遵循一定的协议，这个协议就是超文本传输协议（Hyper Text Transfer Protocol, HTTP）。</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP（Hyper Text Transfer Protocol）是Web浏览器和Web服务器交互时要遵循的协议，最新版本是HTTP1.1(RFC2616)。HTTP遵循客户-服务器模式，服务器默认端口号为80。HTTP协议需要传输TCP协议支持，进行可靠数据传输。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/HTTP%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B.png"></p><ol><li>浏览器分析超链接指向页面URL</li><li>浏览器向DNS请求解析URL的IP地址</li><li>域名系统DNS解析出URL服务器的IP地址</li><li>浏览器与服务器建立TCP连接</li><li>浏览器发出取文件的命令</li><li>服务器给出响应</li><li>TCP连接释放</li><li>浏览器显示文件中的所有文本</li></ol><p><strong>HTTP的无状态特性</strong></p><p>Web服务器不去记忆客户端的访问记录，同一个客户端向Web服务器发出两个相同的请求，Web服务器会认为这是两个单独的请求，都会给予应答。</p><p><strong>HTTP的持久连接和非持久连接</strong></p><p>非持久连接：一个TCP连接只传送一个文件，文件传输完毕，连接关闭。（早期HTTP Sever采用）</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%9D%9E%E6%8C%81%E4%B9%85%E8%BF%9E%E6%8E%A5.png"></p><p>持久连接：一个TCP连接可以传送多个文件。（目前采用）</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%8C%81%E4%B9%85%E8%BF%9E%E6%8E%A5.png"></p><p><strong>解释HTTP协议中GET,POST,HEAD,PUT和DELETE的含有</strong></p><ul><li>GET</li></ul><p>当浏览器请求获取某个文档时，方法字段的值就使用GET，文档的地址由URL字段给出。当使用GET方法时，请求报文的实体主体部分为空。</p><ul><li>POST</li></ul><p>在多数情况下，浏览器是从服务器上获取数据的。单在某些情况下，浏览器也会向服务器提交网页上表单内的一些数据（如用户信息），这时方法字段的值设定为POST,实体主体中要放入提交的内容。</p><ul><li>HEAD</li></ul><p>HEAD字段与GET字段很类似。如果请求报文中方法字段的值为HEAD，那么服务也会给浏览器发送应答报文，这点同GET一样。不同的是，对GET的应答报文中会包含浏览器所请求的文档；而对HEAD的应答报文中不包含文档的内容。HEAD字段常用来进行测试和故障跟踪，用来判断某一个连接是否有效，能否被访问。</p><ul><li>PUT</li></ul><p>PUT用来将一个文档上传到Web服务器上，文档的名字和位置由URL字段指明。文档的内容存储在实体字段里。如果文档已经存在于服务器上，则服务器会覆盖旧的文档；如果文档不存在，则服务器会根据URL建立一个新文档，将实体字段的内容存入新文档。如果执行成功，则服务器会返回对应的应答报文；如果执行过程中出错（如没有写权限），则服务器会给浏览器报错。</p><ul><li>DELETE</li></ul><p>DELETE用来删除Web服务器上的文档，文档的名字和位置由URL字段指定。请求行后面是首部行，可以有多个首部行，每个首部行都有特定的含有，用来告诉服务器一些特定的信息。常用的首部有：Accept，Accept-Language，Accept-Encoding，User-Agent，Host和Connection。</p><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><p>Web浏览器和Web服务通过交换HTTP报文来实现HTTP协议，HTTP协议由两种报文，请求报文和应答报文，请求报文是浏览器发送给服务器的，指明所需文档的名字和位置。应答报文是服务器发送给浏览器的，里面包含服务器的应答和浏览器所需的文档。</p><p><strong>请求报文</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png"></p><hr><p>方法字段：</p><ul><li>GET：请求获取某个文档</li><li>POST：向服务器提交网上表单的数据</li><li>HEAD：类似GET，但其应答报文中不包含文档的具体内容</li><li>PUT：将文档上传到Web服务器上</li><li>DELETE：删除Web服务器上的文档</li><li>URL字段：指明浏览器需要文档位置与名称</li></ul><p>版本：浏览器目前使用的是HTTP协议的版本，一般为HTTP1.1。</p><p>首部字段：</p><ul><li>Accept：表示浏览器所接受的文档类型</li><li>Accept-Language：表示浏览器优先接受的语言类型</li><li>Accept-Encoding：表示浏览器能够理解的编码方式</li><li>User-Agent：告诉服务器浏览器的类型</li><li>Host：表示所访问的主机</li><li>Connection：告诉服务器在对浏览器做了应答后，是否继续保持和浏览器的连接</li></ul><p>实体：存放浏览器向服务器发送的数据。对于HTTP请求报文实体部分多数情况下为空。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E4%BE%8B%E5%AD%90.png"></p><hr><p><strong>应答报文</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png"></p><hr><p>应答报文的开始行是状态行，状态行包括三项内容，即HTTP的版本，状态码，以及解释状态码的简单短语。</p><ul><li>版本：Web服务器使用HTTP协议版本。</li></ul><p>HTTP协议使用一些特定的三位数字表明对请求应答结果称为状态码，常用状态码有200（OK），301（Moved Permanently），300（Bad Request），403(Forbidden)，404（Not Found），500（Internal Server Error）</p><ul><li>短语：对状态码的文字解释</li></ul><p>首部字段：</p><ul><li>Connection：服务器告诉浏览器，发送完文当后是关闭还是保持连接</li><li>Data：是服务器产生响应报文的时间</li><li>Server：表明服务器的类型</li><li>Last-Modified：文档的最后修改时间</li><li>Content-Length：发送文档的字节数</li><li>Contend-Type：文档的格式</li></ul><p>实体：存放服务器向浏览器返回的文件内容</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%BA%94%E7%AD%94%E6%8A%A5%E6%96%87%E4%BE%8B%E5%AD%90.png"></p><hr><h2 id="Web代理"><a href="#Web代理" class="headerlink" title="Web代理"></a>Web代理</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/Web%E4%BB%A3%E7%90%86.png"></p><p><strong>优点</strong></p><ol><li>访问速度快</li><li>可节省带宽，降低开销</li></ol><p><strong>缺点</strong></p><p>代理服务器所缓存的网页可能不是最新的</p><p><strong>解决</strong></p><p>条件GET机制</p><ul><li>服务器的应答中添加Last-Modified字段</li><li>客户端的请求中添加If-modified-since字段</li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie实际上是Web网站用来记录用户行为的一种技术，Cookie最早由Netscape公司发明。HTTP协议本身是一种无状态的协议，Web服务器不会去记录访问情况。有时候网站需要了解和记录用户访问网站的过程（如购物喜好、购物记录等）并进行一些统计。Cookie技术便用来完成这项任务。</p><p><strong>原理</strong></p><p>对于第一次访问网站的用户，服务器 的应答中添加Set-cookie，分配cookieId给用户。浏览器将用户cookieId保存在磁盘中，下次访问时，浏览器的请求报文中包含Cookie字段，告诉服务器用户的cookieId，这样服务器就能记录一些用户的访问信息。</p><p><strong>Cookie技术由四个部分组成</strong></p><ol><li>在HTTP的响应报文中有一个SetCookie的首部行</li><li>在HTTP请求报文中有一个Cookie的首部行</li><li>在用户端主机中保留一个Cookie文件，由用户的浏览器管理</li><li>在Web站点后台有一个数据库来维护用户信息</li></ol><h2 id="多点下载和断点续传"><a href="#多点下载和断点续传" class="headerlink" title="多点下载和断点续传"></a>多点下载和断点续传</h2><p>多点下载和断点续传都是利用了HTTP1.1协议所支持的部分下载功能。HTTP请求报文的Range可以指明想要下载文档的部分内容（例如Range: bytes&#x3D;0-499）,从应答报文中的Content-Length首部获取文档大小后，可以建立若干个连接，每个连接下载一部分内容，实现多点下载。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%A4%9A%E7%82%B9%E4%B8%8B%E8%BD%BD%E5%92%8C%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0.png"></p><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><p>文件传输协议（File Transfer Protocol,FTP）是专门用来传输各类文件的协议。FTP协议的历史要比HTTP协议时间长。FTP使用客户-服务器方式（与HTTP协议一样），21端口是FTP服务器的默认服务端口使用21端口等待客户端的请求，因为要保证数据正确无误，所以FTP协议在运输层上使用了TCP协议。</p><p>FTP客户端：浏览器、FlashFTP等</p><p>FTP服务器：vsftp(Linux)、IIS(Windows)</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/FTP%E5%8D%8F%E8%AE%AE%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><p>FTP协议是交互式的命令运行的。FTP客户端连接到FTP服务器后，用户输入FTP命令（如下载文件，显示服务器文件列表等），命令通过FTP客户端传递给FTP服务器，FTP服务器执行命令，并将结果返回FTP客户端，然后用户再输入下一个命令。</p><p><strong>FTP命令</strong></p><ul><li>USER:客户端向服务器发送用户名</li><li>PASS:客户端向服务器发送用户口令</li><li>LIST:列出FTP服务器当前目录下的文件和子目录</li><li>CWD:改变当前的目录</li><li>CDUP:回到上一级</li><li>PWD:显示当前所在目录</li><li>RETR:从服务器上下载文件</li><li>STOR:将本地硬盘的文件上传到FTP服务器上</li><li>DELE:删除FTP服务器上的文件。DELE命令的参数是服务器上要删除的文件名</li><li>MKD:在FTP服务器上新建目录，目录名作为MKD命令的参数</li><li>RMD:删除FTP服务器上的目录，要删除的目录名作为RMD命令的参数</li><li>PORT:用来传递数据连接的端口号</li><li>PASV:客户端通知服务器采用被动模式</li><li>HELP:帮助</li><li>QUIT:退出</li></ul><p><strong>FTP应答</strong></p><p>对于FTP客户发出的命令，FTP服务器需要给出应答，应答包括三位整数的状态码和它后面的一个文本字符串（如226 File send OK），FTP应答通过控制连接发送。</p><ul><li>150  File status okay; about to open data connection（打开数据连接）</li><li>200  Command okay  （命令成功）</li><li>220  Service ready for new user （新用户服务准备好了）</li><li>221  Service closing control connection Logged out if appropriate （服务关闭控制连接，可以退出登录）</li><li>226  Closing data connection. Requested file action successful (for example, file transfer or file abort) （关闭数据连接，请求的文件操作成功） </li><li>227  Entering Passive Mode（进入被动模式）</li><li>230  User logged in, proceed （用户登录）</li><li>331  User name okay, need password （用户名正确，需要口令）</li><li>425  Can’t open data connection （不能打开数据连接）</li><li>500  Syntax error, command unrecognized （格式错误，命令不可识别）</li></ul><h2 id="控制连接和数据连接"><a href="#控制连接和数据连接" class="headerlink" title="控制连接和数据连接"></a>控制连接和数据连接</h2><p>FTP会话种，客户端和服务器会使用两个连接：控制连接（21端口）和数据连接（20端口）。客户端主动连接服务器的21端口建立控制连接，用来传递用户命令和服务器响应，整个会话期间一直存在。数据连接只在传递数据时（如发送目录内容列表、上传文件、下载文件）临时建立，数据传递完毕后关闭数据连接。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%8E%A7%E5%88%B6%E8%BF%9E%E6%8E%A5%E5%92%8C%E6%95%B0%E6%8D%AE%E8%BF%9E%E6%8E%A5.png"></p><ol><li>FTP客户端和服务器建立控制连接，会话开始</li><li>客户端通过控制连接发送LIST命令</li><li>建立数据连接</li><li>发送文件、目录列表</li><li>关闭数据连接</li><li>客户端发出QUIT命令</li><li>控制连接关闭，会话结束</li></ol><p><strong>主动模式和被动模式</strong></p><p>传输数据前，需要建立数据连接，如果数据连接是由服务器发起的，连接客户端的，称为主动模式；如果数据连接是由客户端发起的，连接服务器的，称为被动模式。主动模式和被动模式都是向对于服务器来说的。</p><hr><p>为社么会有主动模式和被动模式？</p><ul><li>客户端防火墙问题</li><li>主动模式中，数据连接由服务器发起，可能会被客户端的防火墙拒绝；被动模式则无此问题</li></ul><p>服务器处于主动模式还是被动模式如何确定？</p><p>由客户端发出的命令确定</p><ul><li>如客户端发送Port命令（包含客户端的数据端口号），服务器会处于主动模式，从20端口发起到客户端的连接</li><li>如客户端发送PASV命令，服务器会处于被动模式，并通过控制连接将数据连接端口号（随机值）发送给客户端（回应状态码227），客户端发起和服务器的数据连接</li></ul><hr><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><p>电子邮件（Email)是Internet上广泛使用的一种应用，电子邮件是异步的，方便，快捷，还可以携带各种形式的附件。使用电子邮件有两种方式<strong>使用客户端软件</strong>和<strong>使用浏览器</strong>。</p><p><strong>系统构成</strong></p><ul><li>用户代理（邮件客户端）</li></ul><ol><li>Outlook,foxmail等</li><li>撰写、回复、转发、保存邮件</li><li>发送、接受邮件</li></ol><ul><li>电子邮件服务器</li></ul><ol><li>提供邮件服务器</li><li>向其他邮件服务器发送邮件</li><li>与邮件客户端交互</li></ol><ul><li>电子邮件协议（SMTP，POP3）</li></ul><ol><li>发送邮件：SMTP</li><li>接收邮件：POP3</li></ol><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%84%E6%88%90.png"></p><p><strong>电子邮件报文格式</strong></p><p>一个邮件报文分为首部和报文主体两部分，首部和报文主体用空行间隔开。</p><p>首部由多个首部行组成。首部有特定的格式要求，报文主体由用户自己撰写</p><p>常见首部有</p><ul><li>From:发送方</li><li>To:接收方</li><li>Cc:抄送</li><li>Bcc:暗送</li><li>Subject:邮件的主题</li><li>Data:邮件发送的时间</li></ul><h2 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h2><p>SMTP协议是专门用来发送邮件的协议，采用客户-服务器模型，使用TCP协议作为运输层协议，SMTP服务器在25号端口侦听。SMTP客户端和服务器使用命令&#x2F;应答的方式交互。</p><p><strong>SMTP命令</strong></p><p>SMTP命令由客户端发给服务器，每个命令都是一个字符串，以换行、回车符号结尾。</p><table><thead><tr><th align="center">SMTP命令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">HELO和EHLO</td><td align="center">向服务器表明客户端的身份</td></tr><tr><td align="center">MAIL FROM</td><td align="center">向服务器表明邮件的发送者</td></tr><tr><td align="center">RCPT TO</td><td align="center">向服务器表明邮件的接受者</td></tr><tr><td align="center">DATA</td><td align="center">告诉服务器下面紧接着的是邮件的内容</td></tr><tr><td align="center">REST</td><td align="center">通知终止当前的邮件传输活动</td></tr><tr><td align="center">VRFY</td><td align="center">验证服务器上是否有某个用户</td></tr></tbody></table><p><strong>SMTP应答</strong></p><p>SMTP应答是由SMTP服务器收到客户端的命令后给出的响应，向客户端表明命令执行的结果，应答由一个三位数字的状态码和后面的一些说明文本组成，状态码和说明文本之间要有一个空格</p><p><strong>常见应答</strong></p><p>200 &lt; domain &gt; Service ready</p><p>221 &lt; domain &gt;Service closing transmission channel</p><table><thead><tr><th>SMTP应答</th><th>含义</th></tr></thead><tbody><tr><td>200</td><td>Service ready （服务就绪）</td></tr><tr><td>221</td><td>Service closing transmission channel （服务关闭）</td></tr><tr><td>250</td><td>Requested mail action okay, completed （要求的邮件操作完成）</td></tr><tr><td>354</td><td>Start mail input，end with &lt; CRLF &gt;.&lt; CRLF &gt; （开始邮件输入，以”.”结束）</td></tr><tr><td>421</td><td>Service not available，closing transmission channel （服务未就绪，关闭传输信道）</td></tr><tr><td>501</td><td>Syntax error, command unrecognized （参数格式错误）</td></tr><tr><td>502</td><td>Command not implemented （命令不可实现）</td></tr></tbody></table><p><strong>SMTP工作过程</strong></p><p>SMTP要经过建立连接、传送邮件和释放连接三个阶段具体为：</p><ol><li>建立TCP连接，服务器的端口号为25</li><li>客户端向服务器发送HELLO命令以标识发件人自己的身份，然后客户端发送MAIL命令</li><li>服务器端以OK作为响应，表示准备接收</li><li>客户端发送RCPT命令</li><li>服务器端表示是否愿意为收件人接收邮件</li><li>协商结束，发送邮件，用命令DATA发送输入内容</li><li>结束发送，用QUIT命令退出</li><li>断开TCP的连接</li></ol><h2 id="SMTP协议扩展"><a href="#SMTP协议扩展" class="headerlink" title="SMTP协议扩展"></a>SMTP协议扩展</h2><p><strong>SMTP协议的局限性</strong></p><ul><li>SMTP协议限制所有邮件的首部和报文的主体只能用七比特的ASCLL码表示</li><li>每一行包括的字符数不能超过一千个（以一对换行符和回车符标识一行）</li></ul><p>SMTP协议不支持多国语言，不支持除了文本以外的附件形式</p><p><strong>SMTP协议扩展</strong></p><p>RFC 1869：规定了对SMTP协议进行扩展所要遵循的框架</p><p>RFC 2045-RFC 2049：多用途因特网邮件扩展（Multipurpose Internet Mail Extensions, MIMT）</p><p>有了MIME，邮件可以使用世界各国文字的字符集而不仅仅限于ASCLL码，同时还能传输文字以为的其他内容（如音频，图片等）。</p><p><strong>MIME</strong></p><p>MIME给出了如何描述数据中所含有的文件类型（如text&#x2F;html,img&#x2F;jpeg）。MIME给出了如何把非ASCLL码字符转换成ASCLL字符。quoted-printable编码常用于邮件正文的编码，将正文中的非ASCLL字符（如汉字）编码成ASCLL字符，base64编码适合于任意的二进制文件，多用于对字符进行编码，将附件编码成ASCLL码。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/MIME.png"></p><p><strong>常见的MIME类型</strong></p><ul><li>超文本标记语言文本 .html,.html text&#x2F;html</li><li>普通文本 .txt text&#x2F;plain</li><li>RTF文本 .rtf application&#x2F;rtf</li><li>GIF图形 .gif image&#x2F;gif</li><li>JPEG图形 .ipeg,.jpg image&#x2F;jpeg</li><li>au声音文件 .au audio&#x2F;basic</li><li>MIDI音乐文件 mid,.midi audio&#x2F;midi,audio&#x2F;x-midi</li><li>RealAudio音乐文件 .ra, .ram audio&#x2F;x-pn-realaudio</li><li>MPEG文件 .mpg,.mpeg video&#x2F;mpeg</li><li>AVI文件 .avi video&#x2F;x-msvideo</li><li>GZIP文件 .gz application&#x2F;x-gzip</li><li>TAR文件 .tar application&#x2F;x-tar</li></ul><h2 id="SMTP认证"><a href="#SMTP认证" class="headerlink" title="SMTP认证"></a>SMTP认证</h2><p>SMTP协议原本不具有认证机制，存在安全隐患</p><ul><li>任何人都可以连接邮件服务器发邮件</li><li>垃圾邮件</li></ul><p>RFC2554对SMTP协议做了扩展，给出SMTP服务器如何认证合法用户的机制和方法</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/SMTP%E8%AE%A4%E8%AF%81.png"></p><p><strong>邮件接收协议</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E9%82%AE%E4%BB%B6%E6%8E%A5%E6%94%B6%E5%8D%8F%E8%AE%AE.png"></p><h2 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h2><p>POP3（Post Office Protocol,POP3）协议是专门用来从邮件服务器上获取邮件的协议，有了POP3协议，人们能够将邮件下载到本地的硬盘中进行离线阅读和处理。与SMTP协议不同，POP3执行的是“拉”操作，是将远程服务器上的邮件下载到本地。而SMTP执行的是“推”操作，是将本地邮件发送给远端的服务器，POP3协议在RFC1939中定义。</p><p>POP3协议的工作模型为客户-服务器模型，POP3协议使用TCP协议作为运输层协议，POP3服务器的默认服务端口是110，POP3协议以命令-应答的方式工作。</p><p><strong>POP3主要命令</strong></p><table><thead><tr><th>命令名</th><th>命令格式</th><th>命令用途</th></tr></thead><tbody><tr><td>USER</td><td>USER &lt; username &gt;</td><td>系统登录需要的用户名</td></tr><tr><td>PASS</td><td>PASS &lt; password &gt;</td><td>系统登录需要的密码</td></tr><tr><td>APOP</td><td>APOP &lt; name, digest &gt;</td><td>系统登录采用经过认证的密码信息</td></tr><tr><td>STAT</td><td>STAT</td><td>返回邮箱统计信息，包括邮件数、总字节数</td></tr><tr><td>LIST</td><td>LIST &lt; message &gt;</td><td>返回指定邮件的大小</td></tr><tr><td>RETR</td><td>RETR &lt; message &gt;</td><td>返回指定邮件的内容，包括邮件头与正文</td></tr><tr><td>DELE</td><td>DELE &lt; message &gt;</td><td>为指定邮件做删除标记，在退出系统时删除指定邮件</td></tr><tr><td>RSET</td><td>RSET</td><td>撤销所有的DELE命令</td></tr><tr><td>UIDL</td><td>UIDL &lt; message &gt;</td><td>返回指定邮件的唯一标识</td></tr><tr><td>TOP</td><td>TOP &lt; message,n &gt;</td><td>返回指定邮件的内容和前n行</td></tr><tr><td>NOOP</td><td>NOOP</td><td>没有动作，只是等待服务器返回OK</td></tr><tr><td>QUIT</td><td>QUIT</td><td>退出系统登录</td></tr></tbody></table><p>POP3应答，肯定应答为 +OK ，否定应答为 -ERR。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/POP3%E5%91%BD%E4%BB%A4%E4%BA%A4%E4%BA%92.png"></p><h2 id="IMAP协议"><a href="#IMAP协议" class="headerlink" title="IMAP协议"></a>IMAP协议</h2><p>IMAP协议支持离线方式，能够将邮件下载到本地，进行离线阅读和管理，同时IMAP协议还能进行在线邮件管理，IMAP协议支持用户在邮件服务器上建立任意层次的远程文件夹，对邮件进行分类管理，同时IMAP还提供摘要浏览功能，对于有多个附件的邮件，IMAP协议允许用户只下载其中的一个附件或几个附件。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/IMAP.png"></p><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><hr><p>静态IP地址方案</p><ul><li>手工设定</li><li>容易出错，工作量大</li></ul><p>动态IP地址方案（DHCP）</p><ul><li>自动从服务端获取IP地址信息</li><li>方便，大大减轻工作量</li></ul><p><strong>动态IP地址方案优缺点</strong></p><p>优点</p><ul><li>减少管理员的工作量（不必手动更改或配置IP地址、子网掩码、DNS等）</li><li>避免IP地址冲突问题</li><li>自动更新功能</li></ul><p>缺点</p><ul><li>主机获得的IP地址不固定，对于提供网络服务的主机不适合</li><li>需要配置专门的DHCP服务器</li></ul><hr><p>动态主机配置协议（Dynamic Host Configuration Protocol，DHCP）能够自动地为网络中没有IP地址的主机分配IP地址、子网掩码等信息，不在需要手动进行配置。DHCP协议是在BOOTP（Bootstrap Protocol）协议的基础上发展起来的，在RFC 2131和RFC2132中定义。</p><p><strong>DHCP工作原理</strong></p><p>DHCP协议使用UDP作为运输层协议，DHCP服务器的端口号是67，客户端的端口号是68。DHCP服务器管理一个或多个IP地址域，每个域称为地址池。当收到客户端的请求后，就从地址池中取出一个未用的地址分配给客户端，称为出租。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DHCP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png"></p><ol><li>DHCP客户端在网络中广播DHCP Discover报文，寻找DHCP服务器</li><li>DHCP服务器从地址池中选取地址，想客户端发送DHCP Offer报文，提供IP地址，掩码等信息</li><li>DHCP客户端广播DHCP request报文，想服务器申请IP地址等信息</li><li>DHCP服务器向客户端发送DHCP Ack报文，分配IP地址等信息</li></ol><p><strong>DHCP报文</strong></p><table><thead><tr><th align="center">编号</th><th align="center">消息类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">DHCP Discover</td><td align="left">客户端广播，用来发现DHCP服务器</td></tr><tr><td align="center">02</td><td align="center">DHCP Offer</td><td align="left">服务器对DHCP Discover的响应，提供IP地址、掩码等信息</td></tr><tr><td align="center">03</td><td align="center">DHCP Request</td><td align="left">客户端向服务器发出配置请求或请求延长租期</td></tr><tr><td align="center">04</td><td align="center">DHCP Decline</td><td align="left">客户端向服务器发出，指明无效的参数信息</td></tr><tr><td align="center">05</td><td align="center">DHCP Ack</td><td align="left">DHCP服务器确认客户端配置参数</td></tr><tr><td align="center">06</td><td align="center">DHCP Nak</td><td align="left">服务器向客户端发出，通告IP地址错误或租期到期</td></tr><tr><td align="center">07</td><td align="center">DHCP Release</td><td align="left">客户端通知服务器放弃租用的IP地址</td></tr><tr><td align="center">08</td><td align="center">DHCP Inform</td><td align="left">客户端向服务器发送要求配置部分参数</td></tr></tbody></table><p><strong>DHCP报文格式</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DHCP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png"></p><p><strong>DHCP Discover报文</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DHCPDiscover%E6%8A%A5%E6%96%87.png"></p><p><strong>DHCP Offer报文</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DHCPOffer%E6%8A%A5%E6%96%87.png"></p><p><strong>DHCP Request报文</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DHCPRequest%E6%8A%A5%E6%96%87.png"></p><p><strong>DHCP Ack报文</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DHCPack%E6%8A%A5%E6%96%87.png"></p><p><strong>DHCP租期</strong></p><p>DHCP服务器分配给DHCP客户的IP地址是临时的，DHCP客户端只在一段时间内能够使用这个IP地址，这段时间称为租用期（Lease Time），租用期的大小由服务器决定，在DHCP Ack报文中给出。租期快到时，客户端需要向服务器申请续租。</p><p><strong>DHCP中继</strong></p><p>DHCP报文的广播特性要求客户端和服务器要在同一个物理网络内（广播报文不能跨越路由器），否则DHCP Discover报文将无法到达DHCP服务器。可以在路由器配置DHCP中继（DHCP Relay），DHCP中继可以跨越网络在DHCP服务器和客户端之间转发DHCP报文。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/DHCP%E4%B8%AD%E7%BB%A7.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>应用层服务名称</th><th>作用</th><th>端口</th><th>运输层协议</th></tr></thead><tbody><tr><td>超文本传输协议HTTP（Hyper Text Transfer Protocol）</td><td>HTTP是Web浏览器和Web服务器之间应用层协议，是无状态协议</td><td>80</td><td>TCP</td></tr><tr><td>文件传送协议FTP（File Transfer Protocol）</td><td>FTP提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限</td><td>21控制端口；20数据端口</td><td>TCP</td></tr><tr><td>简单文件传送协议TFTP</td><td>是一个小且易于实现的文件传送协议</td><td>69</td><td>UDP</td></tr><tr><td>简单邮件传送协议SMTP（Simple Mail Transfer Protocol）</td><td>SMTP协议发送邮件</td><td>25</td><td>TCP</td></tr><tr><td>邮件协议POP（Post Office System）</td><td>POP3协议接收邮件</td><td>110</td><td>TCP</td></tr><tr><td>域名系统DNS（Domain Name System）</td><td>把域名转换成为网络可以识别的IP地址</td><td>53</td><td>UDP</td></tr><tr><td>动态主机配置协议DHCP（Dynamic Host Configuration Protocol）</td><td>提供一种自动为工作站分配IP地址并配置IP相关信息的方法</td><td>服务器端口67；客户端68</td><td>UDP</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络体系结构</title>
      <link href="/2020/05/11/NetworkArchitecture/"/>
      <url>/2020/05/11/NetworkArchitecture/</url>
      
        <content type="html"><![CDATA[<p>计算机网络是由<strong>端系统</strong>、<strong>通信线路</strong>和<strong>交换设备</strong>组成的。计算机网络是由硬件设备和线路组成的，但仅有硬件是无法完成有效的通信的。</p><p>网络通信双方必须对通信中可能出现的各种情况进行明确的商定，遵守相同的规则，这些规则称为<strong>协议</strong>，网络中的主机、设备必须要遵循相同的协议才能完成通信，协议可以通过软件实现，也可以通过硬件来完成。硬件提供了网络通信的物理基础，网络协议才是实现有效网络通信的关键。</p><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>网络协议是网络中双方为了实现有效的通信而商定的规则。例如：人与人的语言，动物之间的语言。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE.png"></p><p>图上是网络协议，客户端和web服务器的协议执行过程如下</p><ol><li>客户端首先向服务器发出连接请求（connect request）</li><li>服务器响应连接应答（connect response）</li><li>客户发出请求GET&#x2F;HTTP1.1。“GET&#x2F;”的含义是要获取网站的主页“HTTP&#x2F;1.1”表明用的是HTTP1.1协议</li><li>服务器给出应答HTTP&#x2F;1.1 200 OK……</li></ol><p>网络协议规定了通信双方所交换消息的格式和含义以及收到消息后要采取的动作，网络协议定义了以下内容：</p><ul><li>语法：双发交换消息的格式</li><li>语义：双方交换消息的含义</li><li>时序：通信如何发起，在收到一个消息后，要采取什么样的动作，回复什么样的消息。</li></ul><h2 id="协议分层"><a href="#协议分层" class="headerlink" title="协议分层"></a>协议分层</h2><p>网络通信的复杂性，决定了网络协议的复杂性，单个协议无法解决通信中的所有问题，网络通信中需要多个协议<strong>分层</strong>是解决复杂问题的一个基本方法</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%8D%8F%E8%AE%AE%E5%88%86%E5%B1%82.png"></p><ul><li>不同主机上的同一层次称为对等层（例如主机1的第3层和主机2的第三层），对等层之间运行相同的协议（实现协议的元素称为实体，可以是软件也可以是硬件，对等层内的实体称为对等实体）。</li><li>每一层都通过协议实现具体的功能。</li><li>下层为上层提供服务，上层使用下层的服务。</li><li>层与层之间由接口来传递数据和控制信息。</li><li>协议是水平的，服务是垂直的。</li></ul><p>利用协议分层，可以将复杂的网络通信任务分解为若干个比较容易处理的子问题，降低了复杂度，易于实现和维护，每个层次都可以单独实现，只要提供的服务和实现的功能不变，与相邻层次的接口也不变，那么采用何种技术实现也是每个层次内部的事情，更有利于采用新的技术去解决问题。同时，层次明确也更有利于标准化。</p><p>优点</p><ul><li>各层之间是独立的</li><li>灵活性好</li><li>结构上可分割开</li><li>易于实现和维护</li><li>能促进标准化工作</li></ul><h2 id="数据封装和传递"><a href="#数据封装和传递" class="headerlink" title="数据封装和传递"></a>数据封装和传递</h2><p>在数据传递过程中，一个最基本的概念是数据封装。在收到数据的前面加上首部，就称为<strong>封装</strong>。首部中包含了实现协议和传递数据的一些必要信息。</p><p><strong>水平通信：对等层之间的通信</strong></p><p><strong>垂直通信：相邻层之间的通信</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85%E4%B8%8E%E5%8F%91%E9%80%81.png"></p><p>发送端层层封装，层层向下传递，直到第一层，第一层与物理链路相连，执行数据传输任务，不论高层交给第一层的是什么样的数据，第一层都将其看成0，1比特流。依据第一层的协议，第一层将0，1比特流转换为特定的电磁信号，通过物理链路传递到接受端的第一层，在接受端第一层，依照协议信号会被还原成数据，层层向上传递每上传一层，就剥去一层首部获取首部里的信息，依照协议采取相应的动作。</p><p>数据需要经过一系列的<strong>封装</strong>（发送端）和<strong>解封装</strong>（接收端）的过程才能由发送端到达接收端，发送端某一层次添加的首部，只会被接受端的对等层次读取。对等层通过交换首部内的信息来实现协议。</p><p><strong>封装</strong>：在数据的前面加上首部。首部中包含了实现协议和传递数据的一些必要信息（高层到低层）。</p><p><strong>解封装</strong>：也称去封装，就是将首部去掉（低层到高层）。</p><h2 id="服务访问点"><a href="#服务访问点" class="headerlink" title="服务访问点"></a>服务访问点</h2><p>在分层结构中，低层为高层提供服务（Service）称为服务提供者，高层使用低层服务称为服务用户，两者的信息交换是通过服务访问点(service access point , SAP)进行的。</p><p>服务访问点的一个逻辑接口，在这个接口上服务用户和服务提供者之间传递两类信息，一类是<strong>协议数据单元PDU（Protocol Data Unit）</strong>,一类是<strong>接口控制信息ICI（Interface Control Information）</strong>，这两类信息共同组成了 接口数据单元<strong>IDU（Interface Data Unit）</strong>.</p><p>第n层的PDU是第n-1层的<strong>服务数据单元SDU（Service Data Unit）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3.png"></p><h2 id="服务-协议-接口"><a href="#服务-协议-接口" class="headerlink" title="服务 协议 接口"></a>服务 协议 接口</h2><ul><li>服务：定义了该层次的功能，即该层应该做什么</li><li>接口：定义了上一层应该如何访问它，应该传递什么样的参数以及预期的结果</li><li>协议描述了如何实现该层次的功能</li></ul><p>服务是在相邻层之间的是垂直的；协议是在对等层之间的，是水平的。服务不变的前提下，对等层可以更改协议和实现，这些对于服务用户是透明的。</p><h2 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h2><p>计算机网络的各个层次即每个层次协议的集合称为计算机网络体系结构，各个层次的所有协议被称为协议栈。</p><ul><li>OSI参考模型：理论模型</li><li>TCP&#x2F;IP参考模型：因特网标准</li></ul><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p>OSI参考模型是ISO提出的网络体系结构模型，共分为<strong>七层</strong>，从上往下依次是<strong>应用层</strong>、<strong>表示层</strong>、<strong>运输层</strong>、<strong>网络层</strong>、<strong>数据链路层</strong>、<strong>物理层</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.png"></p><p><strong>1.应用层</strong></p><p>应用层直接面向用户，用来实现特定的应用（如网页浏览，文件传输，发送电子邮件等），每一种应用都对应一个协议或者多个协议。随着应用的不断增多，应用层协议也不断增多。应用层从用户那里接收数据，生成应用层报文，发送给对端的应用层。报文是应用层的传输单元。</p><p><strong>2.表示层</strong></p><p>表示层为应用层提供服务，表示层的功能包括</p><ul><li>格式转换：不同的计算机系统采用不同的编码系统，表示层要负责不同的转换工作。发送方将发送方使用的数据格式转换城公共的格式，接收发将公共的格式转换成接收方使用的数据格式。</li><li>加密和解密:在考虑传递数据的安全性时，需要在发送放对应用层数据加密，在接收方对数据解密。</li><li>压缩和解压：对于媒体数据（音频，视频）经过解压后可以减少数据的传输量，提高传输效率。</li></ul><p><strong>3.会话层</strong></p><p>会话层用来管理会话过程，包括会话的建立、维持和结束。网络里面的一次通信过程（如一次远程登录，一次文件传输）类型于人们的一次对话，称为会话。会话层要约定的内容包括：如何开始会话；双发如何交互数据，是轮流发送数据还是同时发送数据；会话中断后如何恢复；会话何时结束等。</p><p><strong>4.运输层</strong></p><p>运输层接收会话层的数据，添加首部后形成<strong>段（Segment）</strong>,段是运输层的数据传输单位。运输层负责将数据从源端发送到目的端。这里的“端”指的是信息传输的两个端点，即正在通信的两个应用进程。运输层要为两端的应用进程提供可靠的端到端的数据传服务。</p><ul><li>应用进程寻址：一台主机上运行有多个进程，运输层要提供一种编址的方法，能够区分每个应用的进程，从而将数据交给正确的应用进程。</li><li>差错控制：运输层要检测端到端数据传输中的错误，并纠正错误，为应用进程提供一条无错的数据传输通道。</li><li>流量控制：运输层还防止发送端过快的向接收端发送数据，从而造成接收端数据来不及接收而丢失的现象。</li><li>连接控制：为了提供可靠的端到端的通信，在传输数据前，运输层需要在两个端点间建立一个连接，在连接上传输数据，传输完毕时，关闭连接。</li></ul><p><strong>5.网络层</strong></p><p>网络层接收运输层的数据，在数据前面添加首部后形成<strong>分组（Packet）</strong>。分组是网络层的数据传输单位，网络层的主要功能是为分组选路，发送方和接收方之间会间隔其他的网络，网络层要为分组找到一条合适的路径，使得分组能够到达目的地。</p><p><strong>6.数据链路层</strong></p><p>数据链路层接收网络层传递下来的分组，在分组前面加上自己的首部，封装成一个<strong>帧（Frame）</strong>,帧是数据链路层的传输单位，数据链路层的任务是在同一物理网络的两个相邻结点间传输帧。</p><ul><li>成帧：封装网络分组</li><li>物理寻址：物理网络中的每个主机都有一个唯一的物理地址，在帧首部中应该包含具体的地址信息，从而保证帧发送给正确的站点</li><li>流量控制：发送方高速传输的数据将低速的接收方“淹没”</li><li>差错控制：检查帧传输中的错误，并设法纠正</li><li>访问控制：当有多个主机共享一条物理链路时，数据链路层要解决在任意时刻由哪个主机使用物理链路的问题</li></ul><p><strong>7.物理层</strong></p><p>物理层是计算机网络体系结构中的最低层，直接和物理链路打交道。数据链路层将帧交给物理层，物理层将其看成一长串的0，1比特流。物理层的任务就是将0，1比特流从物理链路的一端发送到另一端。物理层涉及如何在物理链路上传递比特流的问题（如，如何表示0，1；比特之间的间隔是多少；如何开始通信和终止通信；网络接口有多少个帧及每一帧的用途等）。</p><h2 id="TCP-x2F-IP模型"><a href="#TCP-x2F-IP模型" class="headerlink" title="TCP&#x2F;IP模型"></a>TCP&#x2F;IP模型</h2><p>TCP&#x2F;IP协议体系源自实际的连网需求。随着<strong>ARPANET</strong>的不断扩大，各种不同的网络需要和ARPANET互连互通，这时人们发现原有的网络协议无法达到这个要求，于是TCP&#x2F;IP协议应运而生，随之就有了TCP&#x2F;IP模型。TCP&#x2F;IP模型共分为<strong>四层</strong>，从上到下分别是<strong>应用层</strong>、<strong>运输层</strong>、<strong>互联网层</strong>、<strong>网络接口层</strong>。</p><p><strong>1.应用层</strong></p><p>TCP&#x2F;IP模型的应用层和OSI参考模型的应用层类似，包含的应用层协议有<strong>文件传输协议（File Transfer Protocol,FTP)、简单邮件传输协议（Simple Mail Transfer Protocol,SMTP）、邮局第三版协议（Post Office Protocol 3，POP3）、超文本传输协议（Hyper Text Transfer Protocol,HTTP）</strong>等。FTP协议能够在两台机器之间传输文件，SMTP协议用来发送电子邮件，POP3用来接收电子邮件，HTTP协议用来访问web网站。TCP&#x2F;IP模型中没有表示层和会话层，具体的连网实践证明会话层和表示层对于多数的应用程序没有用处。</p><p><strong>2.运输层</strong></p><p>TCP&#x2F;IP模型的运输层同样也提供端到端的通信服务。TCP&#x2F;IP体系的运输层里包含两个协议：TCP协议和UDP协议。</p><p> <strong>TCP</strong>协议提供可靠的端到端通信，可以保证接收方收到的数据与发送方发送的数据完全相同，能够保证数据不丢失、无差错，同时还有流量控制和拥塞控制的功能。所以TCP&#x2F;IP协议比较复杂，能够为要求可靠性的应用层协议提供服务，如文件传输、邮件收发。</p><p><strong>UDP</strong>协议不能保证数据不丢失、无差错，也不能保证接收方收到数据的顺序和发送方发送的顺序是一样的。UDP协议比较简单，但效率比较高，能对可靠性要求不高，对实时性要求比较高的应用提供服务，如传输音频和视频。</p><p><strong>3.互联网层</strong></p><p>互联网层相当于OSI参考模型中的网络层，它负责将运输层交给他的数据送到目的地，中间可能会有跨越多个网络，互联网层要为数据找到一条正确的路。互联网层是整个TCP&#x2F;IP协议体系的关键部分，主要的协议是IP协议。正是有了IP协议，才实现了多个不同网络的互连。IP协议提供的是无连接的数据服务，数据报服务的特点决定了IP协议是不可靠的，交给IP协议发送的数据可能会丢失、乱序和出错，但IP协议不负责去解决这些问题，IP协议只会尽自己最大的努力将数据送到目的地，但它不保证可靠性。数据传输的可靠性由TCP协议来提供。</p><p><strong>4.网络接口层</strong></p><p>网络接口层相当于OSI参考模型中的数据链路层和物理层。TCP&#x2F;IP模型没有明确描述网络接口层，只是指出主机要使用某种协议与具体的网络连接，能够传递IP数据报。</p><h2 id="OSI参考模型与TCP-x2F-IP模型的比较"><a href="#OSI参考模型与TCP-x2F-IP模型的比较" class="headerlink" title="OSI参考模型与TCP&#x2F;IP模型的比较"></a>OSI参考模型与TCP&#x2F;IP模型的比较</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83.png"></p><hr><table><thead><tr><th align="left"></th><th align="center">OSI</th><th align="center">TCP&#x2F;IP</th></tr></thead><tbody><tr><td align="left">层数</td><td align="center">七</td><td align="center">四</td></tr><tr><td align="left">应用层</td><td align="center">有</td><td align="center">有</td></tr><tr><td align="left">表示层</td><td align="center">有</td><td align="center">无，功能包含在应用层</td></tr><tr><td align="left">会话层</td><td align="center">有</td><td align="center">无，功能包含在应用层</td></tr><tr><td align="left">运输层</td><td align="center">只提供面向连接的可靠的数据传输服务</td><td align="center">提供两类服务：面向连接的可靠的数据传输服务，无连接的不可靠的数据传输服务</td></tr><tr><td align="left">网络层</td><td align="center">提供无连接和面连接的两种服务</td><td align="center">只提供无连接的数据报服务</td></tr><tr><td align="left">数据链路层</td><td align="center">有</td><td align="center">功能包含在网络接口层</td></tr><tr><td align="left">物理层</td><td align="center">有</td><td align="center">功能包含在网络接口层</td></tr><tr><td align="left">市场应用</td><td align="center">理论模型，无市场应用</td><td align="center">网络互连的事实标准</td></tr></tbody></table><p>OSI参考模型是由ISO提出来的，具体浓厚的通信背景，强调服务质量，强调对差错的控制。它先定义了一套完整的框架，然后才在这个框架内发展相应的协议。TCP&#x2F;IP协议则不同，它产生于因特网的联网需求，是先有了具体协议的基础上，进一步完善其框架体系，从而也更适合计算机网络的特点。</p><h2 id="数据在网络中的传递过程"><a href="#数据在网络中的传递过程" class="headerlink" title="数据在网络中的传递过程"></a>数据在网络中的传递过程</h2><p><img src="https://cdn.jsdelivr.net/gh/unluckynike/blogimg/images/%E6%95%B0%E6%8D%AE%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B.png"></p><p><strong>发送端主机</strong></p><p>用户再终端生成数据，数据交给应用层封装为应用层报文。应用层报文向下传递，交给运输层封装，生成报文段；报文段交给网络层封装为分组、分组交给数据链路层，链路层添加首部和尾部，封装为帧。帧交给物理层，物理层将帧看做比特流，通过链路发送出去。</p><p><strong>转发设备（路由器）</strong></p><p>数据帧到达路由器，进入路由器接口，数据链路层去掉帧的首部和首部和尾部，将器封装的分组交给网络层，网络层根据分组首部中的地址信息，为分组选路，确定转发接口。分组从转发接口发出时，会再次被封装为新的帧转发给下一站。下一站路由器进行类似的操作，直到分组被转发到目的地。</p><p><strong>目的主机</strong></p><p>封装分组的数据帧到达目的主机后，从数据链路层依次往上传递，经过网络层、运输层、应用层，每层上传时都丢掉自己的首部，将封装的内容上传，最后数据交给用户。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2020/05/06/FactoryPattern/"/>
      <url>/2020/05/06/FactoryPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>工厂模式分三种  The Simple Factory（简单工厂）、The Factory Method （工厂方法）The Abstract Factory（抽象工厂）</p><p>这里说明一点，简单工厂其实不是一个设计模式，反而比较像是一种编程习惯。</p><p>《Head first》</p><p>The Factory Method Pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate, Factory Method lets a class defer instantiation to subclasses.</p><p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个，工厂方法让类把实例化推迟到子 类。</p><p>The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete class.</p><p>抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo指令</title>
      <link href="/2020/05/05/hexoCode/"/>
      <url>/2020/05/05/hexoCode/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><ul><li>clean     Remove generated files and cache.</li><li>config    Get or set configurations.</li><li>deploy    Deploy your website.</li><li>generate  Generate static files.</li><li>help      Get help on a command.</li><li>init      Create a new Hexo folder.</li><li>list      List the information of the site</li><li>migrate   Migrate your site from other system to Hexo.</li><li>new       Create a new post.</li><li>publish   Moves a draft post from _drafts to _posts folder.</li><li>render    Render files with renderer plugins.</li><li>server    Start the server.</li><li>version   Display version information.</li></ul><h3 id="Global-Options"><a href="#Global-Options" class="headerlink" title="Global Options"></a>Global Options</h3><ul><li>–config  Specify config file instead of using _config.yml</li><li>–cwd     Specify the CWD</li><li>–debug   Display all verbose messages in the terminal</li><li>–draft   Display draft posts</li><li>–safe    Disable all plugins and scripts</li><li>–silent  Hide output on console</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2020/05/05/SingletonPattern/"/>
      <url>/2020/05/05/SingletonPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The Singleton Pattern ensure a class has only one instance, and provides a global point of access to it.</p><p>确保一个类只有一个实例，并提供一个全局访问点</p><p>属于创建型模式，提供了一种创建对象的最佳方式，涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建，这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p>注意</p><ul><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这个一实例</li><li>getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>当您想控制实例数目，节省系统资源的时候。</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>Singleton:单例</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/Singleton.png"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ul><li>一个班级只有一个班主任</li><li>Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行</li><li>打印池在操作系统中,打印池Print Soo是)一个用于管理打印任务的应用程序,通过打印他用户可以删除、中止或者改变打印任务的优先级，在一 一个系统中只允许运行一个打印池对象, 如果重复创建打印池则抛出异常。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>实例以上述打印池为例</p><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/Print.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintSpooler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> PrintSpooler printspooler<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">PrintSpooler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrintSpooler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PrintSpooler <span class="token function">getPrintSpooler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> PrintSpoolerException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>printspooler<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新建了一个打印池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            printspooler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PrintSpooler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PrintSpoolerException</span><span class="token punctuation">(</span><span class="token string">"正在打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> printspooler<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"刪除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintSpoolerException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PrintSpoolerException</span><span class="token punctuation">(</span>String erro<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>erro<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       PrintSpooler p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p1<span class="token operator">=</span>PrintSpooler<span class="token punctuation">.</span><span class="token function">getPrintSpooler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrintSpoolerException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p2<span class="token operator">=</span>PrintSpooler<span class="token punctuation">.</span><span class="token function">getPrintSpooler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrintSpoolerException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//e.printStackTrace();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"警告，重复创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre><code>新建了一个打印池正在打印警告，重复创建</code></pre><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><h4 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h4><p>懒汉式其实是一种比较形象的称谓。既然懒，那么在创建对象实例的时候就不着急。会一直等到马上要使用对象实例的时候才会创建，懒人嘛，总是推脱不开的时候才会真正去执行工作，因此在装载对象的时候不创建对象实例。</p><p>下方代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h4><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p><p>下方代码虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h4><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance &#x3D;&#x3D; null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//Single Checked</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//Double Checked</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance <span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>JVM流程</p><ol><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）。</li></ol><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p><p>将 instance 变量声明成 volatile 就可可以了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明成 volatile</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                           instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。</p><h4 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h4><p>饿汉式其实是一种比较形象的称谓。既然饿，那么在创建对象实例的时候就比较着急，饿了嘛，于是在装载类的时候就创建对象实例。这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p><p>缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//类加载时就初始化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h4><p>可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> EasySingleton<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    INSTANCE<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）倾向于使用静态内部类。如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）</li><li>避免对资源的多重占用（比如写文件操作）</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之适配器模式</title>
      <link href="/2020/05/02/AdapterPattern/"/>
      <url>/2020/05/02/AdapterPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The Adapter Pattern converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</p><p>将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p><p>适配器模式常见的有三种，思想都是一样的，只不过要适配的内容不一样而已。</p><ol><li>类适配器模式</li><li>对象适配器模式</li><li>接口适配器模式</li></ol><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>重复使用现有的类，而此类的接口不符合系统的需求。在遗留代码复用、类库迁移等方面非常有用。</li><li>想要建立一个可以重用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li><li>使用第三方组件或中间组件，组件接口定义喝自己定义的不同，不希望修改自己的接口，单是要使用第三方接口的功能，避免重复造轮子。</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>Target(目标抽象类)：目标抽象类定义客户所需的接口，可以是一个抽象类或接口，也可以是具体类。在类适配器中，由于C#语言不支持多重继承，所以它只能是接口。</li><li>Adapter(适配器类)：它可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配。它是适配器模式的核心。</li><li>Adaptee(适配者类)：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类包好了客户希望的业务方法。</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/AdaterPattern.png"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ul><li>美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。</li><li>在 LINUX 上运行 WINDOWS 程序。</li><li>笔记本电脑拓展屏幕使用装接线将电脑与另一个屏幕相连才可以使用。</li><li>JAVA 中的 jdbc，两者本来无联系，通过使用Driver便可访问数据库。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以电器转接头为例子实现代码实现</p><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><h5 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h5><p><img src="/Adapter_1.png"></p><p>类图上可看出就是把一个类包装成另外一个类</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//目标方法：原本5V电压 现在要输出220V</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TargetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AdapteeOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自己是5V，要输出220V</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TargetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未适配，5V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配后："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">AdapteeOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>     Adapter adapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     adapter<span class="token punctuation">.</span><span class="token function">TargetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><pre class=" language-java"><code class="language-java">未适配，5V适配后：220V</code></pre><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><h5 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h5><p><img src="/Adapter_2.png"></p><p>区别在于Adapter类中，在里面要创建一个Adaptee，不需要继承，对象调用。</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//目标方法：原本5V电压 现在要输出220V</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TargetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">AdapteeOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自己是5V，要输出220V</span>    <span class="token keyword">private</span> Adaptee adaptee<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Adapter</span><span class="token punctuation">(</span>Adaptee adaptee<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee<span class="token operator">=</span>adaptee<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TargetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未适配，5V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配后："</span><span class="token operator">+</span>adaptee<span class="token punctuation">.</span><span class="token function">AdapteeOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>     Adapter adapter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Adaptee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     adapter<span class="token punctuation">.</span><span class="token function">TargetOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><pre><code>未适配，5V适配后：220V</code></pre><h4 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h4><h5 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h5><p><img src="/Adapter_3.png"></p><p>核心是抽象类实现了Target接口。Target接口提供了大量的方法，但是我们适配的时候不想要适配这么多，只想要适配其中一个或者几种。于是创建Concrete5V和Concrete220Vand5V重写想要适配的方法.</p><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output360V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出5V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出220V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output360V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出360V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Concrete5V</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Concrete220Vand5V</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Clinet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        AbstractAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Concrete5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adapter<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractAdapter adapter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Concrete220Vand5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adapter2<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adapter2<span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><pre><code>输出5V输出5V输出220V</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="类适配器-1"><a href="#类适配器-1" class="headerlink" title="类适配器"></a>类适配器</h4><ul><li>由于适配器类是适配者类的子类，因此可以在适配器中置换一些适配者的方法，使得适配器的灵活性更强</li></ul><h4 id="对象适配器-1"><a href="#对象适配器-1" class="headerlink" title="对象适配器"></a>对象适配器</h4><ul><li>把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者和他的子类适配到目标接口</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>实现适配器所需要的工作和目标接口的大小成正比，接口越复杂适配器越复杂</p><h4 id="类适配器-2"><a href="#类适配器-2" class="headerlink" title="类适配器"></a>类适配器</h4><ul><li>对于不能多继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为接口，不能为类，其使用有一定的局限性，不能将一个适配者类和其他的子类同时适配到目标接口</li></ul><h4 id="对象适配器-2"><a href="#对象适配器-2" class="headerlink" title="对象适配器"></a>对象适配器</h4><ul><li>与类适配器模式相比，想要置换适配者类的方法不容易</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之状态模式</title>
      <link href="/2020/04/30/StatePattern/"/>
      <url>/2020/04/30/StatePattern/</url>
      
        <content type="html"><![CDATA[<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The State Pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.</p><p>状态模式允许对象在内部状态改变时改变它的行为，对象看起来像修改它的类。状态模式主要解决的是控制一个对象转换的条件表达式过于复杂的情况，把状态的判断逻辑控制转移导表现不同状态的一系列类当中。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>一个对象的行为取决于它的状态,并且它必须在运行时刻根据状态改变它的行为。</li><li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。</p><ul><li>Context：环境角色，定义客户端所感兴趣的接口，并且保留一个具体状态类的实例。这个具体状态类的实例给出此环境对象的现有状态。</li><li>State：抽象状态角色，定义一个接口，用以封装环境对象的一个特定的状态所对应的行为。</li><li>ConcreteState：每一个具体状态类都实现了环境的一个状态所对应的i行为。</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/StatePattern.png"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ul><li>酒店宾馆的房间有入住状态，预定状态，空闲状态。</li><li>电梯主要有4种状态：电梯门关闭、电梯门打开、电梯上下运载、电梯停止。电梯在门打开的时候，只能是关闭电梯门，不能是其他的任何操作。</li><li>红绿灯分为红灯、黄灯、绿灯三种状态。</li><li>网上购物时，订单的状态有下单，已付款，已发货，送货中，已收货等状态。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以上述酒店为例子来实现</p><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/Room.png"></p><h4 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Room</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> State s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>State state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> state<span class="token punctuation">;</span>        state<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="FreeRoom"><a href="#FreeRoom" class="headerlink" title="FreeRoom"></a>FreeRoom</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FreeRomm</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空房，可以预定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="BookedRoom"><a href="#BookedRoom" class="headerlink" title="BookedRoom"></a>BookedRoom</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookedRoom</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房间已经被预订"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="CheckedRoom"><a href="#CheckedRoom" class="headerlink" title="CheckedRoom"></a>CheckedRoom</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckedRoom</span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房间有人入住"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Client测试"><a href="#Client测试" class="headerlink" title="Client测试"></a>Client测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Room room <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        room<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreeRomm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        room<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BookedRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        room<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CheckedRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre class=" language-java"><code class="language-java">状态空房，可以预定状态房间已经被预订状态房间有人入住</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>状态模式将与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足“单一职责原则”。</li><li>减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态转换变得更加明确，且减少对象间的相互依赖。</li><li>有利于程序的扩展。通过定义新的子类很容易地增加新的状态和转换。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>状态模式的使用必然会增加系统的类与对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2020/04/28/Git/"/>
      <url>/2020/04/28/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>Git是目前世界上最先进的分布式版本控制系统，在处理各种项目时都十分高效，而且非常的高大上。</p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。而且集中式版本控制系统是必须联网才能工作。</p><p>Git是分布式版本控制系统，它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。</p><p>Git关心的是：文件整体是否发生变化，而SVN关心的是：文件内容的具体差异。</p><p>SVN每次提交记录的是：哪些文件进行了修改，以及修改了哪些行的哪些内容</p><h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><h3 id="配置账户"><a href="#配置账户" class="headerlink" title="配置账户"></a>配置账户</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span></code></pre><p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git&#x2F;config 文件里。</p><h3 id="查看账户"><a href="#查看账户" class="headerlink" title="查看账户"></a>查看账户</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config user.name$ <span class="token function">git</span> config user.email</code></pre><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><pre class=" language-bash"><code class="language-bash"> ssh-keygen -t rsa -C <span class="token string">"email@example.com"</span></code></pre><ul><li><p>-t &#x3D; 密钥的类型(The type of the key to generate) ，这里参数值是 rsa</p></li><li><p>-C &#x3D; 用于识别这个密钥的注释 ，可以是任何内容(comment to identify the key)</p></li></ul><p>id_rsa（私钥）和id_rsa.pub（公钥）默认路径为：&#x2F;c&#x2F;Users&#x2F;iskyl&#x2F;.ssh&#x2F;</p><p>将id_rsa.pub内容同步到github的SSH keys中(github中可以新建多个SSH keys)</p><h4 id="查看公钥链接"><a href="#查看公钥链接" class="headerlink" title="查看公钥链接"></a>查看公钥链接</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>注意“T”大写,连接成功，会生成known_hosts文件(.ssh文件夹下)，并且将github.com连接的ip，通信公钥等内容加入到文件中。作为信任列表。</p><p><img src="/SSH.png"></p><h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><p>检查自己的配置信息</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --list</code></pre><p>查看git版本</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> --version</code></pre><p>注意”-“</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="四个组成部分"><a href="#四个组成部分" class="headerlink" title="四个组成部分"></a>四个组成部分</h3><p><img src="/GitStructure.png"></p><ul><li><p>Working Directory:工作区，即本地电脑能看到的目录</p></li><li><p>Stage(Index):暂存区，一般放在”.git目录下的“文件，暂存区有时也叫做索引（Index）</p></li><li><p>Repository:本地历史仓库</p></li><li><p>Remote:远程仓库,github或者gitee</p></li></ul><p>工作区有一个隐藏目录.git,这是git的版本库不算工作区</p><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p>依据于是否已经加入版本控制</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> status </code></pre><ul><li>Tracked:已跟踪</li><li>Untracked:未跟踪</li></ul><p>例</p><ol><li>新建一个文件则处于Untracked状态</li><li>git add进入缓存文件处于Tracked状态并且是Staged暂存状态</li><li>git commit暂存区到Repository本地仓库文件处于Unmodified未修改状态</li><li>再次编写此文件则文件又变成Modified修改状态</li></ol><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><p>每次commit时仓库的数据结构分为四个对象</p><ul><li>blob对象：存放文件数据； </li><li>tree对象：目录，内容为blob对象的指针或其他tree对象的指针</li><li>commit对象：快照，包含指向前一次提交对象的指针，commit相关的信<br>  通过索引找到文件快照。</li><li>tag对象：一种特殊的commit对象，一般对某次重要的commit加TAG，以示重要(方便找)</li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>初始化仓库：<code>git init</code></li><li>把文件添加到仓库：<code>git add a.txt</code>添加到暂存区（state）</li><li>把文件提交到仓库：<code>git commit -m &#39;注释信息&#39;</code></li><li>仓库状态：<code>git status</code></li><li>查看修改内容：<code>git diff</code></li><li>显示最近到最有远的提交日志：<code>git log</code> （<code>git log --pretty=oneline</code>）</li><li>克隆到本地：<code>git clone</code></li><li>添加到缓存：<code>git add</code></li></ul><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ul><li><code>git reset --hard HEAD^</code> 回退到上一版本</li><li><code>git reset --hard HEAD^</code> 回退到上上版本</li><li><code>git reset --hard HEAD~100</code> 回退到上100个版本</li><li><code>git reset --hard 具体版本号</code> 回退到具体版本号</li></ul><p>记录每一次命令 ：<code>git reflog</code></p><p><code>git checkout -- readme.txt</code>：</p><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除文件后，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm filename</code> 删掉，并且<code>git commit</code></p><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本： <code>git checkout -- filename</code></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ul><li><code>git remote add origin 远程仓库地址</code> ：关联远程仓库</li><li><code>git remote rm origin</code> ：删除关联</li><li><code>git push origin master</code>: 推送 （第一次 加上-u 就会一直关联这个地址，就不需要再写origin master）</li><li><code>git pull origin master --allow-unrelated-histories</code>：如果本地仓库和远程库有冲突，比如GitHub上有markdown文件，则加上 –allow-unrelatered..</li><li><code>git clone git@github.com:rottengeek/test.git</code>：克隆远程库到本地</li></ul><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li><code>git branch 分支名</code>：创建分支</li><li><code>git checkout 分支名</code>：切换分支</li><li><code>git checkout -b 分支名</code> ：创建与切换同时进行</li><li><code>git branch</code>：列出所有分支</li><li><code>git merge dev</code>：把dev分支的工作成果合并到master分支上</li><li><code>git branch -d 分支名</code> : 删除分支</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vector</title>
      <link href="/2020/04/27/Vector/"/>
      <url>/2020/04/27/Vector/</url>
      
        <content type="html"><![CDATA[<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>Vector类实现了可扩展的对象数组。  像数组一样，它包含可以使用整数索引访问的组件。 但是， Vector的大小可以根据需要增长或缩小，以适应在创建Vector之后添加和删除项目。</p><h3 id="与List区别"><a href="#与List区别" class="headerlink" title="与List区别"></a>与List区别</h3><p>Vector 类实现了一个动态数组。和 ArrayList 很相似，但是两者是不同，vector为存储的对象分配一块连续的地址空间，因此对vector中的元素随机访问效率很高。在vecotor中插入或者删除某个元素，需要将现有元素进行复制，移动。对于简单的小对象，vector的效率优于list。vector在每次扩张容量的时候，将容量扩展2倍，这样对于小对象来说，效率是很高的。list中的对象是离散存储的，随机访问某个元素需要遍历list。在list中插入元素，尤其是在首尾插入元素，效率很高，只需要改变元素的指针。</p><ul><li>Vector 是同步访问</li><li>Vector 包含了许多传统的方法，这些方法不属于集合框架</li><li>Verctor 适用于对象数量变化少，简单的对象并且随机访问元素频繁</li><li>List 适用于对象数量变化打，对象复杂并且插入和删除频繁</li><li>Vector 主要用在事先不知道数组的大小，或者只是需要一个可以改变大小的数组的情况。</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>Verctor类支持四种构造方法</p><ol><li>Vector()   构造一个空间向量，使其内部数据数组的大小为10，标准容量增量为零</li><li>Vector (Collection&lt;? extends E&gt; c) 构造一个包含指定集合元素的向量，按照集合的迭代器返回顺序</li><li>Vector(int initialCapacity) 构造具有指定初始容量并且其容量增量等于零的空向量</li><li>Vector(int initialCapacity，int capacityIncrement) 构造具有指定的初始容量和容量增量的空向量</li></ol><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>int capacity() 返回此向量的当前容量</li><li>int setSize(int newSize)设置此向量的大小</li><li>int size()返回此向量中的组件数</li><li>void sort(Comparator<? super E ?> c )使用提供的Comparatory对此列表进行排序以比较元素</li><li>Spliterator<E> spliterator() 在此列表中的元素上创建late-binding和故障切换Spliterator</li><li>Object clone() 返回此向量的克隆</li><li>void ensureCapacity(int minCapacity) 如果需要，增加此向量的容量，以确保他可以至少保存最小容量参数指定的组件数</li><li>Object[] toArry()以正确的顺序返回一个包含此Vector中所有元素的数组</li><li>String toString()返回此Vector的字符串表示形式，其中包含每个元素的String表示形式</li><li>void trimToSize()修改该向量的容量成为向量当前大小</li></ul><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ul><li>boolean add(E e) 讲指定的元素追加到此Vector的末尾</li><li>void add(int index,E element) 在此Vector中的指定位置插入指定元素</li><li>boolean addAll(Collection &lt;? extends E&gt; c) 将指定集合中的所有元素追加到该向量的末尾，按照它们由指定集合的迭代器返回的顺序</li><li>boolean addAll(int index,Collection&lt;? extends E&gt; c) 将指定集合中的所有元素插入到此向量的指定位置</li><li>void addElement(E obj) 将指定的组件添加到此向量的末尾，将其大小增加1</li><li>void insertElementAt(E obj,int index)在指定的index插入指定对象作为该向量的一个index</li></ul><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ul><li>void clear() 从此Vector中删除所有元素</li><li>E remove(int index) 删除此向量中指定位置的元素</li><li>boolean remove(Object o)删除此向量中指定元素的第一次出现如果Vector不包含元素，则它不会 更改</li><li>boolean removeAll(Collection&lt;?&gt; c)从此Vector中删除指定集合中包含的所有元素</li><li>void removeAllElements()从该向量中删除所有组件，并将其大小设置为零</li><li>boolean removeElement(Object obj)从此向量中删除参数的第一个（最低索引）出现次数</li><li>void removeElementt(int index)删除指定索引初的组件</li><li>boolean removeIf(Predicate&lt;?super&gt; E filter)删除满足给定谓词的此集合的所有元素</li><li>Protected void removeRange(int fromIndex,int toIndex)从此列表中删除所有索引文fromIndex(含)和tiIndex之间的元素</li></ul><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><ul><li>void replaceAll(UnaryOperator<E> operator)该列表的每个元素替换为将该运算符应用于该元素的结果</li><li>boolean retainAll(Collection&lt;?&gt; c) 仅保留此向量中包含在指定集合的元素</li><li>E set(int index,E element) 用指定的元素替换此Vector中指定位置的元素</li><li>void setElementAt(E obj,E element)设置在指定的组件，index此向量的要指定的对象</li></ul><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><ul><li>boolean contains(Object o) 如果此向量包含指定的元素，则返回true</li><li>boolean contains (Collection&lt;?&gt; c) 如果此向量包含指定集合中所有的元素，则返回ture</li><li>copyInto(Object[]  anarray) 将此向量的组件复制到指定的数组中</li><li>E elementAt(int index) 返回指定索引处的组件</li><li>Enumeratin<E> element()返回此向量的组件的枚举</li><li>boolean equals(Object o)将指定的对象与此向量进行比较以获得相等性</li><li>E firstElement()返回此向量的第一个组件即索引号为0的项目</li><li>void forEach(Consumer&lt;?super E&gt; action) 对Iterable的每个元素执行给定的操作，直到所有元素都被处理或者动作引发异常</li><li>E get(int index) 返回此向量中指定位置的元素</li><li>int hashCode()返回此Vector的哈希码值</li><li>int indexOf(Object o) 返回此向量中指定元素的第一次出现的索引，如果此向量不包含元素，则返回-1</li><li>int indexOf(Object o,int index)返回此向量中指定元素的第一次出现的索引，从index向前index,如果未找到该元素，则返回-1</li><li>int lastIndexOf(Object o)返回此向量中指定元素的最后异常出现的索引，如果此向量不包含元素，则返回-1</li><li>int lastIndexOf(Object o,int index)返回此向量中指定元素最后异常出现的索引，从index,如果未找到元素，则返回-1</li><li>Iterator<E> iterator()以正确的顺序返回该列表中的元素的迭代器</li><li>boolean isEmpty() 测试此矢量是否没有组件</li><li>E lastElement()返回向量的最后一个组件</li><li>List<E>  subList(int formIndex,int toIndex)返回此列表之间的formIndex（包含）和toIndex之间的独占视图</li></ul><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Vector<span class="token operator">&lt;</span>String<span class="token operator">></span> vector<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"徐庶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"曹仁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"吕蒙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周瑜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Ⅰ</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String v<span class="token operator">:</span>vector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Ⅱ</span>    vector<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Ⅲ</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vector<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Ⅳ</span>    Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator<span class="token operator">=</span>vector<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String string<span class="token operator">=</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Ⅴ</span>    Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> enumeration<span class="token operator">=</span>vector<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>enumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>enumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><pre class=" language-bash"><code class="language-bash">徐庶 曹仁 吕蒙 周瑜 <span class="token punctuation">[</span>徐庶, 曹仁, 吕蒙, 周瑜<span class="token punctuation">]</span> <span class="token punctuation">[</span>徐庶, 曹仁, 吕蒙, 周瑜<span class="token punctuation">]</span> <span class="token punctuation">[</span>徐庶, 曹仁, 吕蒙, 周瑜<span class="token punctuation">]</span> <span class="token punctuation">[</span>徐庶, 曹仁, 吕蒙, 周瑜<span class="token punctuation">]</span> 徐庶 曹仁 吕蒙 周瑜 徐庶 曹仁 吕蒙 周瑜 徐庶 曹仁 吕蒙 周瑜 </code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之外观模式</title>
      <link href="/2020/04/24/FacadePattern/"/>
      <url>/2020/04/24/FacadePattern/</url>
      
        <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The Facade Pattern provides a unified interface to a set of interfaces in subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</p><p>外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。外观模式实现了最少知识原则（Least Knowledge principle）,这个原则希望不要让太多的类耦合在一起，对用户来说只和一个外观类打交道了，达到客户和一群子系统的解耦。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>为复杂的模块或子系统提供外界访问的模块</li><li>子系统相互独立</li><li>在层析结构中，可以使用外观模式定义系统的每一层的入口。</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>Facade: 外观角色，在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。</li><li>SubSystem: 子系统角色，在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/FacadePattern.png"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ul><li>每个Computer都有CPU、Memory、Disk。在Computer开启和关闭的时候，相应的部件也会开启和关闭</li><li>保安系统的灯、录像机、警报器、遥感器等、操作人员需要将这些仪器启动或者关闭</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以上面保安系统为例子使用外观模式来操作这个保安系统</p><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/SecuritySystem.png"></p><h4 id="SecuritySystem"><a href="#SecuritySystem" class="headerlink" title="SecuritySystem"></a>SecuritySystem</h4><p>这是外观角色，客户操作便是它。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecuritySystem</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> VCRA va <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VCRA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> VCRB vb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VCRB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> LampA la <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LampA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> LampB lb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LampB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> LampC lc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LampC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Annunciator a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Annunciator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> RemoteControl r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        va<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vb<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        la<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lb<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lc<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        va<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vb<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        la<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lb<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lc<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Lamp"><a href="#Lamp" class="headerlink" title="Lamp"></a>Lamp</h4><p>实现三个灯</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//第一个灯</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LampA</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开电灯A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭电灯A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个灯</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LampB</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开电灯B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭电灯B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三个灯</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LampC</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开电灯C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭电灯C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="VCR"><a href="#VCR" class="headerlink" title="VCR"></a>VCR</h4><p>实现两个录像机</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个录像机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VCRA</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开录像机A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭录像机A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个录像机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VCRB</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开录像机B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭录像机B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Annunciator"><a href="#Annunciator" class="headerlink" title="Annunciator"></a>Annunciator</h4><p>警报器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Annunciator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开报警器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭报警器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="RemoteControl"><a href="#RemoteControl" class="headerlink" title="RemoteControl"></a>RemoteControl</h4><p>遥控器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteControl</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开遥控器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭遥控器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>测试类实现一下看看效果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>       SecuritySystem securitySystem<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SecuritySystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       securitySystem<span class="token punctuation">.</span><span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       securitySystem<span class="token punctuation">.</span><span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre><code>打开录像机A打开录像机B打开电灯A打开电灯B打开电灯C打开报警器打开遥控器**********关闭录像机A关闭录像机B关闭电灯A关闭电灯B关闭电灯C关闭报警器关闭遥控器</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</p></li><li><p>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</p></li><li><p>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不能很好地限制客户使用子系统类。</li><li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之装饰者模式</title>
      <link href="/2020/04/22/DecoratorPattern/"/>
      <url>/2020/04/22/DecoratorPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p><p>装饰者模式，动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>需要扩展一个类的功能， 或给一个类增加附加功能；</li><li>需要动态地给一个对象增加功能， 这些功能可以再动态地撤销</li><li>需要为一批的兄弟类进行改装或加装功能</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>Component：抽象角色，给出一个个抽象接口，以规范准备接收附加责任的对象，是被装饰类和装饰类的父接口</li><li>Concrete Compont：具体角色，定义一个要接受附加责任的类，即被装饰的类</li><li>Decorator: 装饰角色，装饰者，持有一个Component（抽象角色）对象的引用，并定义一个与抽象角色接口一直的接口</li><li>Concrete Decorator: 具体装饰角色，具体装饰者，负责给抽象角色附加责任即扩展功能</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/DecoratorPattern.png"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ul><li><p>我们吃面，我们肚子很饿，吃一碗不够，我们还想加蛋，加青菜，加…但是最后出货也都是面条，就算是鸡蛋面，青菜面最后也都是面。这就是装饰者模式在不改变原有对象的基础之上，将功能附加到对象上。</p></li><li><p>某人要出门约会，你肯定是要决定好你要穿什么样的衣服出门，用衣服来装饰下自己，让自己拥有一个完美的约会。比如，你会穿一件衬衫，然后穿一件西服裤，最后穿皮鞋出门。</p></li><li><p>一家甜品店，出售蛋糕，除了蛋糕外，还可以在蛋糕上布置水果，蜡烛等，但是水果和蜡烛需要额外收费。</p></li><li><p>咖啡店里咖啡中可以加不同的配料：摩卡、牛奶、糖、奶泡；不同的饮品加上不同的配料有不同的价钱。</p></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>去买冰淇淋，可以买普通的冰淇淋和选择加糖或者加坚果的冰淇淋为例来实现</p><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/Icecream.png"></p><h4 id="Icecream类"><a href="#Icecream类" class="headerlink" title="Icecream类"></a>Icecream类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Icecream</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">makeIcecream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="SimpleIcecream类"><a href="#SimpleIcecream类" class="headerlink" title="SimpleIcecream类"></a>SimpleIcecream类</h4><p>实现冰淇淋接口，并可以生产普通冰淇淋</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleIcecream</span> <span class="token keyword">implements</span> <span class="token class-name">Icecream</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">makeIcecream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"生产了一个普通的冰淇淋"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="IcecreamDecorator类"><a href="#IcecreamDecorator类" class="headerlink" title="IcecreamDecorator类"></a>IcecreamDecorator类</h4><p>装饰角色，后面的附加坚果，糖等其他东西的类需要继承他</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IcecreamDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Icecream</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Icecream specialIcecream<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">makeIcecream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> specialIcecream<span class="token punctuation">.</span><span class="token function">makeIcecream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">IcecreamDecorator</span><span class="token punctuation">(</span>Icecream specialIcecream<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>specialIcecream<span class="token operator">=</span>specialIcecream<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="HoneyDecorator类"><a href="#HoneyDecorator类" class="headerlink" title="HoneyDecorator类"></a>HoneyDecorator类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HoneyDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">IcecreamDecorator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HoneyDecorator</span><span class="token punctuation">(</span>Icecream specialIcecream<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>specialIcecream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">makeIcercream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"生产了一个"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addHoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的特殊冰淇淋"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String <span class="token function">addHoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"加糖"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="NuttyDecorator类"><a href="#NuttyDecorator类" class="headerlink" title="NuttyDecorator类"></a>NuttyDecorator类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NuttyDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">IcecreamDecorator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NuttyDecorator</span><span class="token punctuation">(</span>Icecream specialIcecream<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">super</span><span class="token punctuation">(</span>specialIcecream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">makeIcecream</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"生产了一个"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addNuts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的特殊冰淇淋"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String <span class="token function">addNuts</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"加坚果"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>写出测试类进行验证</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>       Icecream simpleIcecream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleIcecream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleIcecream<span class="token punctuation">.</span><span class="token function">makeIcecream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Icecream nutttIcecream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NuttyDecorator</span><span class="token punctuation">(</span>simpleIcecream<span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nutttIcecream<span class="token punctuation">.</span><span class="token function">makeIcecream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token class-name">HoneyDecorator</span><span class="token punctuation">(</span>simpleIcecream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeIcercream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><pre><code>生产了一个普通的冰淇淋生产了一个加坚果的特殊冰淇淋生产了一个加糖的特殊冰淇淋</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>目的在于扩展对象的功能。装饰者模式提供比继承更好的灵活性。装饰是动态的，运行时可以修改的</li><li>继承是静态的，编译期便已确定好。通过使用不同的装饰类及对它们的排列组合，可以创造出许多不同行为的组合</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>利用装饰者模式，常常造成设计中有大量的小类，数量太多，会造成使用此API的人带来困扰，不容易理解。</li><li>采用装饰者在实例化组件时，将增加代码复杂度。一旦使用装饰者，不仅要实例化组件，同时要将组件实例包装进装饰者。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之模板方法模式</title>
      <link href="/2020/04/22/TemplateMethodPattern/"/>
      <url>/2020/04/22/TemplateMethodPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The Template Method Pattern defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclass redefine certain steps of an algorithm without changing the algorithm’s structure.</p><p>模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p><p>模板方法就是一个固定步骤的“算法”骨架方法。这个算法的可变部分通过继承，在子类中重载实现。这样就可以在算法骨架不变的情况下，算法细节步骤根据不同的需求进行适应的改变</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现</li><li>各子类中公共的行为应该被提取出来并集中到一个公共父类中避免代码重复</li><li>控制子类的扩展</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>AbstractClass: 抽象类，定义抽象原语操作，具体子类将重定义他们以实现一个算法，实现一个模板方法，定义一个算法的骨架。改模板方法不仅调用原语操作，也调用定义。</li><li>ConcreteClass: 具体子类，实现原语操作以完成算法中与特点子类相关的步骤</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/TemplateMethodPattern.png"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ul><li>泡茶，都需要先煮沸水，然后加入茶叶，然后根据需求加入调料（柠檬，蜂蜜），再将泡好的茶水倒入杯子</li><li>去银行办理业务，先要排号，然后办理相关业务（取款，存款），再为本次服务评分，完成业务办理</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以上述银行业务为例子，取款，存款可以为服务打分，转账可以不用打分</p><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/Bank.png"></p><h4 id="Bank-抽象类"><a href="#Bank-抽象类" class="headerlink" title="Bank 抽象类"></a>Bank 抽象类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">prepareBussiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isJudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">judgeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经开始排号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">judgeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成评分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isJudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Deposit存款类"><a href="#Deposit存款类" class="headerlink" title="Deposit存款类"></a>Deposit存款类</h4><p>需要继承银行类，并实现自己的存款业务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deposit</span> <span class="token keyword">extends</span> <span class="token class-name">Bank</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="WithdrawMoney取款类"><a href="#WithdrawMoney取款类" class="headerlink" title="WithdrawMoney取款类"></a>WithdrawMoney取款类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WithdrawMoney</span> <span class="token keyword">extends</span> <span class="token class-name">Bank</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Transfer转账类"><a href="#Transfer转账类" class="headerlink" title="Transfer转账类"></a>Transfer转账类</h4><p>转账不需要评分，所以需要重写isJudge方法，让他返回值为false</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Transfer</span> <span class="token keyword">extends</span> <span class="token class-name">Bank</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转账"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isJudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>再写个测试类运行一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Deposit deposit<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********存款业务***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deposit<span class="token punctuation">.</span><span class="token function">prepareBussiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        WithdrawMoney withdrawMoney<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">WithdrawMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********取款业务**************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        withdrawMoney<span class="token punctuation">.</span><span class="token function">prepareBussiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transfer transfer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********转账业务*************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transfer<span class="token punctuation">.</span><span class="token function">prepareBussiness</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre><code>*********存款业务***********已经开始排号存款完成评分完成业务********取款业务**************已经开始排号取款完成评分完成业务*********转账业务*************已经开始排号转账完成业务</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>提高代码复用性，将相同部分的代码放在抽象的父类中</li><li>提高了拓展性，将不同的代码放入不同的子类中，通过对子类的扩展增加新的行为</li><li>实现了反向控制，通过一个父类调用其子类的操作，通过过对子类的扩展增加新的行为实现了反向控制，符合开闭原则</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>引入了抽象类，每一个不同的实现都需要一个子类来实现，导致类的个数增加，从而增加了系统实现的复杂度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之观察者模式</title>
      <link href="/2020/04/20/ObserverPattern/"/>
      <url>/2020/04/20/ObserverPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The Observer Pattern defines as one-to-many dependcy between objects so that when one object changes state, all if its depends are notified and updated automatically.</p><p>定义对象间的一种一对多（变化）的依赖关系，以便当一个对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>当一个抽象模型有两个方面, 其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</li><li>当对一个对象的改变需要同时改变其它对象, 而不知道具体有多少对象有待改变。</li><li>当一个对象必须通知其它对象，而它又不能假定其它对象是谁。换言之, 你不希望这些对象是紧密耦合的。</li></ul><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li>Subject：抽象主题，把所有对观察者对象的引用保存在一个集合中，每个抽象主题角色都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。</li><li>Observer：抽象观察者，为所有具体的观察者定义一个接口，在得到主题的通知时更新自己。</li><li>ConcreteSubject：具体主题，在具体主题内部状态改变时，给所有登记过的观察者发出通知。具体主题角色通常用一个子类实现。</li><li>ConcreteObserver：该角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。通常用一个子类实现。如果需要，具体观察者角色可以保存一个指向具体主题角色的引用。</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/ObserverPattern.png"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ul><li>微信公众号有服务号、订阅号和企业号之分。每当发布一篇博文推送，订阅的用户都能够在发布推送之后及时接收到推送，即可方便地在手机端进行阅读。</li><li>购票后记录文本日志、购票后记录数据库日志、购票后发送短信、购票送抵扣卷、兑换卷、积分、其他各类活动等</li><li>当我做作业的时候告诉妈妈，饭做好了喊我吃饭。这里就是观察者模式，我向妈<br>妈（系统主题）注册我感兴趣的事（吃饭），妈妈在事情发生的时候，通知系统<br>观察者对象（我），做出相应的变化（去吃饭）。</li><li>股票系统上涨或下跌会自动提示用户</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以上方股票系统为例，假设当股票价格波动超过5%时，系统会通知所有的股东。</p><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/OnlineStockSystem.png"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Action</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Investor</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span> Action  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The current stock price is "</span><span class="token operator">+</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The stock price fluctuates more than 5%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> ArrayList<span class="token operator">&lt;</span>Person<span class="token operator">></span> persons<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Stock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        persons<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stock1</span> <span class="token keyword">extends</span> <span class="token class-name">Stock</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Stock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Stock1</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">=</span>price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>price<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0.05</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">=</span>price<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The original stock price is "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Person person<span class="token operator">:</span>persons<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Stock1 stock1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stock1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Investor investor<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Investor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stock1<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>investor<span class="token punctuation">)</span><span class="token punctuation">;</span>                stock1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stock1<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><pre><code>The original stock price is 98.0The current stock price is 92.0The stock price fluctuates more than 5%</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>观察者和被观察者是抽象耦合的</li><li>建立一套触发机制</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>1.如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>2.如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li><li>3.观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List集合</title>
      <link href="/2020/04/17/List/"/>
      <url>/2020/04/17/List/</url>
      
        <content type="html"><![CDATA[<h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>List集合代表一个元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素 。List集合默认按元素的添加顺序设置元素的索引，例如第一个添加的元素索引为0，第二个添加的元素索引为1……</p><p> List作为Collection接口的子接口，可以使用Collection接口里的全部方法。而且由于List是有序集合，因此List集合里增加了一些根据索引来操作集合元素的方法。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span></code></pre><h3 id="接口中定义的方法"><a href="#接口中定义的方法" class="headerlink" title="接口中定义的方法"></a>接口中定义的方法</h3><ul><li>void add(int index, Object element): 在列表的指定位置插入指定元素（可选操作）。</li><li>boolean addAll(int index, Collection&lt;? extends E&gt; c) : 将集合c 中的所有元素都插入到列表中的指定位置index处。</li><li>Object get(index):返回列表中指定位置的元素。</li><li>int indexOf(Object o): 返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。</li><li>int lastIndexOf(Object o):返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。</li><li>Object remove(int index): 移除列表中指定位置的元素。</li><li>Object set(int index, Object element):用指定元素替换列表中指定位置的元素。</li><li>List subList(int fromIndex, int toIndex): 返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的所有集合元素组成的子集。</li><li>Object[] toArray(): 返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）。</li></ul><h3 id="List特点"><a href="#List特点" class="headerlink" title="List特点"></a>List特点</h3><ul><li>List是有序的collection，因此用户可以根据元素的索引（元素在列表中的位置）来找到。</li><li>List中的元素是可以重复的。</li></ul><h3 id="List特有的迭代器"><a href="#List特有的迭代器" class="headerlink" title="List特有的迭代器"></a>List特有的迭代器</h3><h5 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h5><ul><li>hasNext（）</li><li>next（）</li><li>remove（）</li></ul><h5 id="List集合的调优"><a href="#List集合的调优" class="headerlink" title="List集合的调优"></a>List集合的调优</h5><p>如果知道每次大概增长的数量，就可以传一个参数，改变集合的初始大小，减少容器传输的次数。</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList 类提供了快速的基于索引的成员访问方式，对尾部成员的增加和删除支持较好。使用 ArrayList 创建的集合，允许对集合中的元素进行快速的随机访问，不过，向 ArrayList 中插入与删除元素的速度相对较慢。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li>ArrayList（） 构造一个初始容量为十的空列表</li><li>ArrayList（Collection&lt;? extends E&gt;C）构造一个包含指定集合的元素的列表，按照他们由集合的迭代器返回的顺序</li><li>ArrayList（int initialCapacity）构造具有指定初始容量的空列表</li></ul><h3 id="集合特点"><a href="#集合特点" class="headerlink" title="集合特点"></a>集合特点</h3><ul><li>数组结构  </li><li>有连续下标。增删慢，查询。(因为他是有序的，有下标，所有每增加一个或减少一个，整个集合的下标都要跟着改变，所以增删慢。但是正是因为它有下标所以可以根据下标来查询，所以查询速度快) </li><li>线程不同步 </li><li>增长因子为1.5</li></ul><p><img src="/ArrayList.png"></p><h3 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul><li>boolean add(E e) 将指定的元素追加到此列表的末尾</li><li>void add(int index,E element) 在此列表中的指定位置插入指定的元素</li><li>boolean addAll（Collection&lt;? extends E&gt;c）按指定集合的Iterator返回的顺序讲指定集合中所有的元素追加到此列表的末尾</li><li>void addAll（int index,Collection&lt;? extends E&gt;c）将指定集合中的所有元素插入到此列表中，从指定的位置开始</li><li>void clean（）从列表中删除所有元素</li><li>boolean contains（Object o）如此此列表包含指定的元素，则返回true</li><li>E get（int index）返回此列表中指定位置的元素</li><li>int indexOf（Object o） 返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1</li><li>int lastIndexOf(Object o) 返回此集合中最后一次出现指定元素的索引，如果此集合不包括该元素，则返回-1</li><li>boolean isEmpty（）如果此列表不包含元素，则返回true</li><li>Iterator<E> iterator（）以正确的顺序返回该列表中的元素的迭代器</li><li>E remove（int index）删除该列表中指定位置的元素</li><li>boolean remove（Object o）从列表中删除指定元素的第一出现（如果存在）</li><li>boolean removeAll（Collection&lt;?&gt; c）从此列表中删除指定集合中包含的所有元素</li><li>E set（int index,E element）用指定的元素替换此列表中指定位置的元素</li><li>int size（）返回此列表中的元素数</li><li>void sort（Comparator&lt;? super E&gt; c）使用提供的Comparator对此列表进行排序以比较元素</li><li>List<E> subList（int fromIndex, int tolndex）返回一个新的集合，新集合中包含fromIndex和toIndex索引之间的所有元素。</li></ul><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>Student类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String nameString<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ageString<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String nameString<span class="token punctuation">,</span> String ageString<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nameString <span class="token operator">=</span> nameString<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ageString <span class="token operator">=</span> ageString<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getNameString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nameString<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNameString</span><span class="token punctuation">(</span>String nameString<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nameString <span class="token operator">=</span> nameString<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAgeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ageString<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAgeString</span><span class="token punctuation">(</span>String ageString<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ageString <span class="token operator">=</span> ageString<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Student [nameString="</span> <span class="token operator">+</span> nameString <span class="token operator">+</span> <span class="token string">", ageString="</span> <span class="token operator">+</span> ageString <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>ArrayListDemo类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Student student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"吕布"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"貂蝉"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"刘琦"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"吕蒙"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"曹仁"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student5<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合是否为空："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合元素数量："</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全部的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以直接输出student</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List subList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 截取存到subList</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"截取的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> subList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-bash"><code class="language-bash">集合是否为空：false集合元素数量：5全部的元素Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕布, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>貂蝉, ageString<span class="token operator">=</span>女<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>刘琦, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>曹仁, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕蒙, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>截取的元素Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>刘琦, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>  Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>曹仁, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>  </code></pre><h4 id="indexOf与lastIndexOf"><a href="#indexOf与lastIndexOf" class="headerlink" title="indexOf与lastIndexOf"></a>indexOf与lastIndexOf</h4><p>前者是获得指定对象的最小索引位置，而后者是获得指定对象的最大索引位置。前提条件是指定的对象在 List 集合中有重复的对象，否则这两个方法获取的索引值相同。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>       List list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Mark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合元素数量："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Jack在集合中第一次出现的索引是："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从0开始</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Jack在集合中最后一次出现的索引是："</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Iterator iterator<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-bash"><code class="language-bash">集合元素数量：9Jack在集合中第一次出现的索引是：1Jack在集合中最后一次出现的索引是：7集合元素Alice Jack Mark Peter Park Eric Jack Jack Peter </code></pre><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>LinkedList 类采用链表结构保存对象，这种结构的优点是便于向集合中插入或者删除元素。需要频繁向集合中插入和删除元素时，使用 LinkedList 类比 ArrayList 类效果高，但是 LinkedList 类随机访问元素的速度则相对较慢。这里的随机访问是指检索集合中特定索引位置的元素。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token operator">&lt;</span>E<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Deque<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre><h3 id="集合特点-1"><a href="#集合特点-1" class="headerlink" title="集合特点"></a>集合特点</h3><p><img src="/LinkedList.png"></p><ul><li><p>链表结构（双链表结构，当前元素知道自己上一个元素和下一个元素）</p></li><li><p>增删改查慢，有连续下标</p></li><li><p>线程同步</p></li><li><p>增长因子2</p></li></ul><h4 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h4><p>链表结构是由许多节点构成的，每个节点都包含两部分</p><ul><li>数据部分：保存该节点的实际数据（值）</li><li>地址部分：保存下一个节点的地址（下标）</li></ul><p>单向链表：只能获取自己下一个元素的节点</p><p>双向链表：能获取自己上一个元素和下一个元素的节点</p><h4 id="LinkedList可以实现堆栈存储结构和队列存储结构"><a href="#LinkedList可以实现堆栈存储结构和队列存储结构" class="headerlink" title="LinkedList可以实现堆栈存储结构和队列存储结构"></a>LinkedList可以实现堆栈存储结构和队列存储结构</h4><ul><li>堆栈：先进后出</li><li>队列：先进先出</li></ul><h3 id="方法摘要-1"><a href="#方法摘要-1" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul><li>void addFirst(E e) 将指定元素添加到此集合的开头</li><li>void addLast(E e) 将指定元素添加到此集合的末尾</li><li>E getFirst() 返回此集合的第一个元素</li><li>E getLast() 返回此集合的最后一个元素</li><li>E removeFirst() 删除此集合中的第一个元素</li><li>E removeLast() 删除此集合中的最后一个元素</li></ul><h3 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h3><p>Student类同上ArrayList</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        LinkedList<span class="token operator">&lt;</span>Student<span class="token operator">></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"吕布"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"貂蝉"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"刘琦"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"吕蒙"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"曹仁"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> linkedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>student5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加到末尾</span>        Student student6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"孔明"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>student6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加到开头</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> linkedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开头第一个元素是："</span><span class="token operator">+</span>linkedList<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最后一个元素是："</span><span class="token operator">+</span>linkedList<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                linkedList<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除末尾元素</span>        linkedList<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除开头元素</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> linkedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-bash"><code class="language-bash">Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕布, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>貂蝉, ageString<span class="token operator">=</span>女<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>刘琦, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕蒙, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>***************************Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>孔明, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕布, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>貂蝉, ageString<span class="token operator">=</span>女<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>刘琦, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕蒙, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>曹仁, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>开头第一个元素是：Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>孔明, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>最后一个元素是：Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>曹仁, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>*************************Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕布, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>貂蝉, ageString<span class="token operator">=</span>女<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>刘琦, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span>Student <span class="token punctuation">[</span>nameString<span class="token operator">=</span>吕蒙, ageString<span class="token operator">=</span>男<span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之数列求值1.1</title>
      <link href="/2020/04/16/algorithm1-1/"/>
      <url>/2020/04/16/algorithm1-1/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定数列 1, 1, 1, 3, 5, 9, 17, …，从第 4 项开始，每项都是前 3 项的和。求第 20190324 项的最后 4 位数字。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>类似斐波那契数列，不断循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-C"><code class="language-C">#include  stdio.hint main() &#123;    int a = 1, b = 1, c = 1;    int result = 0;    for (int i=4 ;  i<=20190324 ; i++)    &#123;        result = (a + b + c) %10000;        a = b;        b = c;        c = result;    &#125;    printf("%d\n",result);    return 0;&#125;</code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre class=" language-c"><code class="language-c"><span class="token number">4659</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map集合</title>
      <link href="/2020/04/13/Map/"/>
      <url>/2020/04/13/Map/</url>
      
        <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="什么是Map"><a href="#什么是Map" class="headerlink" title="什么是Map"></a>什么是Map</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span>An object that maps keys to values<span class="token punctuation">.</span> A map cannot contain duplicate keys<span class="token punctuation">;</span> each key can map to at most one value<span class="token punctuation">.</span>This <span class="token keyword">interface</span> <span class="token class-name">takes</span> the place of the Dictionary <span class="token keyword">class</span><span class="token punctuation">,</span> which was a totally <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">rather</span> than an <span class="token keyword">interface</span><span class="token punctuation">.</span>The Map <span class="token keyword">interface</span> <span class="token class-name">provides</span> three collection views<span class="token punctuation">,</span> which allow a map<span class="token string">'s contents to be viewed as a set of keys, collection of values, or set of key-value mappings. The order of a map is defined as the order in which the iterators on the map'</span>s collection views <span class="token keyword">return</span> their elements<span class="token punctuation">.</span> Some map implementations<span class="token punctuation">,</span> like the TreeMap <span class="token keyword">class</span><span class="token punctuation">,</span> make specific guarantees as to their order<span class="token punctuation">;</span> others<span class="token punctuation">,</span> like the HashMap <span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">do</span> not<span class="token punctuation">.</span></code></pre><p>Map是一种依照键（key）存储元素的容器，什么是键呢，它就像是下标，在List中下标是整数，而在Map中键可以是任意类型的对象，Map中不能有重复的键,没一个键都有一个对象的值（Value）。一个键和它对应的值构成Map集合的一个元素，Map中的元素是两个对象，一个对象作为键，一个对象作为值，键不可以重复但是值可以重复。</p><h3 id="Map的特点"><a href="#Map的特点" class="headerlink" title="Map的特点"></a>Map的特点</h3><ol><li>包含键值对</li><li>键唯一</li><li>键对应的值唯一</li><li>Map是一个接口</li></ol><p><img src="/map.png" alt="Map集合"></p><h3 id="Map和Collection的区别"><a href="#Map和Collection的区别" class="headerlink" title="Map和Collection的区别"></a>Map和Collection的区别</h3><ol><li>Map集合存储的元素是成对出现的，Map集合的键是唯一的，值是可以重复的。</li><li>Collection集合存储元素的单独出现的，Collection的子体系Set的唯一的，List是可重复的。</li><li>Map集合的数据结构只针对键有效，跟值无关。</li><li>Collection集合的数据结构是针对元素有效的。</li><li>Map是双列集合，Collection是单列集合。</li></ol><ul><li><p>HashMap: 基于哈希表的Map接口，保证键的唯一性。</p></li><li><p>LinkedHashMap: Map接口的哈希表和链接列表，保证键的唯一性，具有可预知的迭代顺序（添加的顺序和输出的顺序完全一致）。</p></li><li><p>TreeMap: 红黑树的Map接口，保证键的顺序和唯一性。</p></li></ul><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><p>暂且列举出常用方法，具体其他实例参考API</p><h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><ul><li>int size()  返回集合中键值对的对数</li></ul><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ul><li>V put（K key，V value）如果键是第一次存储，就直接存储元素，返回null。如果键不是第一次存储，就用值把以前的值替换掉，返回以前的值。</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>void clear（）移除所有的键值对元素。</li><li>V remove（Object key）根据键值对元素，返回删除的值。</li></ul><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul><li>boolean containsKey(Object key)  判断集合是否包含指定的键</li><li>boolean containsValue(Object value) 判断集合是否包含指定的值</li><li>boolean isEmpty（）判断集合是否为空</li></ul><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><ul><li>V get(Object key) 根据键获取值</li><li>Set keySet（）获取集合中所有键的集合</li><li>Collection values（）获取集合中所有值得集合</li></ul><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><h3 id="V-put（K-Key-V-value）方法，返回值为V类型"><a href="#V-put（K-Key-V-value）方法，返回值为V类型" class="headerlink" title="V put（K Key,V value）方法，返回值为V类型"></a>V put（K Key,V value）方法，返回值为V类型</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token comment" spellcheck="true">//创建集合对象</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//添加元素</span>      <span class="token comment" spellcheck="true">//如果键是第一次存储，就直接存储元素，返回null</span>      <span class="token comment" spellcheck="true">//如果键不是第一次存储，就用值把以前的值替换掉，返回以前的值。（键已经存在，值就覆盖）</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"许褚"</span><span class="token punctuation">,</span><span class="token string">"三军主将"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token string">"主公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"荀彧"</span><span class="token punctuation">,</span> <span class="token string">"汉臣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"许攸"</span><span class="token punctuation">,</span> <span class="token string">"汉臣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"董卓"</span><span class="token punctuation">,</span> <span class="token string">"尚父"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出结果 null</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"董卓"</span><span class="token punctuation">,</span> <span class="token string">"汉贼"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出结果 尚父</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"孙坚"</span><span class="token punctuation">,</span> <span class="token string">"大破董卓，杀进洛阳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出结果&amp;#123;许攸=汉臣, 许褚=三军主将, 荀彧=汉臣, 曹操=主公, 孙坚=大破董卓，杀进洛阳&amp;#125;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"孙坚"</span><span class="token punctuation">,</span> <span class="token string">"卒于荆州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出结果&amp;#123;许攸=汉臣, 许褚=三军主将, 荀彧=汉臣, 曹操=主公, 孙坚=卒于荆州&amp;#125; </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="删除和判断方法"><a href="#删除和判断方法" class="headerlink" title="删除和判断方法"></a>删除和判断方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"陈公台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张辽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"曹仁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"司马懿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"张琳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//删除元素。传入键，返回对应的值，若键不存在，返回null</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//张辽 </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//null </span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//false</span>       <span class="token comment" spellcheck="true">//判断</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"张琳"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//true   true</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"周瑜"</span><span class="token punctuation">,</span><span class="token string">"周公瑾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"鲁肃"</span><span class="token punctuation">,</span><span class="token string">"鲁子敬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"孙权"</span><span class="token punctuation">,</span> <span class="token string">"孙仲谋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕蒙"</span><span class="token punctuation">,</span> <span class="token string">"吕子明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//根据键获取值</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"周瑜"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//周公瑾</span>     <span class="token comment" spellcheck="true">//获得所有键的集合</span>     Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>String k<span class="token operator">:</span>keySet<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 鲁肃 孙权  周瑜  吕蒙 输出所有的键</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//获取所有值的集合</span>    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> values<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String v<span class="token operator">:</span>values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//鲁子敬 孙仲谋 周公瑾 吕子明输出所有的值</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"周瑜"</span><span class="token punctuation">,</span><span class="token string">"周公瑾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"鲁肃"</span><span class="token punctuation">,</span><span class="token string">"鲁子敬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"孙权"</span><span class="token punctuation">,</span> <span class="token string">"孙仲谋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕蒙"</span><span class="token punctuation">,</span> <span class="token string">"吕子明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Ⅰ得到Map集合中所有的键的集合遍历键的集合再根据键去找对应的值</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>String k<span class="token operator">:</span>keySet<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          String valueString<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>valueString<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Ⅱ 获取所有Map集合中所有键值对象的集合，遍历键值对象的集合得到每一个键值对象</span>      Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> mapSet<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> ms<span class="token operator">:</span>mapSet<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          String keyString<span class="token operator">=</span>ms<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String valueString<span class="token operator">=</span>ms<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keyString<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>valueString<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Ⅲ 取得所有键值对对象的迭代器，迭代得到每一个与元素都是键值对对象</span>      Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterator<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry<span class="token operator">=</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Ⅳ 通过Map.values遍历所有的value 但不能遍历key</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>String v<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">前三种遍历输出结果都为：鲁肃<span class="token operator">=</span>鲁子敬孙权<span class="token operator">=</span>孙仲谋周瑜<span class="token operator">=</span>周公瑾吕蒙<span class="token operator">=</span>吕子明第四中不能遍历key，结果为：鲁子敬孙仲谋周公瑾吕子明</code></pre><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>HashMap：是基于哈希表的Map接口实现，哈希表的作用是用来保证键的唯一性。HashMap数据结构为数组加链表，其中链表的节点存储的是一个Entry对象，每个Entry对象存储四个属性（hash，key，value，next）</p><p><img src="/hashmap.png"></p><ul><li>整体是一个数组</li><li>数组每个位置是一个链表</li><li>链表每个节点的Value即我们存储的Object</li></ul><h3 id="键和值都是String"><a href="#键和值都是String" class="headerlink" title="键和值都是String"></a>键和值都是String</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token string">"斩颜良诛文丑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"赵云"</span><span class="token punctuation">,</span> <span class="token string">"七进七出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"徐庶"</span><span class="token punctuation">,</span> <span class="token string">"进曹营"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"诸葛亮"</span><span class="token punctuation">,</span> <span class="token string">"空城计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"诸葛亮"</span><span class="token punctuation">,</span> <span class="token string">"火烧赤壁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会覆盖掉上面的 空城计</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet<span class="token operator">=</span>hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>String k<span class="token operator">:</span>keySet<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          String valueString<span class="token operator">=</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>valueString<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-bash"><code class="language-bash">关羽<span class="token operator">=</span>斩颜良诛文丑诸葛亮<span class="token operator">=</span>火烧赤壁赵云<span class="token operator">=</span>七进七出徐庶<span class="token operator">=</span>进曹营</code></pre><h3 id="键是Integer值是String"><a href="#键是Integer值是String" class="headerlink" title="键是Integer值是String"></a>键是Integer值是String</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">,</span> <span class="token string">"斩颜良诛文丑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">002</span><span class="token punctuation">,</span> <span class="token string">"七进七出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">003</span><span class="token punctuation">,</span> <span class="token string">"进曹营"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">004</span><span class="token punctuation">,</span> <span class="token string">"空城计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">007</span><span class="token punctuation">,</span> <span class="token string">"三英战吕布"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> keySet<span class="token operator">=</span>hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>Integer k<span class="token operator">:</span>keySet<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          String valueString<span class="token operator">=</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>valueString<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//集合元素的字符串表示，并非遍历</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-bash"><code class="language-bash">1<span class="token operator">=</span>斩颜良诛文丑2<span class="token operator">=</span>七进七出3<span class="token operator">=</span>进曹营4<span class="token operator">=</span>空城计7<span class="token operator">=</span>三英战吕布<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1=斩颜良诛文丑, 2=七进七出, 3=进曹营, 4=空城计, 7=三英战吕布&amp;#125;</span></code></pre><h3 id="键是Integer值是Student"><a href="#键是Integer值是Student" class="headerlink" title="键是Integer值是Student"></a>键是Integer值是Student</h3><p>Student类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>HashMap</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Student<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span> student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span> student2<span class="token punctuation">)</span><span class="token punctuation">;</span>                Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> keySet<span class="token operator">=</span>hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Integer k<span class="token operator">:</span>keySet<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Student stu<span class="token operator">=</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-bash"><code class="language-bash">1<span class="token operator">=</span>张三 202<span class="token operator">=</span>李四 193<span class="token operator">=</span>王五 14</code></pre><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>Map接口的哈希表和链接列表实现，具有可预知的迭代顺序。</p><p>输出是有序的，什么顺序输进去就按照什么顺序输出来，当键相同时，值也被覆盖了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMap</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> linkedHashMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token string">"温酒斩华雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"吕布"</span><span class="token punctuation">,</span> <span class="token string">"方天画戟杀董卓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"曹操"</span><span class="token punctuation">,</span> <span class="token string">"煮酒论英雄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedHashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span> <span class="token string">"过五关斩六将"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet<span class="token operator">=</span>linkedHashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String k<span class="token operator">:</span>keySet<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String valueString<span class="token operator">=</span>linkedHashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>valueString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-bash"><code class="language-bash">关羽 过五关斩六将吕布 方天画戟杀董卓曹操 煮酒论英雄</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之策略模式</title>
      <link href="/2020/04/12/StrategyPattern/"/>
      <url>/2020/04/12/StrategyPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改，这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象，策略对象改变context对象的执行算法。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>我们先看看《Head First》是怎么定义的</p><p>“The Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.”</p><p>翻译一下，就是说策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，策略模式让算法的变化独立于使用算法的客户。也就是说，我们需要将一个类中经常变化的部分（例如子类覆盖父类的方法）抽离出来，封装成单独的类，然后运用组合的思想，设定为类的成员变量。这样就可以动态的改变该类的行为了（只需要用改变类的成员变量）。这也是书中“favor composition over inheritance”的设计原则。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>针对同一类型问题的多种处理方式，仅仅是具体行为有差别时。</li><li>需要安全的封装多种同一类型的操作时。</li><li>出现同一抽象类有多个子类，而又需要使用if-else或者switch-case来选择具体子类时。</li><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li></ol><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>策略模式涉及到三个角色</p><ul><li>Context: 环境角色，持有一个Strategy的引用,是一个使用了某种策略的类。</li><li>Strategy：抽象策略，这是一个抽象角色，通常由一个接口或抽象类实现，此角色给出所有的具体策略类所需要的接口。</li><li>ConcreteStrategy: 具体策略，包装了相关的算法或者行为。</li></ul><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/StrategyPattern.png" alt="策略模式"></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ol><li>旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。</li><li>JAVA AWT 中的 LayoutManager。</li><li>游乐场买门票，普通和会员等不同等级的人会有不同的门票价格。</li><li>在极品飞车这款游戏，游戏对车的轮胎是可以更换的，不同的轮胎在高速转弯时有不同的痕迹样式，那么针对汽车的配件轮胎就可以变化，而且轮胎和轮胎之间是可以相互替换的。</li><li>电影院电影分类，有2D、3D、4D类型，在不同类型中还分时间段、电影类型、不同类型的电影播放厅。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们就暂且以上述游乐场买票作为实现案例，假设游乐场的门票制度，学生打八折，十岁以下的儿童半价，VIP用户打七折并且随机赠送一个小礼物，并且游乐场在未来可能还会增加用户类型。</p><p>我们根据题目描述则可分析出，打折是我们的Strategy（抽象策略），打折的对象是ConcreteStrategy（具体策略），门票便是Context(环境角色)了。</p><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="/Discount.png" alt="游乐园打折类图"></p><h4 id="Discount"><a href="#Discount" class="headerlink" title="Discount"></a>Discount</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Discount</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="ChildrenDiscount"><a href="#ChildrenDiscount" class="headerlink" title="ChildrenDiscount"></a>ChildrenDiscount</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChildrenDiscount</span> <span class="token keyword">implements</span> <span class="token class-name">Discount</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0.5</span><span class="token operator">*</span>price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="StudentDiscount"><a href="#StudentDiscount" class="headerlink" title="StudentDiscount"></a>StudentDiscount</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDiscount</span> <span class="token keyword">implements</span> <span class="token class-name">Discount</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0.8</span><span class="token operator">*</span>price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="VIPDiscount"><a href="#VIPDiscount" class="headerlink" title="VIPDiscount"></a>VIPDiscount</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VIPDiscount</span> <span class="token keyword">implements</span> <span class="token class-name">Discount</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"we give you a gift"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0.7</span><span class="token operator">*</span>price<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Ticket"><a href="#Ticket" class="headerlink" title="Ticket"></a>Ticket</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> Discount discount<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token operator">=</span>price<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDiscount</span><span class="token punctuation">(</span>Discount discount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>discount<span class="token operator">=</span>discount<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> discount<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="client"><a href="#client" class="headerlink" title="client"></a>client</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Ticket ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ticket<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置门票原价八十元</span>        <span class="token comment" spellcheck="true">//儿童打折</span>        ticket<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChildrenDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Children:"</span> <span class="token operator">+</span> ticket<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//学生打折</span>        ticket<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student:"</span> <span class="token operator">+</span> ticket<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//VIP打折</span>        ticket<span class="token punctuation">.</span><span class="token function">setDiscount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VIPDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"VIP:"</span> <span class="token operator">+</span> ticket<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p><img src="/Client.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>策略模式中算法可以自由切换。</li><li>避免了使用多重条件判断。</li><li>扩展性良好。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>策略类会增多。</li><li>所有策略类都需要对外暴露。</li><li>如果一个系统的策略多余四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模之命令模式</title>
      <link href="/2020/04/11/CommandPattern/"/>
      <url>/2020/04/11/CommandPattern/</url>
      
        <content type="html"><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>首先，命令模式是一种行为模式。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>《Head First》</p><p>The Command Pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests, qucue or log requests, and support undoable operations.</p><p>命令模式是一个高内聚的模式，将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录日志，可以提供命令的撤消和恢复功能。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>顾名思义，命令模式就是对命令的封装。命令模式可以将请求发送者和接收者完全解耦，发送者与接收者之间没有直接引用关系，发送请求的对象只需要知道如何发送请求，而不必知道如何完成请求。</p><ul><li>Command : 抽象类，对需要执行的命令进行声明，通常我们设置一个execute方法来用来执行命令。</li><li>ConcreteCommand :  这是Command的实现类，对抽象类中的方法进行实现。</li><li>Invoker ：调用者，负责调用命令。</li><li>Receiver ：接收者，负责接收命令并进行执行。</li></ul><p>执行顺序：调用者——&gt;接收者——&gt;命令</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/Command.png" alt="命令模式"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>需要对行为进行记录，撤销，重做等事务处理时需要抽象出待执行的动作，然后以参数的形式提供出来。</p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><ol><li>GUI中每一个按钮都是一条命令，同样遵循命令模式的设计原则。</li><li>我们使用遥控器更换电视节目，电视剧遥控器（命令发送者）通过按钮（具体命令）来遥控电视剧（命令接收者）。</li><li>计算机键盘上的“功能建”。</li><li>我们去到饭店吃饭，服务员把客户点的菜告诉厨师，厨师在根据菜单做菜。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们就拿上述到饭店吃饭为例，客户来的饭店，要求服务员（Servant）点羊肉串（MuttonString）和鸡肉串（Chicken），服务员传达给后厨厨师（Chef）,厨师负责烤串。</p><p>我们先分析来分析哪一个是调用者？哪一个是接收者？</p><p>由此我们得到类图</p><p><img src="/Barbercue.png" alt="类图示例"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Chicken"><a href="#Chicken" class="headerlink" title="Chicken"></a>Chicken</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chicken</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Chef chef<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>        chef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        chef<span class="token punctuation">.</span><span class="token function">produceChicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="MuttonString"><a href="#MuttonString" class="headerlink" title="MuttonString"></a>MuttonString</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MuttonString</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Chef chef<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MuttonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>       chef<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Chef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       chef<span class="token punctuation">.</span><span class="token function">produceMuttonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如此我们已经完成了抽象类和抽象方法的实现，接下来便是调用者与接收者了</p><h4 id="Chef"><a href="#Chef" class="headerlink" title="Chef"></a>Chef</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chef</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceChicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸡肉串儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceMuttonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"羊肉串儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Servant"><a href="#Servant" class="headerlink" title="Servant"></a>Servant</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servant</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Command chickencommand<span class="token punctuation">,</span> muttonStringCommand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Servant</span><span class="token punctuation">(</span>Command chickencommand<span class="token punctuation">,</span> Command muttonStringCommand<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chickencommand <span class="token operator">=</span> chickencommand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>muttonStringCommand <span class="token operator">=</span> muttonStringCommand<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceChicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chickencommand<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceMuttonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>muttonStringCommand<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们再写个客户端测试类测试一下</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             Command cCommand<span class="token punctuation">,</span>mCommand<span class="token punctuation">;</span>             cCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             mCommand <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MuttonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Servant servant<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Servant</span><span class="token punctuation">(</span>cCommand<span class="token punctuation">,</span> mCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>             servant<span class="token punctuation">.</span><span class="token function">produceChicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             servant<span class="token punctuation">.</span><span class="token function">produceMuttonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p><img src="/Client.png" alt="测试结果"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>类间解耦，调用者角色与接受者角色之间没有任何依赖关系，调用者实现功能只需要调用Command抽象的execute方法就可以，不需要知道到底是哪一个接收者执行。</li><li>可扩展性，Command子类可以非常容易的扩展，而调用者Invoker和高层次的模块Client不产生严重的代码耦合。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>可能会导致某些系统有过多的具体命令类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
